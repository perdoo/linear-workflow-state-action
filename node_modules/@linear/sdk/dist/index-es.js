import Stream from 'stream';
import http from 'http';
import https from 'https';
import zlib from 'zlib';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

/**
 * The error types returned by the Linear API
 */
var LinearErrorType;
(function (LinearErrorType) {
    LinearErrorType["FeatureNotAccessible"] = "FeatureNotAccessible";
    LinearErrorType["InvalidInput"] = "InvalidInput";
    LinearErrorType["Ratelimited"] = "Ratelimited";
    LinearErrorType["NetworkError"] = "NetworkError";
    LinearErrorType["AuthenticationError"] = "AuthenticationError";
    LinearErrorType["Forbidden"] = "Forbidden";
    LinearErrorType["BootstrapError"] = "BootstrapError";
    LinearErrorType["Unknown"] = "Unknown";
    LinearErrorType["InternalError"] = "InternalError";
    LinearErrorType["Other"] = "Other";
    LinearErrorType["UserError"] = "UserError";
    LinearErrorType["GraphqlError"] = "GraphqlError";
    LinearErrorType["LockTimeout"] = "LockTimeout";
})(LinearErrorType || (LinearErrorType = {}));

/**
 * Serialize an object into an encoded user agent string
 *
 * @param seed user agent properties to serialize
 * @returns the serialized user agent string
 */
function serializeUserAgent(seed) {
    return Object.entries(seed).reduce((acc, [key, value]) => {
        const encoded = `${key}@${encodeURIComponent(value)}`;
        return acc ? `${acc} ${encoded}` : encoded;
    }, "");
}
/**
 * Capitalize the first character of a string
 *
 * @param str the string to capitalize
 */
function capitalize(str) {
    return str ? `${str.charAt(0).toUpperCase()}${str.slice(1)}` : undefined;
}
/**
 * Type safe check for non defined values
 */
function nonNullable(value) {
    return value !== null && value !== undefined;
}
/**
 * Return the key matching the value in an object
 */
function getKeyByValue(obj, value) {
    const keys = Object.keys(obj);
    return keys.find(key => obj[key] === value);
}

/**
 * A map between the Linear API string type and the LinearErrorType enum
 */
const errorMap = {
    [LinearErrorType.FeatureNotAccessible]: "feature not accessible",
    [LinearErrorType.InvalidInput]: "invalid input",
    [LinearErrorType.Ratelimited]: "ratelimited",
    [LinearErrorType.NetworkError]: "network error",
    [LinearErrorType.AuthenticationError]: "authentication error",
    [LinearErrorType.Forbidden]: "forbidden",
    [LinearErrorType.BootstrapError]: "bootstrap error",
    [LinearErrorType.Unknown]: "unknown",
    [LinearErrorType.InternalError]: "internal error",
    [LinearErrorType.Other]: "other",
    [LinearErrorType.UserError]: "user error",
    [LinearErrorType.GraphqlError]: "graphql error",
    [LinearErrorType.LockTimeout]: "lock timeout",
};
/**
 * Match the error type or return unknown
 */
function getErrorType(type) {
    var _a;
    return (_a = getKeyByValue(errorMap, type)) !== null && _a !== void 0 ? _a : LinearErrorType.Unknown;
}
/**
 * The error shown if no other message is available
 */
const defaultError = "Unknown error from LinearClient";
/**
 * One of potentially many graphql errors returned by the Linear API
 *
 * @error the raw graphql error returned on the error response
 */
class LinearGraphQLError {
    constructor(error) {
        var _a, _b, _c, _d, _e, _f, _g;
        this.type = getErrorType((_a = error === null || error === void 0 ? void 0 : error.extensions) === null || _a === void 0 ? void 0 : _a.type);
        this.userError = (_b = error === null || error === void 0 ? void 0 : error.extensions) === null || _b === void 0 ? void 0 : _b.userError;
        this.path = error === null || error === void 0 ? void 0 : error.path;
        /** Select most readable message */
        this.message =
            (_g = (_e = (_d = (_c = error === null || error === void 0 ? void 0 : error.extensions) === null || _c === void 0 ? void 0 : _c.userPresentableMessage) !== null && _d !== void 0 ? _d : error === null || error === void 0 ? void 0 : error.message) !== null && _e !== void 0 ? _e : (_f = error === null || error === void 0 ? void 0 : error.extensions) === null || _f === void 0 ? void 0 : _f.type) !== null && _g !== void 0 ? _g : defaultError;
    }
}
/**
 * An error from the Linear API
 *
 * @param error a raw error returned from the LinearGraphQLClient
 */
class LinearError extends Error {
    constructor(error, errors, type) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        /** Find messages, duplicate and join, or default */
        super((_e = Array.from(new Set([capitalize((_b = (_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.split(": {")) === null || _b === void 0 ? void 0 : _b[0]), (_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.error, (_d = errors === null || errors === void 0 ? void 0 : errors[0]) === null || _d === void 0 ? void 0 : _d.message].filter(nonNullable)))
            .filter(nonNullable)
            .join(" - ")) !== null && _e !== void 0 ? _e : defaultError);
        this.type = type;
        /** Set error properties */
        this.errors = errors;
        this.query = (_f = error === null || error === void 0 ? void 0 : error.request) === null || _f === void 0 ? void 0 : _f.query;
        this.variables = (_g = error === null || error === void 0 ? void 0 : error.request) === null || _g === void 0 ? void 0 : _g.variables;
        this.status = (_h = error === null || error === void 0 ? void 0 : error.response) === null || _h === void 0 ? void 0 : _h.status;
        this.data = (_j = error === null || error === void 0 ? void 0 : error.response) === null || _j === void 0 ? void 0 : _j.data;
        this.raw = error;
    }
}
class FeatureNotAccessibleLinearError extends LinearError {
    constructor(error, errors) {
        super(error, errors, LinearErrorType.FeatureNotAccessible);
    }
}
class InvalidInputLinearError extends LinearError {
    constructor(error, errors) {
        super(error, errors, LinearErrorType.InvalidInput);
    }
}
class RatelimitedLinearError extends LinearError {
    constructor(error, errors) {
        super(error, errors, LinearErrorType.Ratelimited);
    }
}
class NetworkLinearError extends LinearError {
    constructor(error, errors) {
        super(error, errors, LinearErrorType.NetworkError);
    }
}
class AuthenticationLinearError extends LinearError {
    constructor(error, errors) {
        super(error, errors, LinearErrorType.AuthenticationError);
    }
}
class ForbiddenLinearError extends LinearError {
    constructor(error, errors) {
        super(error, errors, LinearErrorType.Forbidden);
    }
}
class BootstrapLinearError extends LinearError {
    constructor(error, errors) {
        super(error, errors, LinearErrorType.BootstrapError);
    }
}
class UnknownLinearError extends LinearError {
    constructor(error, errors) {
        super(error, errors, LinearErrorType.Unknown);
    }
}
class InternalLinearError extends LinearError {
    constructor(error, errors) {
        super(error, errors, LinearErrorType.InternalError);
    }
}
class OtherLinearError extends LinearError {
    constructor(error, errors) {
        super(error, errors, LinearErrorType.Other);
    }
}
class UserLinearError extends LinearError {
    constructor(error, errors) {
        super(error, errors, LinearErrorType.UserError);
    }
}
class GraphqlLinearError extends LinearError {
    constructor(error, errors) {
        super(error, errors, LinearErrorType.GraphqlError);
    }
}
class LockTimeoutLinearError extends LinearError {
    constructor(error, errors) {
        super(error, errors, LinearErrorType.LockTimeout);
    }
}
/**
 * A map between the Linear error type and the LinearError class
 */
const errorConstructorMap = {
    [LinearErrorType.FeatureNotAccessible]: FeatureNotAccessibleLinearError,
    [LinearErrorType.InvalidInput]: InvalidInputLinearError,
    [LinearErrorType.Ratelimited]: RatelimitedLinearError,
    [LinearErrorType.NetworkError]: NetworkLinearError,
    [LinearErrorType.AuthenticationError]: AuthenticationLinearError,
    [LinearErrorType.Forbidden]: ForbiddenLinearError,
    [LinearErrorType.BootstrapError]: BootstrapLinearError,
    [LinearErrorType.Unknown]: UnknownLinearError,
    [LinearErrorType.InternalError]: InternalLinearError,
    [LinearErrorType.Other]: OtherLinearError,
    [LinearErrorType.UserError]: UserLinearError,
    [LinearErrorType.GraphqlError]: GraphqlLinearError,
    [LinearErrorType.LockTimeout]: LockTimeoutLinearError,
};
function parseLinearError(error) {
    var _a, _b, _c, _d, _e, _f;
    if (error instanceof LinearError) {
        return error;
    }
    /** Parse graphQL errors */
    const errors = ((_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.errors) !== null && _b !== void 0 ? _b : []).map(graphqlError => {
        return new LinearGraphQLError(graphqlError);
    });
    /** Set type based first graphql error or http status */
    const status = (_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.status;
    const type = (_e = (_d = errors[0]) === null || _d === void 0 ? void 0 : _d.type) !== null && _e !== void 0 ? _e : (status === 403
        ? LinearErrorType.Forbidden
        : status === 429
            ? LinearErrorType.Ratelimited
            : `${status}`.startsWith("4")
                ? LinearErrorType.AuthenticationError
                : status === 500
                    ? LinearErrorType.InternalError
                    : `${status}`.startsWith("5")
                        ? LinearErrorType.NetworkError
                        : LinearErrorType.Unknown);
    const LinearErrorConstructor = (_f = errorConstructorMap[type]) !== null && _f !== void 0 ? _f : LinearError;
    return new LinearErrorConstructor(error, errors);
}

// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
var nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;
var nodejsCustomInspectSymbol$1 = nodejsCustomInspectSymbol;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
var MAX_ARRAY_LENGTH = 10;
var MAX_RECURSIVE_DEPTH = 2;
/**
 * Used to print values in error messages.
 */

function inspect(value) {
  return formatValue(value, []);
}

function formatValue(value, seenValues) {
  switch (_typeof(value)) {
    case 'string':
      return JSON.stringify(value);

    case 'function':
      return value.name ? "[function ".concat(value.name, "]") : '[function]';

    case 'object':
      if (value === null) {
        return 'null';
      }

      return formatObjectValue(value, seenValues);

    default:
      return String(value);
  }
}

function formatObjectValue(value, previouslySeenValues) {
  if (previouslySeenValues.indexOf(value) !== -1) {
    return '[Circular]';
  }

  var seenValues = [].concat(previouslySeenValues, [value]);
  var customInspectFn = getCustomFn(value);

  if (customInspectFn !== undefined) {
    var customValue = customInspectFn.call(value); // check for infinite recursion

    if (customValue !== value) {
      return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray(value, seenValues);
  }

  return formatObject(value, seenValues);
}

function formatObject(object, seenValues) {
  var keys = Object.keys(object);

  if (keys.length === 0) {
    return '{}';
  }

  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return '[' + getObjectTag(object) + ']';
  }

  var properties = keys.map(function (key) {
    var value = formatValue(object[key], seenValues);
    return key + ': ' + value;
  });
  return '{ ' + properties.join(', ') + ' }';
}

function formatArray(array, seenValues) {
  if (array.length === 0) {
    return '[]';
  }

  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return '[Array]';
  }

  var len = Math.min(MAX_ARRAY_LENGTH, array.length);
  var remaining = array.length - len;
  var items = [];

  for (var i = 0; i < len; ++i) {
    items.push(formatValue(array[i], seenValues));
  }

  if (remaining === 1) {
    items.push('... 1 more item');
  } else if (remaining > 1) {
    items.push("... ".concat(remaining, " more items"));
  }

  return '[' + items.join(', ') + ']';
}

function getCustomFn(object) {
  var customInspectFn = object[String(nodejsCustomInspectSymbol$1)];

  if (typeof customInspectFn === 'function') {
    return customInspectFn;
  }

  if (typeof object.inspect === 'function') {
    return object.inspect;
  }
}

function getObjectTag(object) {
  var tag = Object.prototype.toString.call(object).replace(/^\[object /, '').replace(/]$/, '');

  if (tag === 'Object' && typeof object.constructor === 'function') {
    var name = object.constructor.name;

    if (typeof name === 'string' && name !== '') {
      return name;
    }
  }

  return tag;
}

function invariant(condition, message) {
  var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')

  if (!booleanCondition) {
    throw new Error(message != null ? message : 'Unexpected invariant triggered.');
  }
}

/**
 * The `defineInspect()` function defines `inspect()` prototype method as alias of `toJSON`
 */

function defineInspect(classObject) {
  var fn = classObject.prototype.toJSON;
  typeof fn === 'function' || invariant(0);
  classObject.prototype.inspect = fn; // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2317')

  if (nodejsCustomInspectSymbol$1) {
    classObject.prototype[nodejsCustomInspectSymbol$1] = fn;
  }
}

/**
 * Contains a range of UTF-8 character offsets and token references that
 * identify the region of the source from which the AST derived.
 */
var Location = /*#__PURE__*/function () {
  /**
   * The character offset at which this Node begins.
   */

  /**
   * The character offset at which this Node ends.
   */

  /**
   * The Token at which this Node begins.
   */

  /**
   * The Token at which this Node ends.
   */

  /**
   * The Source document the AST represents.
   */
  function Location(startToken, endToken, source) {
    this.start = startToken.start;
    this.end = endToken.end;
    this.startToken = startToken;
    this.endToken = endToken;
    this.source = source;
  }

  var _proto = Location.prototype;

  _proto.toJSON = function toJSON() {
    return {
      start: this.start,
      end: this.end
    };
  };

  return Location;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

defineInspect(Location);
/**
 * Represents a range of characters represented by a lexical token
 * within a Source.
 */

var Token = /*#__PURE__*/function () {
  /**
   * The kind of Token.
   */

  /**
   * The character offset at which this Node begins.
   */

  /**
   * The character offset at which this Node ends.
   */

  /**
   * The 1-indexed line number on which this Token appears.
   */

  /**
   * The 1-indexed column number at which this Token begins.
   */

  /**
   * For non-punctuation tokens, represents the interpreted value of the token.
   */

  /**
   * Tokens exist as nodes in a double-linked-list amongst all tokens
   * including ignored tokens. <SOF> is always the first node and <EOF>
   * the last.
   */
  function Token(kind, start, end, line, column, prev, value) {
    this.kind = kind;
    this.start = start;
    this.end = end;
    this.line = line;
    this.column = column;
    this.value = value;
    this.prev = prev;
    this.next = null;
  }

  var _proto2 = Token.prototype;

  _proto2.toJSON = function toJSON() {
    return {
      kind: this.kind,
      value: this.value,
      line: this.line,
      column: this.column
    };
  };

  return Token;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

defineInspect(Token);
/**
 * @internal
 */

function isNode(maybeNode) {
  return maybeNode != null && typeof maybeNode.kind === 'string';
}
/**
 * The list of all possible AST node types.
 */

/**
 * A visitor is provided to visit, it contains the collection of
 * relevant functions to be called during the visitor's traversal.
 */

var QueryDocumentKeys = {
  Name: [],
  Document: ['definitions'],
  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],
  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],
  Variable: ['name'],
  SelectionSet: ['selections'],
  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],
  Argument: ['name', 'value'],
  FragmentSpread: ['name', 'directives'],
  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],
  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed
  // or removed in the future.
  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],
  IntValue: [],
  FloatValue: [],
  StringValue: [],
  BooleanValue: [],
  NullValue: [],
  EnumValue: [],
  ListValue: ['values'],
  ObjectValue: ['fields'],
  ObjectField: ['name', 'value'],
  Directive: ['name', 'arguments'],
  NamedType: ['name'],
  ListType: ['type'],
  NonNullType: ['type'],
  SchemaDefinition: ['description', 'directives', 'operationTypes'],
  OperationTypeDefinition: ['type'],
  ScalarTypeDefinition: ['description', 'name', 'directives'],
  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],
  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],
  InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],
  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],
  EnumValueDefinition: ['description', 'name', 'directives'],
  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],
  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],
  SchemaExtension: ['directives', 'operationTypes'],
  ScalarTypeExtension: ['name', 'directives'],
  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
  UnionTypeExtension: ['name', 'directives', 'types'],
  EnumTypeExtension: ['name', 'directives', 'values'],
  InputObjectTypeExtension: ['name', 'directives', 'fields']
};
var BREAK = Object.freeze({});
/**
 * visit() will walk through an AST using a depth-first traversal, calling
 * the visitor's enter function at each node in the traversal, and calling the
 * leave function after visiting that node and all of its child nodes.
 *
 * By returning different values from the enter and leave functions, the
 * behavior of the visitor can be altered, including skipping over a sub-tree of
 * the AST (by returning false), editing the AST by returning a value or null
 * to remove the value, or to stop the whole traversal by returning BREAK.
 *
 * When using visit() to edit an AST, the original AST will not be modified, and
 * a new version of the AST with the changes applied will be returned from the
 * visit function.
 *
 *     const editedAST = visit(ast, {
 *       enter(node, key, parent, path, ancestors) {
 *         // @return
 *         //   undefined: no action
 *         //   false: skip visiting this node
 *         //   visitor.BREAK: stop visiting altogether
 *         //   null: delete this node
 *         //   any value: replace this node with the returned value
 *       },
 *       leave(node, key, parent, path, ancestors) {
 *         // @return
 *         //   undefined: no action
 *         //   false: no action
 *         //   visitor.BREAK: stop visiting altogether
 *         //   null: delete this node
 *         //   any value: replace this node with the returned value
 *       }
 *     });
 *
 * Alternatively to providing enter() and leave() functions, a visitor can
 * instead provide functions named the same as the kinds of AST nodes, or
 * enter/leave visitors at a named key, leading to four permutations of the
 * visitor API:
 *
 * 1) Named visitors triggered when entering a node of a specific kind.
 *
 *     visit(ast, {
 *       Kind(node) {
 *         // enter the "Kind" node
 *       }
 *     })
 *
 * 2) Named visitors that trigger upon entering and leaving a node of
 *    a specific kind.
 *
 *     visit(ast, {
 *       Kind: {
 *         enter(node) {
 *           // enter the "Kind" node
 *         }
 *         leave(node) {
 *           // leave the "Kind" node
 *         }
 *       }
 *     })
 *
 * 3) Generic visitors that trigger upon entering and leaving any node.
 *
 *     visit(ast, {
 *       enter(node) {
 *         // enter any node
 *       },
 *       leave(node) {
 *         // leave any node
 *       }
 *     })
 *
 * 4) Parallel visitors for entering and leaving nodes of a specific kind.
 *
 *     visit(ast, {
 *       enter: {
 *         Kind(node) {
 *           // enter the "Kind" node
 *         }
 *       },
 *       leave: {
 *         Kind(node) {
 *           // leave the "Kind" node
 *         }
 *       }
 *     })
 */

function visit(root, visitor) {
  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;

  /* eslint-disable no-undef-init */
  var stack = undefined;
  var inArray = Array.isArray(root);
  var keys = [root];
  var index = -1;
  var edits = [];
  var node = undefined;
  var key = undefined;
  var parent = undefined;
  var path = [];
  var ancestors = [];
  var newRoot = root;
  /* eslint-enable no-undef-init */

  do {
    index++;
    var isLeaving = index === keys.length;
    var isEdited = isLeaving && edits.length !== 0;

    if (isLeaving) {
      key = ancestors.length === 0 ? undefined : path[path.length - 1];
      node = parent;
      parent = ancestors.pop();

      if (isEdited) {
        if (inArray) {
          node = node.slice();
        } else {
          var clone = {};

          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {
            var k = _Object$keys2[_i2];
            clone[k] = node[k];
          }

          node = clone;
        }

        var editOffset = 0;

        for (var ii = 0; ii < edits.length; ii++) {
          var editKey = edits[ii][0];
          var editValue = edits[ii][1];

          if (inArray) {
            editKey -= editOffset;
          }

          if (inArray && editValue === null) {
            node.splice(editKey, 1);
            editOffset++;
          } else {
            node[editKey] = editValue;
          }
        }
      }

      index = stack.index;
      keys = stack.keys;
      edits = stack.edits;
      inArray = stack.inArray;
      stack = stack.prev;
    } else {
      key = parent ? inArray ? index : keys[index] : undefined;
      node = parent ? parent[key] : newRoot;

      if (node === null || node === undefined) {
        continue;
      }

      if (parent) {
        path.push(key);
      }
    }

    var result = void 0;

    if (!Array.isArray(node)) {
      if (!isNode(node)) {
        throw new Error("Invalid AST Node: ".concat(inspect(node), "."));
      }

      var visitFn = getVisitFn(visitor, node.kind, isLeaving);

      if (visitFn) {
        result = visitFn.call(visitor, node, key, parent, path, ancestors);

        if (result === BREAK) {
          break;
        }

        if (result === false) {
          if (!isLeaving) {
            path.pop();
            continue;
          }
        } else if (result !== undefined) {
          edits.push([key, result]);

          if (!isLeaving) {
            if (isNode(result)) {
              node = result;
            } else {
              path.pop();
              continue;
            }
          }
        }
      }
    }

    if (result === undefined && isEdited) {
      edits.push([key, node]);
    }

    if (isLeaving) {
      path.pop();
    } else {
      var _visitorKeys$node$kin;

      stack = {
        inArray: inArray,
        index: index,
        keys: keys,
        edits: edits,
        prev: stack
      };
      inArray = Array.isArray(node);
      keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];
      index = -1;
      edits = [];

      if (parent) {
        ancestors.push(parent);
      }

      parent = node;
    }
  } while (stack !== undefined);

  if (edits.length !== 0) {
    newRoot = edits[edits.length - 1][1];
  }

  return newRoot;
}
/**
 * Given a visitor instance, if it is leaving or not, and a node kind, return
 * the function the visitor runtime should call.
 */

function getVisitFn(visitor, kind, isLeaving) {
  var kindVisitor = visitor[kind];

  if (kindVisitor) {
    if (!isLeaving && typeof kindVisitor === 'function') {
      // { Kind() {} }
      return kindVisitor;
    }

    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;

    if (typeof kindSpecificVisitor === 'function') {
      // { Kind: { enter() {}, leave() {} } }
      return kindSpecificVisitor;
    }
  } else {
    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;

    if (specificVisitor) {
      if (typeof specificVisitor === 'function') {
        // { enter() {}, leave() {} }
        return specificVisitor;
      }

      var specificKindVisitor = specificVisitor[kind];

      if (typeof specificKindVisitor === 'function') {
        // { enter: { Kind() {} }, leave: { Kind() {} } }
        return specificKindVisitor;
      }
    }
  }
}

/**
 * Produces the value of a block string from its parsed raw value, similar to
 * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.
 *
 * This implements the GraphQL spec's BlockStringValue() static algorithm.
 *
 * @internal
 */
/**
 * Print a block string in the indented block form by adding a leading and
 * trailing blank line. However, if a block string starts with whitespace and is
 * a single-line, adding a leading blank line would strip that whitespace.
 *
 * @internal
 */

function printBlockString(value) {
  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var isSingleLine = value.indexOf('\n') === -1;
  var hasLeadingSpace = value[0] === ' ' || value[0] === '\t';
  var hasTrailingQuote = value[value.length - 1] === '"';
  var hasTrailingSlash = value[value.length - 1] === '\\';
  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;
  var result = ''; // Format a multi-line block quote to account for leading space.

  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
    result += '\n' + indentation;
  }

  result += indentation ? value.replace(/\n/g, '\n' + indentation) : value;

  if (printAsMultipleLines) {
    result += '\n';
  }

  return '"""' + result.replace(/"""/g, '\\"""') + '"""';
}

/**
 * Converts an AST into a string, using one set of reasonable
 * formatting rules.
 */

function print(ast) {
  return visit(ast, {
    leave: printDocASTReducer
  });
}
var MAX_LINE_LENGTH = 80; // TODO: provide better type coverage in future

var printDocASTReducer = {
  Name: function Name(node) {
    return node.value;
  },
  Variable: function Variable(node) {
    return '$' + node.name;
  },
  // Document
  Document: function Document(node) {
    return join(node.definitions, '\n\n') + '\n';
  },
  OperationDefinition: function OperationDefinition(node) {
    var op = node.operation;
    var name = node.name;
    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');
    var directives = join(node.directives, ' ');
    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use
    // the query short form.

    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');
  },
  VariableDefinition: function VariableDefinition(_ref) {
    var variable = _ref.variable,
        type = _ref.type,
        defaultValue = _ref.defaultValue,
        directives = _ref.directives;
    return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));
  },
  SelectionSet: function SelectionSet(_ref2) {
    var selections = _ref2.selections;
    return block(selections);
  },
  Field: function Field(_ref3) {
    var alias = _ref3.alias,
        name = _ref3.name,
        args = _ref3.arguments,
        directives = _ref3.directives,
        selectionSet = _ref3.selectionSet;
    var prefix = wrap('', alias, ': ') + name;
    var argsLine = prefix + wrap('(', join(args, ', '), ')');

    if (argsLine.length > MAX_LINE_LENGTH) {
      argsLine = prefix + wrap('(\n', indent(join(args, '\n')), '\n)');
    }

    return join([argsLine, join(directives, ' '), selectionSet], ' ');
  },
  Argument: function Argument(_ref4) {
    var name = _ref4.name,
        value = _ref4.value;
    return name + ': ' + value;
  },
  // Fragments
  FragmentSpread: function FragmentSpread(_ref5) {
    var name = _ref5.name,
        directives = _ref5.directives;
    return '...' + name + wrap(' ', join(directives, ' '));
  },
  InlineFragment: function InlineFragment(_ref6) {
    var typeCondition = _ref6.typeCondition,
        directives = _ref6.directives,
        selectionSet = _ref6.selectionSet;
    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');
  },
  FragmentDefinition: function FragmentDefinition(_ref7) {
    var name = _ref7.name,
        typeCondition = _ref7.typeCondition,
        variableDefinitions = _ref7.variableDefinitions,
        directives = _ref7.directives,
        selectionSet = _ref7.selectionSet;
    return (// Note: fragment variable definitions are experimental and may be changed
      // or removed in the future.
      "fragment ".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), " ") + "on ".concat(typeCondition, " ").concat(wrap('', join(directives, ' '), ' ')) + selectionSet
    );
  },
  // Value
  IntValue: function IntValue(_ref8) {
    var value = _ref8.value;
    return value;
  },
  FloatValue: function FloatValue(_ref9) {
    var value = _ref9.value;
    return value;
  },
  StringValue: function StringValue(_ref10, key) {
    var value = _ref10.value,
        isBlockString = _ref10.block;
    return isBlockString ? printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value);
  },
  BooleanValue: function BooleanValue(_ref11) {
    var value = _ref11.value;
    return value ? 'true' : 'false';
  },
  NullValue: function NullValue() {
    return 'null';
  },
  EnumValue: function EnumValue(_ref12) {
    var value = _ref12.value;
    return value;
  },
  ListValue: function ListValue(_ref13) {
    var values = _ref13.values;
    return '[' + join(values, ', ') + ']';
  },
  ObjectValue: function ObjectValue(_ref14) {
    var fields = _ref14.fields;
    return '{' + join(fields, ', ') + '}';
  },
  ObjectField: function ObjectField(_ref15) {
    var name = _ref15.name,
        value = _ref15.value;
    return name + ': ' + value;
  },
  // Directive
  Directive: function Directive(_ref16) {
    var name = _ref16.name,
        args = _ref16.arguments;
    return '@' + name + wrap('(', join(args, ', '), ')');
  },
  // Type
  NamedType: function NamedType(_ref17) {
    var name = _ref17.name;
    return name;
  },
  ListType: function ListType(_ref18) {
    var type = _ref18.type;
    return '[' + type + ']';
  },
  NonNullType: function NonNullType(_ref19) {
    var type = _ref19.type;
    return type + '!';
  },
  // Type System Definitions
  SchemaDefinition: addDescription(function (_ref20) {
    var directives = _ref20.directives,
        operationTypes = _ref20.operationTypes;
    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');
  }),
  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
    var operation = _ref21.operation,
        type = _ref21.type;
    return operation + ': ' + type;
  },
  ScalarTypeDefinition: addDescription(function (_ref22) {
    var name = _ref22.name,
        directives = _ref22.directives;
    return join(['scalar', name, join(directives, ' ')], ' ');
  }),
  ObjectTypeDefinition: addDescription(function (_ref23) {
    var name = _ref23.name,
        interfaces = _ref23.interfaces,
        directives = _ref23.directives,
        fields = _ref23.fields;
    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
  }),
  FieldDefinition: addDescription(function (_ref24) {
    var name = _ref24.name,
        args = _ref24.arguments,
        type = _ref24.type,
        directives = _ref24.directives;
    return name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));
  }),
  InputValueDefinition: addDescription(function (_ref25) {
    var name = _ref25.name,
        type = _ref25.type,
        defaultValue = _ref25.defaultValue,
        directives = _ref25.directives;
    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');
  }),
  InterfaceTypeDefinition: addDescription(function (_ref26) {
    var name = _ref26.name,
        interfaces = _ref26.interfaces,
        directives = _ref26.directives,
        fields = _ref26.fields;
    return join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
  }),
  UnionTypeDefinition: addDescription(function (_ref27) {
    var name = _ref27.name,
        directives = _ref27.directives,
        types = _ref27.types;
    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
  }),
  EnumTypeDefinition: addDescription(function (_ref28) {
    var name = _ref28.name,
        directives = _ref28.directives,
        values = _ref28.values;
    return join(['enum', name, join(directives, ' '), block(values)], ' ');
  }),
  EnumValueDefinition: addDescription(function (_ref29) {
    var name = _ref29.name,
        directives = _ref29.directives;
    return join([name, join(directives, ' ')], ' ');
  }),
  InputObjectTypeDefinition: addDescription(function (_ref30) {
    var name = _ref30.name,
        directives = _ref30.directives,
        fields = _ref30.fields;
    return join(['input', name, join(directives, ' '), block(fields)], ' ');
  }),
  DirectiveDefinition: addDescription(function (_ref31) {
    var name = _ref31.name,
        args = _ref31.arguments,
        repeatable = _ref31.repeatable,
        locations = _ref31.locations;
    return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');
  }),
  SchemaExtension: function SchemaExtension(_ref32) {
    var directives = _ref32.directives,
        operationTypes = _ref32.operationTypes;
    return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');
  },
  ScalarTypeExtension: function ScalarTypeExtension(_ref33) {
    var name = _ref33.name,
        directives = _ref33.directives;
    return join(['extend scalar', name, join(directives, ' ')], ' ');
  },
  ObjectTypeExtension: function ObjectTypeExtension(_ref34) {
    var name = _ref34.name,
        interfaces = _ref34.interfaces,
        directives = _ref34.directives,
        fields = _ref34.fields;
    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
  },
  InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {
    var name = _ref35.name,
        interfaces = _ref35.interfaces,
        directives = _ref35.directives,
        fields = _ref35.fields;
    return join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
  },
  UnionTypeExtension: function UnionTypeExtension(_ref36) {
    var name = _ref36.name,
        directives = _ref36.directives,
        types = _ref36.types;
    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
  },
  EnumTypeExtension: function EnumTypeExtension(_ref37) {
    var name = _ref37.name,
        directives = _ref37.directives,
        values = _ref37.values;
    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');
  },
  InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {
    var name = _ref38.name,
        directives = _ref38.directives,
        fields = _ref38.fields;
    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');
  }
};

function addDescription(cb) {
  return function (node) {
    return join([node.description, cb(node)], '\n');
  };
}
/**
 * Given maybeArray, print an empty string if it is null or empty, otherwise
 * print all items together separated by separator if provided
 */


function join(maybeArray) {
  var _maybeArray$filter$jo;

  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function (x) {
    return x;
  }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';
}
/**
 * Given array, print each item on its own line, wrapped in an
 * indented "{ }" block.
 */


function block(array) {
  return wrap('{\n', indent(join(array, '\n')), '\n}');
}
/**
 * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.
 */


function wrap(start, maybeString) {
  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  return maybeString != null && maybeString !== '' ? start + maybeString + end : '';
}

function indent(str) {
  return wrap('  ', str.replace(/\n/g, '\n  '));
}

function isMultiline(str) {
  return str.indexOf('\n') !== -1;
}

function hasMultilineItems(maybeArray) {
  return maybeArray != null && maybeArray.some(isMultiline);
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getAugmentedNamespace(n) {
	if (n.__esModule) return n;
	var a = Object.defineProperty({}, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

function createCommonjsModule(fn) {
  var module = { exports: {} };
	return fn(module, module.exports), module.exports;
}

function unfetch_module(e,n){return n=n||{},new Promise(function(t,r){var s=new XMLHttpRequest,o=[],u=[],i={},a=function(){return {ok:2==(s.status/100|0),statusText:s.statusText,status:s.status,url:s.responseURL,text:function(){return Promise.resolve(s.responseText)},json:function(){return Promise.resolve(s.responseText).then(JSON.parse)},blob:function(){return Promise.resolve(new Blob([s.response]))},clone:a,headers:{keys:function(){return o},entries:function(){return u},get:function(e){return i[e.toLowerCase()]},has:function(e){return e.toLowerCase()in i}}}};for(var l in s.open(n.method||"get",e,!0),s.onload=function(){s.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,function(e,n,t){o.push(n=n.toLowerCase()),u.push([n,t]),i[n]=i[n]?i[n]+","+t:t;}),t(a());},s.onerror=r,s.withCredentials="include"==n.credentials,n.headers)s.setRequestHeader(l,n.headers[l]);s.send(n.body||null);})}

var unfetch_module$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': unfetch_module
});

/*! https://mths.be/punycode v1.3.2 by @mathias */

var punycode = createCommonjsModule(function (module, exports) {
(function(root) {

	/** Detect free variables */
	var freeExports = exports &&
		!exports.nodeType && exports;
	var freeModule = module &&
		!module.nodeType && module;
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.3.2',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (freeExports && freeModule) {
		if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.punycode = punycode;
	}

}(commonjsGlobal));
});

var util = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};

// Copyright Joyent, Inc. and other Node contributors.

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var decode = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (Array.isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

// Copyright Joyent, Inc. and other Node contributors.

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

var encode = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return Object.keys(obj).map(function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (Array.isArray(obj[k])) {
        return obj[k].map(function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var querystring = createCommonjsModule(function (module, exports) {

exports.decode = exports.parse = decode;
exports.encode = exports.stringify = encode;
});

var parse = urlParse;
var resolve = urlResolve;
var resolveObject = urlResolveObject;
var format = urlFormat;

var Url_1 = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    };

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

var url = {
	parse: parse,
	resolve: resolve,
	resolveObject: resolveObject,
	format: format,
	Url: Url_1
};

// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js

// fix for "Readable" isn't a named export issue
const Readable = Stream.Readable;

const BUFFER = Symbol('buffer');
const TYPE = Symbol('type');

class Blob$1 {
	constructor() {
		this[TYPE] = '';

		const blobParts = arguments[0];
		const options = arguments[1];

		const buffers = [];
		let size = 0;

		if (blobParts) {
			const a = blobParts;
			const length = Number(a.length);
			for (let i = 0; i < length; i++) {
				const element = a[i];
				let buffer;
				if (element instanceof Buffer) {
					buffer = element;
				} else if (ArrayBuffer.isView(element)) {
					buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
				} else if (element instanceof ArrayBuffer) {
					buffer = Buffer.from(element);
				} else if (element instanceof Blob$1) {
					buffer = element[BUFFER];
				} else {
					buffer = Buffer.from(typeof element === 'string' ? element : String(element));
				}
				size += buffer.length;
				buffers.push(buffer);
			}
		}

		this[BUFFER] = Buffer.concat(buffers);

		let type = options && options.type !== undefined && String(options.type).toLowerCase();
		if (type && !/[^\u0020-\u007E]/.test(type)) {
			this[TYPE] = type;
		}
	}
	get size() {
		return this[BUFFER].length;
	}
	get type() {
		return this[TYPE];
	}
	text() {
		return Promise.resolve(this[BUFFER].toString());
	}
	arrayBuffer() {
		const buf = this[BUFFER];
		const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		return Promise.resolve(ab);
	}
	stream() {
		const readable = new Readable();
		readable._read = function () {};
		readable.push(this[BUFFER]);
		readable.push(null);
		return readable;
	}
	toString() {
		return '[object Blob]';
	}
	slice() {
		const size = this.size;

		const start = arguments[0];
		const end = arguments[1];
		let relativeStart, relativeEnd;
		if (start === undefined) {
			relativeStart = 0;
		} else if (start < 0) {
			relativeStart = Math.max(size + start, 0);
		} else {
			relativeStart = Math.min(start, size);
		}
		if (end === undefined) {
			relativeEnd = size;
		} else if (end < 0) {
			relativeEnd = Math.max(size + end, 0);
		} else {
			relativeEnd = Math.min(end, size);
		}
		const span = Math.max(relativeEnd - relativeStart, 0);

		const buffer = this[BUFFER];
		const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
		const blob = new Blob$1([], { type: arguments[2] });
		blob[BUFFER] = slicedBuffer;
		return blob;
	}
}

Object.defineProperties(Blob$1.prototype, {
	size: { enumerable: true },
	type: { enumerable: true },
	slice: { enumerable: true }
});

Object.defineProperty(Blob$1.prototype, Symbol.toStringTag, {
	value: 'Blob',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * fetch-error.js
 *
 * FetchError interface for operational errors
 */

/**
 * Create FetchError instance
 *
 * @param   String      message      Error message for human
 * @param   String      type         Error type for machine
 * @param   String      systemError  For Node.js system error
 * @return  FetchError
 */
function FetchError(message, type, systemError) {
  Error.call(this, message);

  this.message = message;
  this.type = type;

  // when err.type is `system`, err.code contains system error code
  if (systemError) {
    this.code = this.errno = systemError.code;
  }

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = 'FetchError';

let convert;
try {
	convert = require('encoding').convert;
} catch (e) {}

const INTERNALS = Symbol('Body internals');

// fix an issue where "PassThrough" isn't a named export for node <10
const PassThrough = Stream.PassThrough;

/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
function Body(body) {
	var _this = this;

	var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	    _ref$size = _ref.size;

	let size = _ref$size === undefined ? 0 : _ref$size;
	var _ref$timeout = _ref.timeout;
	let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

	if (body == null) {
		// body is undefined or null
		body = null;
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		body = Buffer.from(body.toString());
	} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		body = Buffer.from(body);
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
	} else if (body instanceof Stream) ; else {
		// none of the above
		// coerce to string then buffer
		body = Buffer.from(String(body));
	}
	this[INTERNALS] = {
		body,
		disturbed: false,
		error: null
	};
	this.size = size;
	this.timeout = timeout;

	if (body instanceof Stream) {
		body.on('error', function (err) {
			const error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);
			_this[INTERNALS].error = error;
		});
	}
}

Body.prototype = {
	get body() {
		return this[INTERNALS].body;
	},

	get bodyUsed() {
		return this[INTERNALS].disturbed;
	},

	/**
  * Decode response as ArrayBuffer
  *
  * @return  Promise
  */
	arrayBuffer() {
		return consumeBody.call(this).then(function (buf) {
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		});
	},

	/**
  * Return raw response as Blob
  *
  * @return Promise
  */
	blob() {
		let ct = this.headers && this.headers.get('content-type') || '';
		return consumeBody.call(this).then(function (buf) {
			return Object.assign(
			// Prevent copying
			new Blob$1([], {
				type: ct.toLowerCase()
			}), {
				[BUFFER]: buf
			});
		});
	},

	/**
  * Decode response as json
  *
  * @return  Promise
  */
	json() {
		var _this2 = this;

		return consumeBody.call(this).then(function (buffer) {
			try {
				return JSON.parse(buffer.toString());
			} catch (err) {
				return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));
			}
		});
	},

	/**
  * Decode response as text
  *
  * @return  Promise
  */
	text() {
		return consumeBody.call(this).then(function (buffer) {
			return buffer.toString();
		});
	},

	/**
  * Decode response as buffer (non-spec api)
  *
  * @return  Promise
  */
	buffer() {
		return consumeBody.call(this);
	},

	/**
  * Decode response as text, while automatically detecting the encoding and
  * trying to decode to UTF-8 (non-spec api)
  *
  * @return  Promise
  */
	textConverted() {
		var _this3 = this;

		return consumeBody.call(this).then(function (buffer) {
			return convertBody(buffer, _this3.headers);
		});
	}
};

// In browsers, all properties are enumerable.
Object.defineProperties(Body.prototype, {
	body: { enumerable: true },
	bodyUsed: { enumerable: true },
	arrayBuffer: { enumerable: true },
	blob: { enumerable: true },
	json: { enumerable: true },
	text: { enumerable: true }
});

Body.mixIn = function (proto) {
	for (const name of Object.getOwnPropertyNames(Body.prototype)) {
		// istanbul ignore else: future proof
		if (!(name in proto)) {
			const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
			Object.defineProperty(proto, name, desc);
		}
	}
};

/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return  Promise
 */
function consumeBody() {
	var _this4 = this;

	if (this[INTERNALS].disturbed) {
		return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
	}

	this[INTERNALS].disturbed = true;

	if (this[INTERNALS].error) {
		return Body.Promise.reject(this[INTERNALS].error);
	}

	let body = this.body;

	// body is null
	if (body === null) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is blob
	if (isBlob(body)) {
		body = body.stream();
	}

	// body is buffer
	if (Buffer.isBuffer(body)) {
		return Body.Promise.resolve(body);
	}

	// istanbul ignore if: should never happen
	if (!(body instanceof Stream)) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is stream
	// get ready to actually consume the body
	let accum = [];
	let accumBytes = 0;
	let abort = false;

	return new Body.Promise(function (resolve, reject) {
		let resTimeout;

		// allow timeout on slow response body
		if (_this4.timeout) {
			resTimeout = setTimeout(function () {
				abort = true;
				reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));
			}, _this4.timeout);
		}

		// handle stream errors
		body.on('error', function (err) {
			if (err.name === 'AbortError') {
				// if the request was aborted, reject with this Error
				abort = true;
				reject(err);
			} else {
				// other errors, such as incorrect content-encoding
				reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));
			}
		});

		body.on('data', function (chunk) {
			if (abort || chunk === null) {
				return;
			}

			if (_this4.size && accumBytes + chunk.length > _this4.size) {
				abort = true;
				reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));
				return;
			}

			accumBytes += chunk.length;
			accum.push(chunk);
		});

		body.on('end', function () {
			if (abort) {
				return;
			}

			clearTimeout(resTimeout);

			try {
				resolve(Buffer.concat(accum, accumBytes));
			} catch (err) {
				// handle streams that have accumulated too much data (issue #414)
				reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));
			}
		});
	});
}

/**
 * Detect buffer encoding and convert to target encoding
 * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
 *
 * @param   Buffer  buffer    Incoming buffer
 * @param   String  encoding  Target encoding
 * @return  String
 */
function convertBody(buffer, headers) {
	if (typeof convert !== 'function') {
		throw new Error('The package `encoding` must be installed to use the textConverted() function');
	}

	const ct = headers.get('content-type');
	let charset = 'utf-8';
	let res, str;

	// header
	if (ct) {
		res = /charset=([^;]*)/i.exec(ct);
	}

	// no charset in content type, peek at response body for at most 1024 bytes
	str = buffer.slice(0, 1024).toString();

	// html5
	if (!res && str) {
		res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
	}

	// html4
	if (!res && str) {
		res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
		if (!res) {
			res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
			if (res) {
				res.pop(); // drop last quote
			}
		}

		if (res) {
			res = /charset=(.*)/i.exec(res.pop());
		}
	}

	// xml
	if (!res && str) {
		res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
	}

	// found charset
	if (res) {
		charset = res.pop();

		// prevent decode issues when sites use incorrect encoding
		// ref: https://hsivonen.fi/encoding-menu/
		if (charset === 'gb2312' || charset === 'gbk') {
			charset = 'gb18030';
		}
	}

	// turn raw buffers into a single utf-8 buffer
	return convert(buffer, 'UTF-8', charset).toString();
}

/**
 * Detect a URLSearchParams object
 * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
 *
 * @param   Object  obj     Object to detect by type or brand
 * @return  String
 */
function isURLSearchParams(obj) {
	// Duck-typing as a necessary condition.
	if (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
		return false;
	}

	// Brand-checking and more duck-typing as optional condition.
	return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
}

/**
 * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
 * @param  {*} obj
 * @return {boolean}
 */
function isBlob(obj) {
	return typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}

/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed  instance  Response or Request instance
 * @return  Mixed
 */
function clone(instance) {
	let p1, p2;
	let body = instance.body;

	// don't allow cloning a used body
	if (instance.bodyUsed) {
		throw new Error('cannot clone body after it is used');
	}

	// check that body is a stream and not form-data object
	// note: we can't clone the form-data object without having it as a dependency
	if (body instanceof Stream && typeof body.getBoundary !== 'function') {
		// tee instance body
		p1 = new PassThrough();
		p2 = new PassThrough();
		body.pipe(p1);
		body.pipe(p2);
		// set instance body to teed body and return the other teed body
		instance[INTERNALS].body = p1;
		body = p2;
	}

	return body;
}

/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param   Mixed  instance  Any options.body input
 */
function extractContentType(body) {
	if (body === null) {
		// body is null
		return null;
	} else if (typeof body === 'string') {
		// body is string
		return 'text/plain;charset=UTF-8';
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		return 'application/x-www-form-urlencoded;charset=UTF-8';
	} else if (isBlob(body)) {
		// body is blob
		return body.type || null;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return null;
	} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		return null;
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		return null;
	} else if (typeof body.getBoundary === 'function') {
		// detect form data input from form-data module
		return `multipart/form-data;boundary=${body.getBoundary()}`;
	} else if (body instanceof Stream) {
		// body is stream
		// can't really do much about this
		return null;
	} else {
		// Body constructor defaults other things to string
		return 'text/plain;charset=UTF-8';
	}
}

/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param   Body    instance   Instance of Body
 * @return  Number?            Number of bytes, or null if not possible
 */
function getTotalBytes(instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		return 0;
	} else if (isBlob(body)) {
		return body.size;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return body.length;
	} else if (body && typeof body.getLengthSync === 'function') {
		// detect form data input from form-data module
		if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
		body.hasKnownLength && body.hasKnownLength()) {
			// 2.x
			return body.getLengthSync();
		}
		return null;
	} else {
		// body is stream
		return null;
	}
}

/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param   Body    instance   Instance of Body
 * @return  Void
 */
function writeToStream(dest, instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		dest.end();
	} else if (isBlob(body)) {
		body.stream().pipe(dest);
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		dest.write(body);
		dest.end();
	} else {
		// body is stream
		body.pipe(dest);
	}
}

// expose Promise
Body.Promise = global.Promise;

/**
 * headers.js
 *
 * Headers class offers convenient helpers
 */

const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

function validateName(name) {
	name = `${name}`;
	if (invalidTokenRegex.test(name) || name === '') {
		throw new TypeError(`${name} is not a legal HTTP header name`);
	}
}

function validateValue(value) {
	value = `${value}`;
	if (invalidHeaderCharRegex.test(value)) {
		throw new TypeError(`${value} is not a legal HTTP header value`);
	}
}

/**
 * Find the key in the map object given a header name.
 *
 * Returns undefined if not found.
 *
 * @param   String  name  Header name
 * @return  String|Undefined
 */
function find(map, name) {
	name = name.toLowerCase();
	for (const key in map) {
		if (key.toLowerCase() === name) {
			return key;
		}
	}
	return undefined;
}

const MAP = Symbol('map');
class Headers$1 {
	/**
  * Headers class
  *
  * @param   Object  headers  Response headers
  * @return  Void
  */
	constructor() {
		let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

		this[MAP] = Object.create(null);

		if (init instanceof Headers$1) {
			const rawHeaders = init.raw();
			const headerNames = Object.keys(rawHeaders);

			for (const headerName of headerNames) {
				for (const value of rawHeaders[headerName]) {
					this.append(headerName, value);
				}
			}

			return;
		}

		// We don't worry about converting prop to ByteString here as append()
		// will handle it.
		if (init == null) ; else if (typeof init === 'object') {
			const method = init[Symbol.iterator];
			if (method != null) {
				if (typeof method !== 'function') {
					throw new TypeError('Header pairs must be iterable');
				}

				// sequence<sequence<ByteString>>
				// Note: per spec we have to first exhaust the lists then process them
				const pairs = [];
				for (const pair of init) {
					if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {
						throw new TypeError('Each header pair must be iterable');
					}
					pairs.push(Array.from(pair));
				}

				for (const pair of pairs) {
					if (pair.length !== 2) {
						throw new TypeError('Each header pair must be a name/value tuple');
					}
					this.append(pair[0], pair[1]);
				}
			} else {
				// record<ByteString, ByteString>
				for (const key of Object.keys(init)) {
					const value = init[key];
					this.append(key, value);
				}
			}
		} else {
			throw new TypeError('Provided initializer must be an object');
		}
	}

	/**
  * Return combined header value given name
  *
  * @param   String  name  Header name
  * @return  Mixed
  */
	get(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key === undefined) {
			return null;
		}

		return this[MAP][key].join(', ');
	}

	/**
  * Iterate over all headers
  *
  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
  * @param   Boolean   thisArg   `this` context for callback function
  * @return  Void
  */
	forEach(callback) {
		let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

		let pairs = getHeaders(this);
		let i = 0;
		while (i < pairs.length) {
			var _pairs$i = pairs[i];
			const name = _pairs$i[0],
			      value = _pairs$i[1];

			callback.call(thisArg, value, name, this);
			pairs = getHeaders(this);
			i++;
		}
	}

	/**
  * Overwrite header values given name
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	set(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		this[MAP][key !== undefined ? key : name] = [value];
	}

	/**
  * Append a value onto existing header
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	append(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			this[MAP][key].push(value);
		} else {
			this[MAP][name] = [value];
		}
	}

	/**
  * Check for header name existence
  *
  * @param   String   name  Header name
  * @return  Boolean
  */
	has(name) {
		name = `${name}`;
		validateName(name);
		return find(this[MAP], name) !== undefined;
	}

	/**
  * Delete all header values given name
  *
  * @param   String  name  Header name
  * @return  Void
  */
	delete(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			delete this[MAP][key];
		}
	}

	/**
  * Return raw headers (non-spec api)
  *
  * @return  Object
  */
	raw() {
		return this[MAP];
	}

	/**
  * Get an iterator on keys.
  *
  * @return  Iterator
  */
	keys() {
		return createHeadersIterator(this, 'key');
	}

	/**
  * Get an iterator on values.
  *
  * @return  Iterator
  */
	values() {
		return createHeadersIterator(this, 'value');
	}

	/**
  * Get an iterator on entries.
  *
  * This is the default iterator of the Headers object.
  *
  * @return  Iterator
  */
	[Symbol.iterator]() {
		return createHeadersIterator(this, 'key+value');
	}
}
Headers$1.prototype.entries = Headers$1.prototype[Symbol.iterator];

Object.defineProperty(Headers$1.prototype, Symbol.toStringTag, {
	value: 'Headers',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Headers$1.prototype, {
	get: { enumerable: true },
	forEach: { enumerable: true },
	set: { enumerable: true },
	append: { enumerable: true },
	has: { enumerable: true },
	delete: { enumerable: true },
	keys: { enumerable: true },
	values: { enumerable: true },
	entries: { enumerable: true }
});

function getHeaders(headers) {
	let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';

	const keys = Object.keys(headers[MAP]).sort();
	return keys.map(kind === 'key' ? function (k) {
		return k.toLowerCase();
	} : kind === 'value' ? function (k) {
		return headers[MAP][k].join(', ');
	} : function (k) {
		return [k.toLowerCase(), headers[MAP][k].join(', ')];
	});
}

const INTERNAL = Symbol('internal');

function createHeadersIterator(target, kind) {
	const iterator = Object.create(HeadersIteratorPrototype);
	iterator[INTERNAL] = {
		target,
		kind,
		index: 0
	};
	return iterator;
}

const HeadersIteratorPrototype = Object.setPrototypeOf({
	next() {
		// istanbul ignore if
		if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
			throw new TypeError('Value of `this` is not a HeadersIterator');
		}

		var _INTERNAL = this[INTERNAL];
		const target = _INTERNAL.target,
		      kind = _INTERNAL.kind,
		      index = _INTERNAL.index;

		const values = getHeaders(target, kind);
		const len = values.length;
		if (index >= len) {
			return {
				value: undefined,
				done: true
			};
		}

		this[INTERNAL].index = index + 1;

		return {
			value: values[index],
			done: false
		};
	}
}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));

Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
	value: 'HeadersIterator',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * Export the Headers object in a form that Node.js can consume.
 *
 * @param   Headers  headers
 * @return  Object
 */
function exportNodeCompatibleHeaders(headers) {
	const obj = Object.assign({ __proto__: null }, headers[MAP]);

	// http.request() only supports string as Host header. This hack makes
	// specifying custom Host header possible.
	const hostHeaderKey = find(headers[MAP], 'Host');
	if (hostHeaderKey !== undefined) {
		obj[hostHeaderKey] = obj[hostHeaderKey][0];
	}

	return obj;
}

/**
 * Create a Headers object from an object of headers, ignoring those that do
 * not conform to HTTP grammar productions.
 *
 * @param   Object  obj  Object of headers
 * @return  Headers
 */
function createHeadersLenient(obj) {
	const headers = new Headers$1();
	for (const name of Object.keys(obj)) {
		if (invalidTokenRegex.test(name)) {
			continue;
		}
		if (Array.isArray(obj[name])) {
			for (const val of obj[name]) {
				if (invalidHeaderCharRegex.test(val)) {
					continue;
				}
				if (headers[MAP][name] === undefined) {
					headers[MAP][name] = [val];
				} else {
					headers[MAP][name].push(val);
				}
			}
		} else if (!invalidHeaderCharRegex.test(obj[name])) {
			headers[MAP][name] = [obj[name]];
		}
	}
	return headers;
}

const INTERNALS$1 = Symbol('Response internals');

// fix an issue where "STATUS_CODES" aren't a named export for node <10
const STATUS_CODES = http.STATUS_CODES;

/**
 * Response class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
class Response {
	constructor() {
		let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		Body.call(this, body, opts);

		const status = opts.status || 200;
		const headers = new Headers$1(opts.headers);

		if (body != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(body);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		this[INTERNALS$1] = {
			url: opts.url,
			status,
			statusText: opts.statusText || STATUS_CODES[status],
			headers,
			counter: opts.counter
		};
	}

	get url() {
		return this[INTERNALS$1].url || '';
	}

	get status() {
		return this[INTERNALS$1].status;
	}

	/**
  * Convenience property representing if the request ended normally
  */
	get ok() {
		return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
	}

	get redirected() {
		return this[INTERNALS$1].counter > 0;
	}

	get statusText() {
		return this[INTERNALS$1].statusText;
	}

	get headers() {
		return this[INTERNALS$1].headers;
	}

	/**
  * Clone this response
  *
  * @return  Response
  */
	clone() {
		return new Response(clone(this), {
			url: this.url,
			status: this.status,
			statusText: this.statusText,
			headers: this.headers,
			ok: this.ok,
			redirected: this.redirected
		});
	}
}

Body.mixIn(Response.prototype);

Object.defineProperties(Response.prototype, {
	url: { enumerable: true },
	status: { enumerable: true },
	ok: { enumerable: true },
	redirected: { enumerable: true },
	statusText: { enumerable: true },
	headers: { enumerable: true },
	clone: { enumerable: true }
});

Object.defineProperty(Response.prototype, Symbol.toStringTag, {
	value: 'Response',
	writable: false,
	enumerable: false,
	configurable: true
});

const INTERNALS$2 = Symbol('Request internals');

// fix an issue where "format", "parse" aren't a named export for node <10
const parse_url = url.parse;
const format_url = url.format;

const streamDestructionSupported = 'destroy' in Stream.Readable.prototype;

/**
 * Check if a value is an instance of Request.
 *
 * @param   Mixed   input
 * @return  Boolean
 */
function isRequest(input) {
	return typeof input === 'object' && typeof input[INTERNALS$2] === 'object';
}

function isAbortSignal(signal) {
	const proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);
	return !!(proto && proto.constructor.name === 'AbortSignal');
}

/**
 * Request class
 *
 * @param   Mixed   input  Url or Request instance
 * @param   Object  init   Custom options
 * @return  Void
 */
class Request$1 {
	constructor(input) {
		let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		let parsedURL;

		// normalize input
		if (!isRequest(input)) {
			if (input && input.href) {
				// in order to support Node.js' Url objects; though WHATWG's URL objects
				// will fall into this branch also (since their `toString()` will return
				// `href` property anyway)
				parsedURL = parse_url(input.href);
			} else {
				// coerce input to a string before attempting to parse
				parsedURL = parse_url(`${input}`);
			}
			input = {};
		} else {
			parsedURL = parse_url(input.url);
		}

		let method = init.method || input.method || 'GET';
		method = method.toUpperCase();

		if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
			throw new TypeError('Request with GET/HEAD method cannot have body');
		}

		let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;

		Body.call(this, inputBody, {
			timeout: init.timeout || input.timeout || 0,
			size: init.size || input.size || 0
		});

		const headers = new Headers$1(init.headers || input.headers || {});

		if (inputBody != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(inputBody);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		let signal = isRequest(input) ? input.signal : null;
		if ('signal' in init) signal = init.signal;

		if (signal != null && !isAbortSignal(signal)) {
			throw new TypeError('Expected signal to be an instanceof AbortSignal');
		}

		this[INTERNALS$2] = {
			method,
			redirect: init.redirect || input.redirect || 'follow',
			headers,
			parsedURL,
			signal
		};

		// node-fetch-only options
		this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
		this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
		this.counter = init.counter || input.counter || 0;
		this.agent = init.agent || input.agent;
	}

	get method() {
		return this[INTERNALS$2].method;
	}

	get url() {
		return format_url(this[INTERNALS$2].parsedURL);
	}

	get headers() {
		return this[INTERNALS$2].headers;
	}

	get redirect() {
		return this[INTERNALS$2].redirect;
	}

	get signal() {
		return this[INTERNALS$2].signal;
	}

	/**
  * Clone this request
  *
  * @return  Request
  */
	clone() {
		return new Request$1(this);
	}
}

Body.mixIn(Request$1.prototype);

Object.defineProperty(Request$1.prototype, Symbol.toStringTag, {
	value: 'Request',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Request$1.prototype, {
	method: { enumerable: true },
	url: { enumerable: true },
	headers: { enumerable: true },
	redirect: { enumerable: true },
	clone: { enumerable: true },
	signal: { enumerable: true }
});

/**
 * Convert a Request to Node.js http request options.
 *
 * @param   Request  A Request instance
 * @return  Object   The options object to be passed to http.request
 */
function getNodeRequestOptions(request) {
	const parsedURL = request[INTERNALS$2].parsedURL;
	const headers = new Headers$1(request[INTERNALS$2].headers);

	// fetch step 1.3
	if (!headers.has('Accept')) {
		headers.set('Accept', '*/*');
	}

	// Basic fetch
	if (!parsedURL.protocol || !parsedURL.hostname) {
		throw new TypeError('Only absolute URLs are supported');
	}

	if (!/^https?:$/.test(parsedURL.protocol)) {
		throw new TypeError('Only HTTP(S) protocols are supported');
	}

	if (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {
		throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
	}

	// HTTP-network-or-cache fetch steps 2.4-2.7
	let contentLengthValue = null;
	if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
		contentLengthValue = '0';
	}
	if (request.body != null) {
		const totalBytes = getTotalBytes(request);
		if (typeof totalBytes === 'number') {
			contentLengthValue = String(totalBytes);
		}
	}
	if (contentLengthValue) {
		headers.set('Content-Length', contentLengthValue);
	}

	// HTTP-network-or-cache fetch step 2.11
	if (!headers.has('User-Agent')) {
		headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
	}

	// HTTP-network-or-cache fetch step 2.15
	if (request.compress && !headers.has('Accept-Encoding')) {
		headers.set('Accept-Encoding', 'gzip,deflate');
	}

	let agent = request.agent;
	if (typeof agent === 'function') {
		agent = agent(parsedURL);
	}

	if (!headers.has('Connection') && !agent) {
		headers.set('Connection', 'close');
	}

	// HTTP-network fetch step 4.2
	// chunked encoding is handled by Node.js

	return Object.assign({}, parsedURL, {
		method: request.method,
		headers: exportNodeCompatibleHeaders(headers),
		agent
	});
}

/**
 * abort-error.js
 *
 * AbortError interface for cancelled requests
 */

/**
 * Create AbortError instance
 *
 * @param   String      message      Error message for human
 * @return  AbortError
 */
function AbortError(message) {
  Error.call(this, message);

  this.type = 'aborted';
  this.message = message;

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = 'AbortError';

// fix an issue where "PassThrough", "resolve" aren't a named export for node <10
const PassThrough$1 = Stream.PassThrough;
const resolve_url = url.resolve;

/**
 * Fetch function
 *
 * @param   Mixed    url   Absolute url or Request instance
 * @param   Object   opts  Fetch options
 * @return  Promise
 */
function fetch(url, opts) {

	// allow custom promise
	if (!fetch.Promise) {
		throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
	}

	Body.Promise = fetch.Promise;

	// wrap http.request into fetch
	return new fetch.Promise(function (resolve, reject) {
		// build request object
		const request = new Request$1(url, opts);
		const options = getNodeRequestOptions(request);

		const send = (options.protocol === 'https:' ? https : http).request;
		const signal = request.signal;

		let response = null;

		const abort = function abort() {
			let error = new AbortError('The user aborted a request.');
			reject(error);
			if (request.body && request.body instanceof Stream.Readable) {
				request.body.destroy(error);
			}
			if (!response || !response.body) return;
			response.body.emit('error', error);
		};

		if (signal && signal.aborted) {
			abort();
			return;
		}

		const abortAndFinalize = function abortAndFinalize() {
			abort();
			finalize();
		};

		// send request
		const req = send(options);
		let reqTimeout;

		if (signal) {
			signal.addEventListener('abort', abortAndFinalize);
		}

		function finalize() {
			req.abort();
			if (signal) signal.removeEventListener('abort', abortAndFinalize);
			clearTimeout(reqTimeout);
		}

		if (request.timeout) {
			req.once('socket', function (socket) {
				reqTimeout = setTimeout(function () {
					reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));
					finalize();
				}, request.timeout);
			});
		}

		req.on('error', function (err) {
			reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));
			finalize();
		});

		req.on('response', function (res) {
			clearTimeout(reqTimeout);

			const headers = createHeadersLenient(res.headers);

			// HTTP fetch step 5
			if (fetch.isRedirect(res.statusCode)) {
				// HTTP fetch step 5.2
				const location = headers.get('Location');

				// HTTP fetch step 5.3
				const locationURL = location === null ? null : resolve_url(request.url, location);

				// HTTP fetch step 5.5
				switch (request.redirect) {
					case 'error':
						reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));
						finalize();
						return;
					case 'manual':
						// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
						if (locationURL !== null) {
							// handle corrupted header
							try {
								headers.set('Location', locationURL);
							} catch (err) {
								// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
								reject(err);
							}
						}
						break;
					case 'follow':
						// HTTP-redirect fetch step 2
						if (locationURL === null) {
							break;
						}

						// HTTP-redirect fetch step 5
						if (request.counter >= request.follow) {
							reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 6 (counter increment)
						// Create a new Request object.
						const requestOpts = {
							headers: new Headers$1(request.headers),
							follow: request.follow,
							counter: request.counter + 1,
							agent: request.agent,
							compress: request.compress,
							method: request.method,
							body: request.body,
							signal: request.signal,
							timeout: request.timeout,
							size: request.size
						};

						// HTTP-redirect fetch step 9
						if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
							reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 11
						if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
							requestOpts.method = 'GET';
							requestOpts.body = undefined;
							requestOpts.headers.delete('content-length');
						}

						// HTTP-redirect fetch step 15
						resolve(fetch(new Request$1(locationURL, requestOpts)));
						finalize();
						return;
				}
			}

			// prepare response
			res.once('end', function () {
				if (signal) signal.removeEventListener('abort', abortAndFinalize);
			});
			let body = res.pipe(new PassThrough$1());

			const response_options = {
				url: request.url,
				status: res.statusCode,
				statusText: res.statusMessage,
				headers: headers,
				size: request.size,
				timeout: request.timeout,
				counter: request.counter
			};

			// HTTP-network fetch step 12.1.1.3
			const codings = headers.get('Content-Encoding');

			// HTTP-network fetch step 12.1.1.4: handle content codings

			// in following scenarios we ignore compression support
			// 1. compression support is disabled
			// 2. HEAD request
			// 3. no Content-Encoding header
			// 4. no content response (204)
			// 5. content not modified response (304)
			if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// For Node v6+
			// Be less strict when decoding compressed responses, since sometimes
			// servers send slightly invalid responses that are still accepted
			// by common browsers.
			// Always using Z_SYNC_FLUSH is what cURL does.
			const zlibOptions = {
				flush: zlib.Z_SYNC_FLUSH,
				finishFlush: zlib.Z_SYNC_FLUSH
			};

			// for gzip
			if (codings == 'gzip' || codings == 'x-gzip') {
				body = body.pipe(zlib.createGunzip(zlibOptions));
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// for deflate
			if (codings == 'deflate' || codings == 'x-deflate') {
				// handle the infamous raw deflate response from old servers
				// a hack for old IIS and Apache servers
				const raw = res.pipe(new PassThrough$1());
				raw.once('data', function (chunk) {
					// see http://stackoverflow.com/questions/37519828
					if ((chunk[0] & 0x0F) === 0x08) {
						body = body.pipe(zlib.createInflate());
					} else {
						body = body.pipe(zlib.createInflateRaw());
					}
					response = new Response(body, response_options);
					resolve(response);
				});
				return;
			}

			// for br
			if (codings == 'br' && typeof zlib.createBrotliDecompress === 'function') {
				body = body.pipe(zlib.createBrotliDecompress());
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// otherwise, use response as-is
			response = new Response(body, response_options);
			resolve(response);
		});

		writeToStream(req, request);
	});
}
/**
 * Redirect code matching
 *
 * @param   Number   code  Status code
 * @return  Boolean
 */
fetch.isRedirect = function (code) {
	return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
};

// expose Promise
fetch.Promise = global.Promise;

var lib = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': fetch,
    Headers: Headers$1,
    Request: Request$1,
    Response: Response,
    FetchError: FetchError
});

var require$$0 = /*@__PURE__*/getAugmentedNamespace(unfetch_module$1);

var require$$1 = /*@__PURE__*/getAugmentedNamespace(lib);

function r(m){return m && m.default || m;}
var isomorphicUnfetch = commonjsGlobal.fetch = commonjsGlobal.fetch || (
	typeof process=='undefined' ? r(require$$0) : (function(url, opts) {
		return r(require$$1)(String(url).replace(/^\/\//g,'https://'), opts);
	})
);

/**
 * Identical class to graphql-request ClientError
 * Ensures parseLinearError is compatible with custom graphql-request clients
 *
 * @param response the raw response from the Linear API
 * @param request information about the request resulting in the error
 */
class GraphQLClientError extends Error {
    constructor(response, request) {
        const message = `${GraphQLClientError.extractMessage(response)}: ${JSON.stringify({
            response,
            request,
        })}`;
        super(message);
        Object.setPrototypeOf(this, GraphQLClientError.prototype);
        this.response = response;
        this.request = request;
        // this is needed as Safari doesn't support .captureStackTrace
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, GraphQLClientError);
        }
    }
    static extractMessage(response) {
        var _a, _b, _c;
        try {
            return (_c = (_b = (_a = response.errors) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.message) !== null && _c !== void 0 ? _c : `GraphQL Error (Code: ${response.status})`;
        }
        catch (e) {
            return `GraphQL Error (Code: ${response.status})`;
        }
    }
}
/**
 * Create an isomorphic GraphQL client
 * Originally forked from graphql-request to remove the external dependency
 *
 * @param url base url to send the request to
 * @param options the request options
 */
class LinearGraphQLClient {
    constructor(url, options) {
        this.url = url;
        this.options = options || {};
    }
    rawRequest(query, variables, requestHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            const _a = this.options, { headers } = _a, others = __rest(_a, ["headers"]);
            const body = JSON.stringify({ query, variables });
            const response = yield isomorphicUnfetch(this.url, Object.assign({ method: "POST", headers: Object.assign(Object.assign(Object.assign({}, (typeof body === "string" ? { "Content-Type": "application/json" } : {})), resolveHeaders(headers)), resolveHeaders(requestHeaders)), body }, others));
            const result = yield getResult(response);
            if (typeof result !== "string" && response.ok && !result.errors && result.data) {
                return Object.assign(Object.assign({}, result), { headers: response.headers, status: response.status });
            }
            else {
                throw parseLinearError(new GraphQLClientError(Object.assign(Object.assign({}, (typeof result === "string" ? { error: result } : result)), { status: response.status, headers: response.headers }), { query, variables }));
            }
        });
    }
    /**
     * Send a GraphQL document to the server.
     */
    request(document, variables, requestHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            const _a = this.options, { headers } = _a, others = __rest(_a, ["headers"]);
            const query = typeof document === "string" ? document : print(document);
            const body = JSON.stringify({ query, variables });
            const response = yield isomorphicUnfetch(this.url, Object.assign({ method: "POST", headers: Object.assign(Object.assign(Object.assign({}, (typeof body === "string" ? { "Content-Type": "application/json" } : {})), resolveHeaders(headers)), resolveHeaders(requestHeaders)), body }, others));
            const result = yield getResult(response);
            if (typeof result !== "string" && response.ok && !result.errors && result.data) {
                return result.data;
            }
            else {
                throw new GraphQLClientError(Object.assign(Object.assign({}, (typeof result === "string" ? { error: result } : result)), { status: response.status, headers: response.headers }), { query, variables });
            }
        });
    }
    setHeaders(headers) {
        this.options.headers = headers;
        return this;
    }
    /**
     * Attach a header to the client. All subsequent requests will have this header.
     */
    setHeader(key, value) {
        const { headers } = this.options;
        if (headers) {
            // todo what if headers is in nested array form... ?
            headers[key] = value;
        }
        else {
            this.options.headers = { [key]: value };
        }
        return this;
    }
}
/**
 * Parse the raw response
 *
 * @param response raw response from the Linear API
 */
function getResult(response) {
    const contentType = response.headers.get("Content-Type");
    if (contentType && contentType.startsWith("application/json")) {
        return response.json();
    }
    else {
        return response.text();
    }
}
/**
 * Convert the given headers configuration into a plain object.
 */
function resolveHeaders(headers) {
    let oHeaders = {};
    if (headers) {
        if (typeof Headers !== "undefined" && headers instanceof Headers) {
            oHeaders = headersToObject(headers);
        }
        else if (Array.isArray(headers)) {
            headers.forEach(([name, value]) => {
                oHeaders[name] = value;
            });
        }
        else {
            oHeaders = headers;
        }
    }
    return oHeaders;
}
/**
 * Convert Headers instance into regular object
 */
function headersToObject(headers) {
    const o = {};
    headers.forEach((v, k) => {
        o[k] = v;
    });
    return o;
}

/** The type of the issue relation. */
var IssueRelationType;
(function (IssueRelationType) {
    IssueRelationType["Blocks"] = "blocks";
    IssueRelationType["Duplicate"] = "duplicate";
    IssueRelationType["Related"] = "related";
})(IssueRelationType || (IssueRelationType = {}));
/** By which field should the pagination order by */
var PaginationOrderBy;
(function (PaginationOrderBy) {
    PaginationOrderBy["CreatedAt"] = "createdAt";
    PaginationOrderBy["UpdatedAt"] = "updatedAt";
})(PaginationOrderBy || (PaginationOrderBy = {}));
/** How trashed models should be loaded. */
var TrashOptionType;
(function (TrashOptionType) {
    TrashOptionType["ExcludeTrash"] = "excludeTrash";
    TrashOptionType["IncludeTrash"] = "includeTrash";
    TrashOptionType["TrashOnly"] = "trashOnly";
})(TrashOptionType || (TrashOptionType = {}));
/** The types of flags that the user can have. */
var UserFlagType;
(function (UserFlagType) {
    UserFlagType["AnalyticsWelcomeDismissed"] = "analyticsWelcomeDismissed";
    UserFlagType["CanPlaySnake"] = "canPlaySnake";
    UserFlagType["CanPlayTetris"] = "canPlayTetris";
    UserFlagType["CompletedOnboarding"] = "completedOnboarding";
    UserFlagType["CycleWelcomeDismissed"] = "cycleWelcomeDismissed";
    UserFlagType["DesktopDownloadToastDismissed"] = "desktopDownloadToastDismissed";
    UserFlagType["DesktopInstalled"] = "desktopInstalled";
    UserFlagType["DueDateShortcutMigration"] = "dueDateShortcutMigration";
    UserFlagType["EmptyActiveIssuesDismissed"] = "emptyActiveIssuesDismissed";
    UserFlagType["EmptyBacklogDismissed"] = "emptyBacklogDismissed";
    UserFlagType["EmptyCustomViewsDismissed"] = "emptyCustomViewsDismissed";
    UserFlagType["EmptyMyIssuesDismissed"] = "emptyMyIssuesDismissed";
    UserFlagType["FigmaPromptDismissed"] = "figmaPromptDismissed";
    UserFlagType["ImportBannerDismissed"] = "importBannerDismissed";
    UserFlagType["IssueMovePromptCompleted"] = "issueMovePromptCompleted";
    UserFlagType["ListSelectionTip"] = "listSelectionTip";
    UserFlagType["MigrateThemePreference"] = "migrateThemePreference";
    UserFlagType["ProjectWelcomeDismissed"] = "projectWelcomeDismissed";
    UserFlagType["SlackCommentReactionTipShown"] = "slackCommentReactionTipShown";
    UserFlagType["TriageWelcomeDismissed"] = "triageWelcomeDismissed";
})(UserFlagType || (UserFlagType = {}));
/** Operations that can be applied to UserFlagType */
var UserFlagUpdateOperation;
(function (UserFlagUpdateOperation) {
    UserFlagUpdateOperation["Clear"] = "clear";
    UserFlagUpdateOperation["Decr"] = "decr";
    UserFlagUpdateOperation["Incr"] = "incr";
    UserFlagUpdateOperation["Lock"] = "lock";
})(UserFlagUpdateOperation || (UserFlagUpdateOperation = {}));
/** The type of view preferences (either user or organization level preferences). */
var ViewPreferencesType;
(function (ViewPreferencesType) {
    ViewPreferencesType["Organization"] = "organization";
    ViewPreferencesType["User"] = "user";
})(ViewPreferencesType || (ViewPreferencesType = {}));
/** The client view this custom view is targeting. */
var ViewType;
(function (ViewType) {
    ViewType["ActiveIssues"] = "activeIssues";
    ViewType["AllIssues"] = "allIssues";
    ViewType["Backlog"] = "backlog";
    ViewType["Board"] = "board";
    ViewType["CompletedCycle"] = "completedCycle";
    ViewType["CustomView"] = "customView";
    ViewType["Cycle"] = "cycle";
    ViewType["Inbox"] = "inbox";
    ViewType["Label"] = "label";
    ViewType["MyIssues"] = "myIssues";
    ViewType["Project"] = "project";
    ViewType["Projects"] = "projects";
    ViewType["Roadmap"] = "roadmap";
    ViewType["Triage"] = "triage";
    ViewType["UserProfile"] = "userProfile";
})(ViewType || (ViewType = {}));
const TemplateFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Template" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Template" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "templateData" } },
                    { kind: "Field", name: { kind: "Name", value: "description" } },
                    { kind: "Field", name: { kind: "Name", value: "type" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "creator" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                ],
            },
        },
    ],
};
const UserFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "User" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "User" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "statusUntilAt" } },
                    { kind: "Field", name: { kind: "Name", value: "description" } },
                    { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } },
                    { kind: "Field", name: { kind: "Name", value: "disableReason" } },
                    { kind: "Field", name: { kind: "Name", value: "statusEmoji" } },
                    { kind: "Field", name: { kind: "Name", value: "statusLabel" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "lastSeen" } },
                    { kind: "Field", name: { kind: "Name", value: "timezone" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    { kind: "Field", name: { kind: "Name", value: "displayName" } },
                    { kind: "Field", name: { kind: "Name", value: "email" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    { kind: "Field", name: { kind: "Name", value: "inviteHash" } },
                    { kind: "Field", name: { kind: "Name", value: "url" } },
                    { kind: "Field", name: { kind: "Name", value: "active" } },
                    { kind: "Field", name: { kind: "Name", value: "admin" } },
                    { kind: "Field", name: { kind: "Name", value: "isMe" } },
                ],
            },
        },
    ],
};
const UserAccountFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "UserAccount" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAccount" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "service" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "email" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "users" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                        },
                    },
                ],
            },
        },
        ...UserFragmentDoc.definitions,
    ],
};
const DocumentStepFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "DocumentStep" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentStep" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "clientId" } },
                    { kind: "Field", name: { kind: "Name", value: "step" } },
                    { kind: "Field", name: { kind: "Name", value: "version" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                ],
            },
        },
    ],
};
const SyncDeltaResponseFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "SyncDeltaResponse" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SyncDeltaResponse" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "updates" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                    { kind: "Field", name: { kind: "Name", value: "loadMore" } },
                ],
            },
        },
    ],
};
const SyncResponseFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "SyncResponse" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SyncResponse" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "delta" } },
                    { kind: "Field", name: { kind: "Name", value: "state" } },
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "subscribedSyncGroups" } },
                    { kind: "Field", name: { kind: "Name", value: "databaseVersion" } },
                ],
            },
        },
    ],
};
const ArchiveResponseFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ArchiveResponse" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchiveResponse" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "archive" } },
                    { kind: "Field", name: { kind: "Name", value: "totalCount" } },
                    { kind: "Field", name: { kind: "Name", value: "databaseVersion" } },
                ],
            },
        },
    ],
};
const DependencyResponseFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "DependencyResponse" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DependencyResponse" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [{ kind: "Field", name: { kind: "Name", value: "dependencies" } }],
            },
        },
    ],
};
const SyncBatchResponseFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "SyncBatchResponse" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SyncBatchResponse" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "models" } }] },
        },
    ],
};
const GithubRepoFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "GithubRepo" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GithubRepo" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                ],
            },
        },
    ],
};
const GithubOrgFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "GithubOrg" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GithubOrg" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "repositories" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GithubRepo" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "login" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                ],
            },
        },
        ...GithubRepoFragmentDoc.definitions,
    ],
};
const GithubOAuthTokenPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "GithubOAuthTokenPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GithubOAuthTokenPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organizations" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GithubOrg" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "token" } },
                ],
            },
        },
        ...GithubOrgFragmentDoc.definitions,
    ],
};
const AuthorizedApplicationFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "AuthorizedApplication" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthorizedApplication" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "description" } },
                    { kind: "Field", name: { kind: "Name", value: "developer" } },
                    { kind: "Field", name: { kind: "Name", value: "appId" } },
                    { kind: "Field", name: { kind: "Name", value: "clientId" } },
                    { kind: "Field", name: { kind: "Name", value: "scope" } },
                    { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "webhooksEnabled" } },
                ],
            },
        },
    ],
};
const UserAuthorizedApplicationFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "UserAuthorizedApplication" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAuthorizedApplication" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "description" } },
                    { kind: "Field", name: { kind: "Name", value: "developer" } },
                    { kind: "Field", name: { kind: "Name", value: "clientId" } },
                    { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "webhooksEnabled" } },
                    { kind: "Field", name: { kind: "Name", value: "createdByLinear" } },
                    { kind: "Field", name: { kind: "Name", value: "isAuthorized" } },
                ],
            },
        },
    ],
};
const ApplicationFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Application" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Application" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "description" } },
                    { kind: "Field", name: { kind: "Name", value: "developer" } },
                    { kind: "Field", name: { kind: "Name", value: "clientId" } },
                    { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
                ],
            },
        },
    ],
};
const GoogleSheetsSettingsFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "GoogleSheetsSettings" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GoogleSheetsSettings" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "sheetId" } },
                    { kind: "Field", name: { kind: "Name", value: "spreadsheetId" } },
                    { kind: "Field", name: { kind: "Name", value: "spreadsheetUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedIssuesAt" } },
                ],
            },
        },
    ],
};
const IntercomSettingsFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IntercomSettings" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntercomSettings" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "sendNoteOnStatusChange" } },
                    { kind: "Field", name: { kind: "Name", value: "sendNoteOnComment" } },
                ],
            },
        },
    ],
};
const JiraProjectDataFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "JiraProjectData" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "JiraProjectData" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    { kind: "Field", name: { kind: "Name", value: "key" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                ],
            },
        },
    ],
};
const JiraLinearMappingFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "JiraLinearMapping" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "JiraLinearMapping" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "jiraProjectId" } },
                    { kind: "Field", name: { kind: "Name", value: "linearTeamId" } },
                ],
            },
        },
    ],
};
const JiraSettingsFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "JiraSettings" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "JiraSettings" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "projects" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "JiraProjectData" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "projectMapping" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "JiraLinearMapping" } }],
                        },
                    },
                ],
            },
        },
        ...JiraProjectDataFragmentDoc.definitions,
        ...JiraLinearMappingFragmentDoc.definitions,
    ],
};
const SentrySettingsFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "SentrySettings" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SentrySettings" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [{ kind: "Field", name: { kind: "Name", value: "organizationSlug" } }],
            },
        },
    ],
};
const SlackPostSettingsFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "SlackPostSettings" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackPostSettings" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "channel" } },
                    { kind: "Field", name: { kind: "Name", value: "channelId" } },
                    { kind: "Field", name: { kind: "Name", value: "configurationUrl" } },
                ],
            },
        },
    ],
};
const ZendeskSettingsFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ZendeskSettings" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ZendeskSettings" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "botUserId" } },
                    { kind: "Field", name: { kind: "Name", value: "url" } },
                    { kind: "Field", name: { kind: "Name", value: "subdomain" } },
                ],
            },
        },
    ],
};
const IntegrationSettingsFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IntegrationSettings" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationSettings" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "googleSheets" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GoogleSheetsSettings" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "intercom" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntercomSettings" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "jira" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "JiraSettings" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "sentry" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SentrySettings" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "slackPost" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackPostSettings" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "slackProjectPost" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackPostSettings" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "zendesk" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ZendeskSettings" } }],
                        },
                    },
                ],
            },
        },
        ...GoogleSheetsSettingsFragmentDoc.definitions,
        ...IntercomSettingsFragmentDoc.definitions,
        ...JiraSettingsFragmentDoc.definitions,
        ...SentrySettingsFragmentDoc.definitions,
        ...SlackPostSettingsFragmentDoc.definitions,
        ...ZendeskSettingsFragmentDoc.definitions,
    ],
};
const SamlConfigurationFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "SamlConfiguration" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SamlConfiguration" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "ssoBinding" } },
                    { kind: "Field", name: { kind: "Name", value: "allowedDomains" } },
                    { kind: "Field", name: { kind: "Name", value: "ssoEndpoint" } },
                    { kind: "Field", name: { kind: "Name", value: "ssoSignAlgo" } },
                    { kind: "Field", name: { kind: "Name", value: "issuerEntityId" } },
                    { kind: "Field", name: { kind: "Name", value: "ssoSigningCert" } },
                ],
            },
        },
    ],
};
const UserSettingsFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "UserSettings" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettings" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "unsubscribedFrom" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "notificationPreferences" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "user" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                ],
            },
        },
    ],
};
const SubscriptionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Subscription" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Subscription" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "creator" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                    { kind: "Field", name: { kind: "Name", value: "nextBillingAt" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "seats" } },
                    { kind: "Field", name: { kind: "Name", value: "pendingChangeType" } },
                    { kind: "Field", name: { kind: "Name", value: "type" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                ],
            },
        },
    ],
};
const ApiKeyFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ApiKey" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKey" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "label" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                ],
            },
        },
    ],
};
const PageInfoFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "PageInfo" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PageInfo" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "startCursor" } },
                    { kind: "Field", name: { kind: "Name", value: "endCursor" } },
                    { kind: "Field", name: { kind: "Name", value: "hasPreviousPage" } },
                    { kind: "Field", name: { kind: "Name", value: "hasNextPage" } },
                ],
            },
        },
    ],
};
const ApiKeyConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ApiKeyConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...ApiKeyFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const ApiKeyPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ApiKeyPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "apiKey" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
        ...ApiKeyFragmentDoc.definitions,
    ],
};
const ArchivePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ArchivePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchivePayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const AttachmentFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Attachment" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Attachment" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "sourceType" } },
                    { kind: "Field", name: { kind: "Name", value: "subtitle" } },
                    { kind: "Field", name: { kind: "Name", value: "title" } },
                    { kind: "Field", name: { kind: "Name", value: "metadata" } },
                    { kind: "Field", name: { kind: "Name", value: "groupBySource" } },
                    { kind: "Field", name: { kind: "Name", value: "source" } },
                    { kind: "Field", name: { kind: "Name", value: "url" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "creator" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                ],
            },
        },
    ],
};
const AttachmentConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "AttachmentConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...AttachmentFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const AttachmentPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "AttachmentPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachment" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const AuditEntryFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "AuditEntry" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntry" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "metadata" } },
                    { kind: "Field", name: { kind: "Name", value: "countryCode" } },
                    { kind: "Field", name: { kind: "Name", value: "ip" } },
                    { kind: "Field", name: { kind: "Name", value: "actorId" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "actor" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "type" } },
                ],
            },
        },
    ],
};
const AuditEntryConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "AuditEntryConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntry" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...AuditEntryFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const AuditEntryTypeFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "AuditEntryType" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryType" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "description" } },
                    { kind: "Field", name: { kind: "Name", value: "type" } },
                ],
            },
        },
    ],
};
const OrganizationFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Organization" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Organization" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } },
                    { kind: "Field", name: { kind: "Name", value: "gitBranchFormat" } },
                    { kind: "Field", name: { kind: "Name", value: "userCount" } },
                    { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } },
                    { kind: "Field", name: { kind: "Name", value: "periodUploadVolume" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "logoUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    { kind: "Field", name: { kind: "Name", value: "urlKey" } },
                    { kind: "Field", name: { kind: "Name", value: "deletionRequestedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    { kind: "Field", name: { kind: "Name", value: "samlEnabled" } },
                    { kind: "Field", name: { kind: "Name", value: "gitLinkbackMessagesEnabled" } },
                    { kind: "Field", name: { kind: "Name", value: "gitPublicLinkbackMessagesEnabled" } },
                    { kind: "Field", name: { kind: "Name", value: "roadmapEnabled" } },
                ],
            },
        },
    ],
};
const AuthResolverResponseFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "AuthResolverResponse" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthResolverResponse" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "email" } },
                    { kind: "Field", name: { kind: "Name", value: "lastUsedOrganizationId" } },
                    { kind: "Field", name: { kind: "Name", value: "token" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "availableOrganizations" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Organization" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "allowDomainAccess" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "users" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                        },
                    },
                ],
            },
        },
        ...OrganizationFragmentDoc.definitions,
        ...UserFragmentDoc.definitions,
    ],
};
const InvoiceFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Invoice" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Invoice" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "url" } },
                    { kind: "Field", name: { kind: "Name", value: "created" } },
                    { kind: "Field", name: { kind: "Name", value: "dueDate" } },
                    { kind: "Field", name: { kind: "Name", value: "total" } },
                    { kind: "Field", name: { kind: "Name", value: "status" } },
                ],
            },
        },
    ],
};
const CardFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Card" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Card" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "brand" } },
                    { kind: "Field", name: { kind: "Name", value: "last4" } },
                ],
            },
        },
    ],
};
const BillingDetailsPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "BillingDetailsPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "BillingDetailsPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "invoices" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Invoice" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "email" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "paymentMethod" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Card" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
        ...InvoiceFragmentDoc.definitions,
        ...CardFragmentDoc.definitions,
    ],
};
const BillingEmailPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "BillingEmailPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "BillingEmailPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "email" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const StepsResponseFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "StepsResponse" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "StepsResponse" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "version" } },
                    { kind: "Field", name: { kind: "Name", value: "clientIds" } },
                    { kind: "Field", name: { kind: "Name", value: "steps" } },
                ],
            },
        },
    ],
};
const CollaborationDocumentUpdatePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "CollaborationDocumentUpdatePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CollaborationDocumentUpdatePayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "steps" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "StepsResponse" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
        ...StepsResponseFragmentDoc.definitions,
    ],
};
const CommentFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Comment" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Comment" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "url" } },
                    { kind: "Field", name: { kind: "Name", value: "body" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "editedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "user" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                ],
            },
        },
    ],
};
const CommentConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "CommentConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...CommentFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const CommentPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "CommentPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "comment" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const ContactPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ContactPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ContactPayload" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
        },
    ],
};
const CreateCsvExportReportPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "CreateCsvExportReportPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateCsvExportReportPayload" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
        },
    ],
};
const CreateOrJoinOrganizationResponseFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "user" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                ],
            },
        },
    ],
};
const CustomViewFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "CustomView" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomView" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "color" } },
                    { kind: "Field", name: { kind: "Name", value: "description" } },
                    { kind: "Field", name: { kind: "Name", value: "filters" } },
                    { kind: "Field", name: { kind: "Name", value: "icon" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "creator" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "shared" } },
                    { kind: "Field", name: { kind: "Name", value: "filterData" } },
                ],
            },
        },
    ],
};
const CustomViewConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "CustomViewConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...CustomViewFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const CustomViewPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "CustomViewPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "customView" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const CycleFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Cycle" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Cycle" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    { kind: "Field", name: { kind: "Name", value: "endsAt" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
                    { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
                    { kind: "Field", name: { kind: "Name", value: "number" } },
                    { kind: "Field", name: { kind: "Name", value: "progress" } },
                    { kind: "Field", name: { kind: "Name", value: "startsAt" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
                    { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                ],
            },
        },
    ],
};
const CycleConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "CycleConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...CycleFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const CyclePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "CyclePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CyclePayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "cycle" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const DebugPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "DebugPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DebugPayload" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
        },
    ],
};
const DocumentFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Document" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Document" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "color" } },
                    { kind: "Field", name: { kind: "Name", value: "contentData" } },
                    { kind: "Field", name: { kind: "Name", value: "content" } },
                    { kind: "Field", name: { kind: "Name", value: "title" } },
                    { kind: "Field", name: { kind: "Name", value: "slugId" } },
                    { kind: "Field", name: { kind: "Name", value: "icon" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "project" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "creator" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "updatedBy" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                ],
            },
        },
    ],
};
const DocumentConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "DocumentConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...DocumentFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const DocumentPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "DocumentPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "document" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const DocumentVersionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "DocumentVersion" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentVersion" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "content" } },
                    { kind: "Field", name: { kind: "Name", value: "title" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "project" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "creator" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "revision" } },
                ],
            },
        },
    ],
};
const DocumentVersionConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "DocumentVersionConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentVersionConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentVersion" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...DocumentVersionFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const EmailSubscribePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "EmailSubscribePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailSubscribePayload" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
        },
    ],
};
const EmailUnsubscribePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "EmailUnsubscribePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribePayload" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
        },
    ],
};
const EmailUserAccountAuthChallengeResponseFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "authType" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const EmojiFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Emoji" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Emoji" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "url" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "source" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "creator" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                ],
            },
        },
    ],
};
const EmojiConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "EmojiConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...EmojiFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const EmojiPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "EmojiPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "emoji" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const EventPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "EventPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EventPayload" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
        },
    ],
};
const FavoriteFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Favorite" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Favorite" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "customView" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "cycle" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "document" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "label" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "project" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "projectTeam" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "folderName" } },
                    { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "user" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "parent" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "type" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                ],
            },
        },
    ],
};
const FavoriteConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "FavoriteConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoriteConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...FavoriteFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const FavoritePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "FavoritePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoritePayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "favorite" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const FeedbackPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "FeedbackPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FeedbackPayload" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
        },
    ],
};
const FigmaEmbedFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "FigmaEmbed" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FigmaEmbed" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastModified" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    { kind: "Field", name: { kind: "Name", value: "url" } },
                    { kind: "Field", name: { kind: "Name", value: "nodeName" } },
                ],
            },
        },
    ],
};
const FigmaEmbedPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "FigmaEmbedPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FigmaEmbedPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "figmaEmbed" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FigmaEmbed" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
        ...FigmaEmbedFragmentDoc.definitions,
    ],
};
const FrontAttachmentPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "FrontAttachmentPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FrontAttachmentPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const GitHubCommitIntegrationPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "GitHubCommitIntegrationPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integration" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "webhookSecret" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const ImageUploadFromUrlPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ImageUploadFromUrlPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "url" } },
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const IntegrationFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Integration" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Integration" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "service" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "creator" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                ],
            },
        },
    ],
};
const IntegrationConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IntegrationConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const IntegrationPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IntegrationPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integration" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const CommitPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "CommitPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommitPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "added" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    { kind: "Field", name: { kind: "Name", value: "message" } },
                    { kind: "Field", name: { kind: "Name", value: "modified" } },
                    { kind: "Field", name: { kind: "Name", value: "removed" } },
                    { kind: "Field", name: { kind: "Name", value: "timestamp" } },
                    { kind: "Field", name: { kind: "Name", value: "url" } },
                ],
            },
        },
    ],
};
const PullRequestPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "PullRequestPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PullRequestPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "branch" } },
                    { kind: "Field", name: { kind: "Name", value: "closedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "draft" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    { kind: "Field", name: { kind: "Name", value: "mergedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "number" } },
                    { kind: "Field", name: { kind: "Name", value: "repoLogin" } },
                    { kind: "Field", name: { kind: "Name", value: "repoName" } },
                    { kind: "Field", name: { kind: "Name", value: "status" } },
                    { kind: "Field", name: { kind: "Name", value: "title" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "url" } },
                    { kind: "Field", name: { kind: "Name", value: "userId" } },
                    { kind: "Field", name: { kind: "Name", value: "userLogin" } },
                ],
            },
        },
    ],
};
const SentryIssuePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "SentryIssuePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SentryIssuePayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "issueId" } },
                    { kind: "Field", name: { kind: "Name", value: "actorId" } },
                    { kind: "Field", name: { kind: "Name", value: "projectId" } },
                    { kind: "Field", name: { kind: "Name", value: "firstSeen" } },
                    { kind: "Field", name: { kind: "Name", value: "webUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "actorName" } },
                    { kind: "Field", name: { kind: "Name", value: "firstVersion" } },
                    { kind: "Field", name: { kind: "Name", value: "shortId" } },
                    { kind: "Field", name: { kind: "Name", value: "projectSlug" } },
                    { kind: "Field", name: { kind: "Name", value: "issueTitle" } },
                    { kind: "Field", name: { kind: "Name", value: "actorType" } },
                ],
            },
        },
    ],
};
const IntegrationResourceDataFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IntegrationResourceData" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationResourceData" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "githubCommit" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommitPayload" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "githubPullRequest" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PullRequestPayload" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "gitlabMergeRequest" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PullRequestPayload" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "sentryIssue" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SentryIssuePayload" } }],
                        },
                    },
                ],
            },
        },
        ...CommitPayloadFragmentDoc.definitions,
        ...PullRequestPayloadFragmentDoc.definitions,
        ...SentryIssuePayloadFragmentDoc.definitions,
    ],
};
const IntegrationResourceFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IntegrationResource" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationResource" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "data" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationResourceData" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pullRequest" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PullRequestPayload" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "resourceId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integration" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "resourceType" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                ],
            },
        },
        ...IntegrationResourceDataFragmentDoc.definitions,
        ...PullRequestPayloadFragmentDoc.definitions,
    ],
};
const IntegrationResourceConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IntegrationResourceConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationResourceConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationResource" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationResourceFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const IssueFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Issue" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Issue" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "trashed" } },
                    { kind: "Field", name: { kind: "Name", value: "url" } },
                    { kind: "Field", name: { kind: "Name", value: "identifier" } },
                    { kind: "Field", name: { kind: "Name", value: "priorityLabel" } },
                    { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } },
                    { kind: "Field", name: { kind: "Name", value: "customerTicketCount" } },
                    { kind: "Field", name: { kind: "Name", value: "branchName" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "cycle" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "dueDate" } },
                    { kind: "Field", name: { kind: "Name", value: "estimate" } },
                    { kind: "Field", name: { kind: "Name", value: "description" } },
                    { kind: "Field", name: { kind: "Name", value: "title" } },
                    { kind: "Field", name: { kind: "Name", value: "number" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "boardOrder" } },
                    { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                    { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "parent" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "priority" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "project" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                    { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "assignee" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "creator" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "snoozedBy" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "state" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                ],
            },
        },
    ],
};
const IssueBatchPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssueBatchPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueBatchPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issues" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
        ...IssueFragmentDoc.definitions,
    ],
};
const IssueConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssueConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...IssueFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const IssueDescriptionHistoryFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssueDescriptionHistory" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueDescriptionHistory" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "actorId" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "descriptionData" } },
                    { kind: "Field", name: { kind: "Name", value: "type" } },
                ],
            },
        },
    ],
};
const IssueDescriptionHistoryPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssueDescriptionHistoryPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueDescriptionHistoryPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "history" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueDescriptionHistory" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
        ...IssueDescriptionHistoryFragmentDoc.definitions,
    ],
};
const IssueRelationHistoryPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssueRelationHistoryPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationHistoryPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "identifier" } },
                    { kind: "Field", name: { kind: "Name", value: "type" } },
                ],
            },
        },
    ],
};
const IssueImportFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssueImport" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImport" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "mapping" } },
                    { kind: "Field", name: { kind: "Name", value: "creatorId" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "service" } },
                    { kind: "Field", name: { kind: "Name", value: "status" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    { kind: "Field", name: { kind: "Name", value: "error" } },
                ],
            },
        },
    ],
};
const IssueHistoryFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssueHistory" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistory" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "relationChanges" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationHistoryPayload" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "addedLabelIds" } },
                    { kind: "Field", name: { kind: "Name", value: "removedLabelIds" } },
                    { kind: "Field", name: { kind: "Name", value: "source" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueImport" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "toCycle" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "toParent" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "toProject" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "toState" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "fromCycle" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "fromParent" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "fromProject" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "fromState" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "fromTeam" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "toTeam" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "fromAssignee" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "toAssignee" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "actor" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "fromDueDate" } },
                    { kind: "Field", name: { kind: "Name", value: "toDueDate" } },
                    { kind: "Field", name: { kind: "Name", value: "fromEstimate" } },
                    { kind: "Field", name: { kind: "Name", value: "toEstimate" } },
                    { kind: "Field", name: { kind: "Name", value: "fromPriority" } },
                    { kind: "Field", name: { kind: "Name", value: "toPriority" } },
                    { kind: "Field", name: { kind: "Name", value: "fromTitle" } },
                    { kind: "Field", name: { kind: "Name", value: "toTitle" } },
                    { kind: "Field", name: { kind: "Name", value: "archived" } },
                    { kind: "Field", name: { kind: "Name", value: "trashed" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedDescription" } },
                    { kind: "Field", name: { kind: "Name", value: "autoArchived" } },
                    { kind: "Field", name: { kind: "Name", value: "autoClosed" } },
                ],
            },
        },
        ...IssueRelationHistoryPayloadFragmentDoc.definitions,
        ...IssueImportFragmentDoc.definitions,
    ],
};
const IssueHistoryConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssueHistoryConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistoryConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistory" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...IssueHistoryFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const IssueImportDeletePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssueImportDeletePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportDeletePayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueImport" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
        ...IssueImportFragmentDoc.definitions,
    ],
};
const IssueImportPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssueImportPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueImport" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
        ...IssueImportFragmentDoc.definitions,
    ],
};
const IssueLabelFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssueLabel" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabel" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "color" } },
                    { kind: "Field", name: { kind: "Name", value: "description" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "creator" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                ],
            },
        },
    ],
};
const IssueLabelConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssueLabelConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...IssueLabelFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const IssueLabelPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssueLabelPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueLabel" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const IssuePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssuePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const IssuePriorityValueFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssuePriorityValue" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePriorityValue" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "label" } },
                    { kind: "Field", name: { kind: "Name", value: "priority" } },
                ],
            },
        },
    ],
};
const IssueRelationFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssueRelation" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelation" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "relatedIssue" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "type" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                ],
            },
        },
    ],
};
const IssueRelationConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssueRelationConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...IssueRelationFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const IssueRelationPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "IssueRelationPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueRelation" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const MilestoneFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Milestone" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Milestone" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                ],
            },
        },
    ],
};
const MilestoneConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "MilestoneConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "MilestoneConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Milestone" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...MilestoneFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const MilestonePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "MilestonePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "MilestonePayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "milestone" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const NotificationFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Notification" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Notification" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
                    { kind: "Field", name: { kind: "Name", value: "type" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "comment" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "user" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "readAt" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                ],
            },
        },
    ],
};
const NotificationConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "NotificationConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...NotificationFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const NotificationPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "NotificationPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "notification" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const NotificationSubscriptionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "NotificationSubscription" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscription" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "project" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "type" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "user" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                ],
            },
        },
    ],
};
const NotificationSubscriptionConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "NotificationSubscriptionConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...NotificationSubscriptionFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const NotificationSubscriptionPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "NotificationSubscriptionPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "notificationSubscription" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const OauthAuthStringAuthorizePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OauthAuthStringAuthorizePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthAuthStringAuthorizePayload" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
        },
    ],
};
const OauthAuthStringChallengePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OauthAuthStringChallengePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthAuthStringChallengePayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "authString" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const OauthAuthStringCheckPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OauthAuthStringCheckPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthAuthStringCheckPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "token" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const OauthClientFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OauthClient" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClient" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "description" } },
                    { kind: "Field", name: { kind: "Name", value: "redirectUris" } },
                    { kind: "Field", name: { kind: "Name", value: "developer" } },
                    { kind: "Field", name: { kind: "Name", value: "clientId" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    { kind: "Field", name: { kind: "Name", value: "clientSecret" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "webhookResourceTypes" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "webhookUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "publicEnabled" } },
                ],
            },
        },
    ],
};
const OauthClientPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OauthClientPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "oauthClient" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClient" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
        ...OauthClientFragmentDoc.definitions,
    ],
};
const OauthTokenRevokePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OauthTokenRevokePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthTokenRevokePayload" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
        },
    ],
};
const OrganizationCancelDeletePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OrganizationCancelDeletePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
        },
    ],
};
const OrganizationDeletePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OrganizationDeletePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDeletePayload" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
        },
    ],
};
const OrganizationDomainFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OrganizationDomain" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomain" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    { kind: "Field", name: { kind: "Name", value: "verificationEmail" } },
                    { kind: "Field", name: { kind: "Name", value: "verified" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "creator" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                ],
            },
        },
    ],
};
const OrganizationDomainPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OrganizationDomainPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomainPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organizationDomain" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDomain" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
        ...OrganizationDomainFragmentDoc.definitions,
    ],
};
const OrganizationDomainSimplePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OrganizationDomainSimplePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomainSimplePayload" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
        },
    ],
};
const OrganizationExistsPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OrganizationExistsPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationExistsPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                    { kind: "Field", name: { kind: "Name", value: "exists" } },
                ],
            },
        },
    ],
};
const OrganizationInviteFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OrganizationInvite" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvite" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "external" } },
                    { kind: "Field", name: { kind: "Name", value: "email" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "acceptedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "expiresAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "inviter" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "invitee" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                ],
            },
        },
    ],
};
const OrganizationInviteConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OrganizationInviteConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...OrganizationInviteFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const OrganizationInviteDetailsPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OrganizationInviteDetailsPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteDetailsPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                    { kind: "Field", name: { kind: "Name", value: "organizationName" } },
                    { kind: "Field", name: { kind: "Name", value: "email" } },
                    { kind: "Field", name: { kind: "Name", value: "inviter" } },
                    { kind: "Field", name: { kind: "Name", value: "organizationLogoUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "accepted" } },
                    { kind: "Field", name: { kind: "Name", value: "expired" } },
                ],
            },
        },
    ],
};
const OrganizationInvitePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OrganizationInvitePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvitePayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organizationInvite" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const OrganizationPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "OrganizationPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const ProjectFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Project" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Project" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "url" } },
                    { kind: "Field", name: { kind: "Name", value: "targetDate" } },
                    { kind: "Field", name: { kind: "Name", value: "icon" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "milestone" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
                    { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
                    { kind: "Field", name: { kind: "Name", value: "progress" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "lead" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "color" } },
                    { kind: "Field", name: { kind: "Name", value: "description" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    { kind: "Field", name: { kind: "Name", value: "slugId" } },
                    { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                    { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
                    { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
                    { kind: "Field", name: { kind: "Name", value: "state" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "creator" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } },
                    { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } },
                    { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } },
                ],
            },
        },
    ],
};
const ProjectConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ProjectConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...ProjectFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const ProjectLinkFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ProjectLink" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLink" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "url" } },
                    { kind: "Field", name: { kind: "Name", value: "label" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "project" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "creator" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                ],
            },
        },
    ],
};
const ProjectLinkConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ProjectLinkConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLink" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...ProjectLinkFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const ProjectLinkPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ProjectLinkPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "projectLink" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const ProjectPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ProjectPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "project" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const PushSubscriptionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "PushSubscription" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscription" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                ],
            },
        },
    ],
};
const PushSubscriptionConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "PushSubscriptionConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscription" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...PushSubscriptionFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const PushSubscriptionPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "PushSubscriptionPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const PushSubscriptionTestPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "PushSubscriptionTestPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionTestPayload" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
        },
    ],
};
const ReactionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Reaction" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Reaction" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "emoji" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "comment" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "user" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                ],
            },
        },
    ],
};
const ReactionConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ReactionConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...ReactionFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const ReactionPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ReactionPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "reaction" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const RotateSecretPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "RotateSecretPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RotateSecretPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const SsoUrlFromEmailResponseFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "SsoUrlFromEmailResponse" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "samlSsoUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const SubscriptionPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "SubscriptionPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SubscriptionPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const SubscriptionSessionPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "SubscriptionSessionPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SubscriptionSessionPayload" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "session" } }] },
        },
    ],
};
const SynchronizedPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "SynchronizedPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SynchronizedPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [{ kind: "Field", name: { kind: "Name", value: "lastSyncId" } }],
            },
        },
    ],
};
const TeamFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Team" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Team" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignCompleted" } },
                    { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignStarted" } },
                    { kind: "Field", name: { kind: "Name", value: "cycleCalenderUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "upcomingCycleCount" } },
                    { kind: "Field", name: { kind: "Name", value: "cycleLockToActive" } },
                    { kind: "Field", name: { kind: "Name", value: "autoArchivePeriod" } },
                    { kind: "Field", name: { kind: "Name", value: "autoClosePeriod" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "activeCycle" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "autoCloseStateId" } },
                    { kind: "Field", name: { kind: "Name", value: "cycleCooldownTime" } },
                    { kind: "Field", name: { kind: "Name", value: "cycleStartDay" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "defaultTemplateForMembers" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "defaultTemplateForNonMembers" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "defaultIssueState" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "cycleDuration" } },
                    { kind: "Field", name: { kind: "Name", value: "icon" } },
                    { kind: "Field", name: { kind: "Name", value: "defaultTemplateForMembersId" } },
                    { kind: "Field", name: { kind: "Name", value: "defaultTemplateForNonMembersId" } },
                    { kind: "Field", name: { kind: "Name", value: "issueEstimationType" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "color" } },
                    { kind: "Field", name: { kind: "Name", value: "description" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    { kind: "Field", name: { kind: "Name", value: "key" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "timezone" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "mergeWorkflowState" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "draftWorkflowState" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "startWorkflowState" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "reviewWorkflowState" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "markedAsDuplicateWorkflowState" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "triageIssueState" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "inviteHash" } },
                    { kind: "Field", name: { kind: "Name", value: "defaultIssueEstimate" } },
                    { kind: "Field", name: { kind: "Name", value: "issueOrderingNoPriorityFirst" } },
                    { kind: "Field", name: { kind: "Name", value: "private" } },
                    { kind: "Field", name: { kind: "Name", value: "cyclesEnabled" } },
                    { kind: "Field", name: { kind: "Name", value: "issueEstimationExtended" } },
                    { kind: "Field", name: { kind: "Name", value: "issueEstimationAllowZero" } },
                    { kind: "Field", name: { kind: "Name", value: "groupIssueHistory" } },
                    { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } },
                    { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } },
                    { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } },
                    { kind: "Field", name: { kind: "Name", value: "triageEnabled" } },
                ],
            },
        },
    ],
};
const TeamConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "TeamConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...TeamFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const TeamMembershipFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "TeamMembership" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembership" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "user" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "owner" } },
                ],
            },
        },
    ],
};
const TeamMembershipConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "TeamMembershipConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...TeamMembershipFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const TeamMembershipPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "TeamMembershipPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "teamMembership" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const TeamPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "TeamPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const TemplateConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "TemplateConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplateConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...PageInfoFragmentDoc.definitions,
    ],
};
const TemplatePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "TemplatePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplatePayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "template" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const UploadFileHeaderFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "UploadFileHeader" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFileHeader" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "key" } },
                    { kind: "Field", name: { kind: "Name", value: "value" } },
                ],
            },
        },
    ],
};
const UploadFileFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "UploadFile" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFile" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "assetUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "contentType" } },
                    { kind: "Field", name: { kind: "Name", value: "filename" } },
                    { kind: "Field", name: { kind: "Name", value: "uploadUrl" } },
                    { kind: "Field", name: { kind: "Name", value: "size" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "headers" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFileHeader" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "metaData" } },
                ],
            },
        },
        ...UploadFileHeaderFragmentDoc.definitions,
    ],
};
const UploadPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "UploadPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "uploadFile" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFile" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
        ...UploadFileFragmentDoc.definitions,
    ],
};
const UserAdminPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "UserAdminPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAdminPayload" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
        },
    ],
};
const UserConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "UserConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...UserFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const UserPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "UserPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "user" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const UserSettingsFlagPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "UserSettingsFlagPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "flag" } },
                    { kind: "Field", name: { kind: "Name", value: "value" } },
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const UserSettingsFlagsResetPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "UserSettingsFlagsResetPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const UserSettingsPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "UserSettingsPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const UserSubscribeToNewsletterPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "UserSubscribeToNewsletterPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSubscribeToNewsletterPayload" } },
            selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
        },
    ],
};
const ViewPreferencesFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ViewPreferences" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferences" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    { kind: "Field", name: { kind: "Name", value: "type" } },
                    { kind: "Field", name: { kind: "Name", value: "viewType" } },
                ],
            },
        },
    ],
};
const ViewPreferencesPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "ViewPreferencesPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "viewPreferences" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
        ...ViewPreferencesFragmentDoc.definitions,
    ],
};
const WebhookFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "Webhook" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Webhook" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "secret" } },
                    { kind: "Field", name: { kind: "Name", value: "teamIds" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "resourceTypes" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "creator" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "url" } },
                    { kind: "Field", name: { kind: "Name", value: "label" } },
                    { kind: "Field", name: { kind: "Name", value: "allPublicTeams" } },
                    { kind: "Field", name: { kind: "Name", value: "enabled" } },
                ],
            },
        },
    ],
};
const WebhookConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "WebhookConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...WebhookFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const WebhookPayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "WebhookPayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookPayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "webhook" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const WorkflowStateFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "WorkflowState" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowState" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "description" } },
                    { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "position" } },
                    { kind: "Field", name: { kind: "Name", value: "color" } },
                    { kind: "Field", name: { kind: "Name", value: "name" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    { kind: "Field", name: { kind: "Name", value: "type" } },
                    { kind: "Field", name: { kind: "Name", value: "id" } },
                ],
            },
        },
    ],
};
const WorkflowStateConnectionFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "WorkflowStateConnection" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateConnection" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "nodes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pageInfo" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                        },
                    },
                ],
            },
        },
        ...WorkflowStateFragmentDoc.definitions,
        ...PageInfoFragmentDoc.definitions,
    ],
};
const WorkflowStatePayloadFragmentDoc = {
    kind: "Document",
    definitions: [
        {
            kind: "FragmentDefinition",
            name: { kind: "Name", value: "WorkflowStatePayload" },
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStatePayload" } },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "workflowState" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    { kind: "Field", name: { kind: "Name", value: "success" } },
                ],
            },
        },
    ],
};
const AdministrableTeamsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "administrableTeams" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "administrableTeams" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "filter" },
                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                        },
                    },
                ],
            },
        },
        ...TeamConnectionFragmentDoc.definitions,
    ],
};
const ApplicationWithAuthorizationDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "applicationWithAuthorization" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                        },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "applicationWithAuthorization" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "clientId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "redirectUri" },
                                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "scope" },
                                value: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAuthorizedApplication" } }],
                        },
                    },
                ],
            },
        },
        ...UserAuthorizedApplicationFragmentDoc.definitions,
    ],
};
const AttachmentDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "attachment" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachment" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }],
                        },
                    },
                ],
            },
        },
        ...AttachmentFragmentDoc.definitions,
    ],
};
const AttachmentIssueDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "attachmentIssue" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentIssue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                        },
                    },
                ],
            },
        },
        ...IssueFragmentDoc.definitions,
    ],
};
const AttachmentIssue_AttachmentsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "attachmentIssue_attachments" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentIssue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "attachments" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...AttachmentConnectionFragmentDoc.definitions,
    ],
};
const AttachmentIssue_ChildrenDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "attachmentIssue_children" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentIssue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "children" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueConnectionFragmentDoc.definitions,
    ],
};
const AttachmentIssue_CommentsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "attachmentIssue_comments" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentIssue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "comments" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...CommentConnectionFragmentDoc.definitions,
    ],
};
const AttachmentIssue_HistoryDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "attachmentIssue_history" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentIssue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "history" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueHistoryConnectionFragmentDoc.definitions,
    ],
};
const AttachmentIssue_InverseRelationsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "attachmentIssue_inverseRelations" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentIssue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "inverseRelations" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueRelationConnectionFragmentDoc.definitions,
    ],
};
const AttachmentIssue_LabelsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "attachmentIssue_labels" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentIssue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "labels" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueLabelConnectionFragmentDoc.definitions,
    ],
};
const AttachmentIssue_RelationsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "attachmentIssue_relations" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentIssue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "relations" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueRelationConnectionFragmentDoc.definitions,
    ],
};
const AttachmentIssue_SubscribersDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "attachmentIssue_subscribers" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentIssue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "subscribers" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeDisabled" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...UserConnectionFragmentDoc.definitions,
    ],
};
const AttachmentsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "attachments" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachments" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "filter" },
                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                        },
                    },
                ],
            },
        },
        ...AttachmentConnectionFragmentDoc.definitions,
    ],
};
const AttachmentsForUrlDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "attachmentsForURL" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentsForURL" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "url" },
                                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                        },
                    },
                ],
            },
        },
        ...AttachmentConnectionFragmentDoc.definitions,
    ],
};
const AuditEntriesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "auditEntries" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "auditEntries" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "filter" },
                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryConnection" } }],
                        },
                    },
                ],
            },
        },
        ...AuditEntryConnectionFragmentDoc.definitions,
    ],
};
const AuditEntryTypesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "auditEntryTypes" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "auditEntryTypes" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryType" } }],
                        },
                    },
                ],
            },
        },
        ...AuditEntryTypeFragmentDoc.definitions,
    ],
};
const AuthorizedApplicationsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "authorizedApplications" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "authorizedApplications" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthorizedApplication" } }],
                        },
                    },
                ],
            },
        },
        ...AuthorizedApplicationFragmentDoc.definitions,
    ],
};
const AvailableUsersDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "availableUsers" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "availableUsers" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
                        },
                    },
                ],
            },
        },
        ...AuthResolverResponseFragmentDoc.definitions,
    ],
};
const BillingDetailsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "billingDetails" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "billingDetails" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "BillingDetailsPayload" } }],
                        },
                    },
                ],
            },
        },
        ...BillingDetailsPayloadFragmentDoc.definitions,
    ],
};
const BillingDetails_PaymentMethodDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "billingDetails_paymentMethod" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "billingDetails" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "paymentMethod" },
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Card" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...CardFragmentDoc.definitions,
    ],
};
const CollaborativeDocumentJoinDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "collaborativeDocumentJoin" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "version" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "collaborativeDocumentJoin" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "clientId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "issueId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "version" },
                                value: { kind: "Variable", name: { kind: "Name", value: "version" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "FragmentSpread", name: { kind: "Name", value: "CollaborationDocumentUpdatePayload" } },
                            ],
                        },
                    },
                ],
            },
        },
        ...CollaborationDocumentUpdatePayloadFragmentDoc.definitions,
    ],
};
const CollaborativeDocumentJoin_StepsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "collaborativeDocumentJoin_steps" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "version" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "collaborativeDocumentJoin" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "clientId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "issueId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "version" },
                                value: { kind: "Variable", name: { kind: "Name", value: "version" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "steps" },
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "StepsResponse" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...StepsResponseFragmentDoc.definitions,
    ],
};
const CommentDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "comment" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "comment" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }],
                        },
                    },
                ],
            },
        },
        ...CommentFragmentDoc.definitions,
    ],
};
const CommentsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "comments" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "comments" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "filter" },
                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                        },
                    },
                ],
            },
        },
        ...CommentConnectionFragmentDoc.definitions,
    ],
};
const CustomViewDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "customView" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "customView" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }],
                        },
                    },
                ],
            },
        },
        ...CustomViewFragmentDoc.definitions,
    ],
};
const CustomViewsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "customViews" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "customViews" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewConnection" } }],
                        },
                    },
                ],
            },
        },
        ...CustomViewConnectionFragmentDoc.definitions,
    ],
};
const CycleDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "cycle" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "cycle" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }],
                        },
                    },
                ],
            },
        },
        ...CycleFragmentDoc.definitions,
    ],
};
const Cycle_IssuesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "cycle_issues" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "cycle" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "issues" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueConnectionFragmentDoc.definitions,
    ],
};
const Cycle_UncompletedIssuesUponCloseDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "cycle_uncompletedIssuesUponClose" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "cycle" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "uncompletedIssuesUponClose" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueConnectionFragmentDoc.definitions,
    ],
};
const CyclesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "cycles" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "cycles" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "filter" },
                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }],
                        },
                    },
                ],
            },
        },
        ...CycleConnectionFragmentDoc.definitions,
    ],
};
const DocumentDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "document" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "document" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }],
                        },
                    },
                ],
            },
        },
        ...DocumentFragmentDoc.definitions,
    ],
};
const DocumentsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "documents" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "documents" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }],
                        },
                    },
                ],
            },
        },
        ...DocumentConnectionFragmentDoc.definitions,
    ],
};
const EmojiDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "emoji" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "emoji" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }],
                        },
                    },
                ],
            },
        },
        ...EmojiFragmentDoc.definitions,
    ],
};
const EmojisDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "emojis" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "emojis" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiConnection" } }],
                        },
                    },
                ],
            },
        },
        ...EmojiConnectionFragmentDoc.definitions,
    ],
};
const FavoriteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "favorite" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "favorite" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }],
                        },
                    },
                ],
            },
        },
        ...FavoriteFragmentDoc.definitions,
    ],
};
const Favorite_ChildrenDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "favorite_children" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "favorite" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "children" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...FavoriteConnectionFragmentDoc.definitions,
    ],
};
const FavoritesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "favorites" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "favorites" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }],
                        },
                    },
                ],
            },
        },
        ...FavoriteConnectionFragmentDoc.definitions,
    ],
};
const FigmaEmbedInfoDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "figmaEmbedInfo" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "fileId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "nodeId" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "figmaEmbedInfo" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "fileId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "fileId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "nodeId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "nodeId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FigmaEmbedPayload" } }],
                        },
                    },
                ],
            },
        },
        ...FigmaEmbedPayloadFragmentDoc.definitions,
    ],
};
const FigmaEmbedInfo_FigmaEmbedDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "figmaEmbedInfo_figmaEmbed" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "fileId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "nodeId" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "figmaEmbedInfo" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "fileId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "fileId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "nodeId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "nodeId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "figmaEmbed" },
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FigmaEmbed" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...FigmaEmbedFragmentDoc.definitions,
    ],
};
const IntegrationDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "integration" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integration" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationFragmentDoc.definitions,
    ],
};
const IntegrationsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "integrations" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrations" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationConnectionFragmentDoc.definitions,
    ],
};
const IssueDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issue" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                        },
                    },
                ],
            },
        },
        ...IssueFragmentDoc.definitions,
    ],
};
const Issue_AttachmentsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issue_attachments" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "attachments" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...AttachmentConnectionFragmentDoc.definitions,
    ],
};
const Issue_ChildrenDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issue_children" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "children" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueConnectionFragmentDoc.definitions,
    ],
};
const Issue_CommentsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issue_comments" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "comments" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...CommentConnectionFragmentDoc.definitions,
    ],
};
const Issue_HistoryDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issue_history" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "history" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueHistoryConnectionFragmentDoc.definitions,
    ],
};
const Issue_InverseRelationsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issue_inverseRelations" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "inverseRelations" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueRelationConnectionFragmentDoc.definitions,
    ],
};
const Issue_LabelsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issue_labels" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "labels" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueLabelConnectionFragmentDoc.definitions,
    ],
};
const Issue_RelationsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issue_relations" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "relations" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueRelationConnectionFragmentDoc.definitions,
    ],
};
const Issue_SubscribersDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issue_subscribers" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "subscribers" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeDisabled" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...UserConnectionFragmentDoc.definitions,
    ],
};
const IssueImportFinishGithubOAuthDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issueImportFinishGithubOAuth" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueImportFinishGithubOAuth" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "code" },
                                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GithubOAuthTokenPayload" } }],
                        },
                    },
                ],
            },
        },
        ...GithubOAuthTokenPayloadFragmentDoc.definitions,
    ],
};
const IssueLabelDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issueLabel" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueLabel" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
                        },
                    },
                ],
            },
        },
        ...IssueLabelFragmentDoc.definitions,
    ],
};
const IssueLabel_IssuesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issueLabel_issues" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueLabel" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "issues" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueConnectionFragmentDoc.definitions,
    ],
};
const IssueLabelsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issueLabels" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueLabels" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "filter" },
                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                        },
                    },
                ],
            },
        },
        ...IssueLabelConnectionFragmentDoc.definitions,
    ],
};
const IssuePriorityValuesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issuePriorityValues" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issuePriorityValues" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePriorityValue" } }],
                        },
                    },
                ],
            },
        },
        ...IssuePriorityValueFragmentDoc.definitions,
    ],
};
const IssueRelationDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issueRelation" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueRelation" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }],
                        },
                    },
                ],
            },
        },
        ...IssueRelationFragmentDoc.definitions,
    ],
};
const IssueRelationsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issueRelations" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueRelations" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                        },
                    },
                ],
            },
        },
        ...IssueRelationConnectionFragmentDoc.definitions,
    ],
};
const IssueSearchDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issueSearch" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "query" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueSearch" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "filter" },
                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "query" },
                                value: { kind: "Variable", name: { kind: "Name", value: "query" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                        },
                    },
                ],
            },
        },
        ...IssueConnectionFragmentDoc.definitions,
    ],
};
const IssuesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "issues" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issues" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "filter" },
                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                        },
                    },
                ],
            },
        },
        ...IssueConnectionFragmentDoc.definitions,
    ],
};
const MilestoneDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "milestone" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "milestone" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Milestone" } }],
                        },
                    },
                ],
            },
        },
        ...MilestoneFragmentDoc.definitions,
    ],
};
const Milestone_ProjectsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "milestone_projects" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "milestone" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "projects" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...ProjectConnectionFragmentDoc.definitions,
    ],
};
const MilestonesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "milestones" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "MilestoneFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "milestones" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "filter" },
                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "MilestoneConnection" } }],
                        },
                    },
                ],
            },
        },
        ...MilestoneConnectionFragmentDoc.definitions,
    ],
};
const NotificationDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "notification" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "notification" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
                        },
                    },
                ],
            },
        },
        ...NotificationFragmentDoc.definitions,
    ],
};
const NotificationSubscriptionDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "notificationSubscription" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "notificationSubscription" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
                        },
                    },
                ],
            },
        },
        ...NotificationSubscriptionFragmentDoc.definitions,
    ],
};
const NotificationSubscriptionsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "notificationSubscriptions" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "notificationSubscriptions" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionConnection" } },
                            ],
                        },
                    },
                ],
            },
        },
        ...NotificationSubscriptionConnectionFragmentDoc.definitions,
    ],
};
const NotificationsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "notifications" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "notifications" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationConnection" } }],
                        },
                    },
                ],
            },
        },
        ...NotificationConnectionFragmentDoc.definitions,
    ],
};
const OrganizationDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organization" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Organization" } }],
                        },
                    },
                ],
            },
        },
        ...OrganizationFragmentDoc.definitions,
    ],
};
const Organization_IntegrationsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "organization_integrations" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organization" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "integrations" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IntegrationConnectionFragmentDoc.definitions,
    ],
};
const Organization_LabelsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "organization_labels" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organization" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "labels" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueLabelConnectionFragmentDoc.definitions,
    ],
};
const Organization_MilestonesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "organization_milestones" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "MilestoneFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organization" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "milestones" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "MilestoneConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...MilestoneConnectionFragmentDoc.definitions,
    ],
};
const Organization_TeamsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "organization_teams" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organization" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "teams" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...TeamConnectionFragmentDoc.definitions,
    ],
};
const Organization_TemplatesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "organization_templates" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organization" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "templates" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...TemplateConnectionFragmentDoc.definitions,
    ],
};
const Organization_UsersDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "organization_users" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organization" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "users" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeDisabled" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...UserConnectionFragmentDoc.definitions,
    ],
};
const OrganizationExistsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "organizationExists" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "urlKey" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organizationExists" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "urlKey" },
                                value: { kind: "Variable", name: { kind: "Name", value: "urlKey" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationExistsPayload" } }],
                        },
                    },
                ],
            },
        },
        ...OrganizationExistsPayloadFragmentDoc.definitions,
    ],
};
const OrganizationInviteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "organizationInvite" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organizationInvite" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }],
                        },
                    },
                ],
            },
        },
        ...OrganizationInviteFragmentDoc.definitions,
    ],
};
const OrganizationInviteDetailsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "organizationInviteDetails" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organizationInviteDetails" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInviteDetailsPayload" } },
                            ],
                        },
                    },
                ],
            },
        },
        ...OrganizationInviteDetailsPayloadFragmentDoc.definitions,
    ],
};
const OrganizationInvitesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "organizationInvites" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organizationInvites" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInviteConnection" } }],
                        },
                    },
                ],
            },
        },
        ...OrganizationInviteConnectionFragmentDoc.definitions,
    ],
};
const ProjectDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "project" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "project" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }],
                        },
                    },
                ],
            },
        },
        ...ProjectFragmentDoc.definitions,
    ],
};
const Project_DocumentsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "project_documents" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "project" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "documents" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...DocumentConnectionFragmentDoc.definitions,
    ],
};
const Project_IssuesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "project_issues" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "project" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "issues" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueConnectionFragmentDoc.definitions,
    ],
};
const Project_LinksDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "project_links" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "project" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "links" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...ProjectLinkConnectionFragmentDoc.definitions,
    ],
};
const Project_MembersDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "project_members" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "project" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "members" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeDisabled" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...UserConnectionFragmentDoc.definitions,
    ],
};
const Project_TeamsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "project_teams" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "project" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "teams" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...TeamConnectionFragmentDoc.definitions,
    ],
};
const ProjectLinkDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "projectLink" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "projectLink" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLink" } }],
                        },
                    },
                ],
            },
        },
        ...ProjectLinkFragmentDoc.definitions,
    ],
};
const ProjectLinksDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "projectLinks" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "projectLinks" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkConnection" } }],
                        },
                    },
                ],
            },
        },
        ...ProjectLinkConnectionFragmentDoc.definitions,
    ],
};
const ProjectsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "projects" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "projects" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "filter" },
                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                        },
                    },
                ],
            },
        },
        ...ProjectConnectionFragmentDoc.definitions,
    ],
};
const PushSubscriptionTestDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "pushSubscriptionTest" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pushSubscriptionTest" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionTestPayload" } }],
                        },
                    },
                ],
            },
        },
        ...PushSubscriptionTestPayloadFragmentDoc.definitions,
    ],
};
const ReactionDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "reaction" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "reaction" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
                        },
                    },
                ],
            },
        },
        ...ReactionFragmentDoc.definitions,
    ],
};
const ReactionsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "reactions" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "reactions" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ReactionConnection" } }],
                        },
                    },
                ],
            },
        },
        ...ReactionConnectionFragmentDoc.definitions,
    ],
};
const SsoUrlFromEmailDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "ssoUrlFromEmail" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "email" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "ssoUrlFromEmail" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "email" },
                                value: { kind: "Variable", name: { kind: "Name", value: "email" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "isDesktop" },
                                value: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } }],
                        },
                    },
                ],
            },
        },
        ...SsoUrlFromEmailResponseFragmentDoc.definitions,
    ],
};
const SubscriptionDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "subscription" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "subscription" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Subscription" } }],
                        },
                    },
                ],
            },
        },
        ...SubscriptionFragmentDoc.definitions,
    ],
};
const TeamDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "team" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }],
                        },
                    },
                ],
            },
        },
        ...TeamFragmentDoc.definitions,
    ],
};
const Team_CyclesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "team_cycles" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "cycles" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...CycleConnectionFragmentDoc.definitions,
    ],
};
const Team_IssuesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "team_issues" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "issues" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueConnectionFragmentDoc.definitions,
    ],
};
const Team_LabelsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "team_labels" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "labels" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueLabelConnectionFragmentDoc.definitions,
    ],
};
const Team_MembersDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "team_members" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "members" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeDisabled" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...UserConnectionFragmentDoc.definitions,
    ],
};
const Team_MembershipsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "team_memberships" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "memberships" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...TeamMembershipConnectionFragmentDoc.definitions,
    ],
};
const Team_ProjectsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "team_projects" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "projects" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...ProjectConnectionFragmentDoc.definitions,
    ],
};
const Team_StatesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "team_states" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "states" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...WorkflowStateConnectionFragmentDoc.definitions,
    ],
};
const Team_TemplatesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "team_templates" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "templates" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...TemplateConnectionFragmentDoc.definitions,
    ],
};
const Team_WebhooksDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "team_webhooks" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "team" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "webhooks" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...WebhookConnectionFragmentDoc.definitions,
    ],
};
const TeamMembershipDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "teamMembership" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "teamMembership" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }],
                        },
                    },
                ],
            },
        },
        ...TeamMembershipFragmentDoc.definitions,
    ],
};
const TeamMembershipsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "teamMemberships" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "teamMemberships" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                        },
                    },
                ],
            },
        },
        ...TeamMembershipConnectionFragmentDoc.definitions,
    ],
};
const TeamsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "teams" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "teams" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "filter" },
                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                        },
                    },
                ],
            },
        },
        ...TeamConnectionFragmentDoc.definitions,
    ],
};
const TemplateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "template" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "template" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
                        },
                    },
                ],
            },
        },
        ...TemplateFragmentDoc.definitions,
    ],
};
const TemplatesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "templates" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "templates" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
                        },
                    },
                ],
            },
        },
        ...TemplateFragmentDoc.definitions,
    ],
};
const UserDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "user" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "user" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                        },
                    },
                ],
            },
        },
        ...UserFragmentDoc.definitions,
    ],
};
const User_AssignedIssuesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "user_assignedIssues" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "user" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "assignedIssues" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueConnectionFragmentDoc.definitions,
    ],
};
const User_CreatedIssuesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "user_createdIssues" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "user" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdIssues" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueConnectionFragmentDoc.definitions,
    ],
};
const User_TeamMembershipsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "user_teamMemberships" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "user" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "teamMemberships" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...TeamMembershipConnectionFragmentDoc.definitions,
    ],
};
const User_TeamsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "user_teams" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "user" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "teams" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...TeamConnectionFragmentDoc.definitions,
    ],
};
const UserSettingsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "userSettings" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettings" } }],
                        },
                    },
                ],
            },
        },
        ...UserSettingsFragmentDoc.definitions,
    ],
};
const UsersDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "users" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "users" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "filter" },
                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeDisabled" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                        },
                    },
                ],
            },
        },
        ...UserConnectionFragmentDoc.definitions,
    ],
};
const ViewerDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "viewer" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "viewer" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                        },
                    },
                ],
            },
        },
        ...UserFragmentDoc.definitions,
    ],
};
const Viewer_AssignedIssuesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "viewer_assignedIssues" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "viewer" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "assignedIssues" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueConnectionFragmentDoc.definitions,
    ],
};
const Viewer_CreatedIssuesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "viewer_createdIssues" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "viewer" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdIssues" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueConnectionFragmentDoc.definitions,
    ],
};
const Viewer_TeamMembershipsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "viewer_teamMemberships" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "viewer" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "teamMemberships" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...TeamMembershipConnectionFragmentDoc.definitions,
    ],
};
const Viewer_TeamsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "viewer_teams" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "viewer" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "teams" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...TeamConnectionFragmentDoc.definitions,
    ],
};
const WebhookDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "webhook" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "webhook" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }],
                        },
                    },
                ],
            },
        },
        ...WebhookFragmentDoc.definitions,
    ],
};
const WebhooksDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "webhooks" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "webhooks" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }],
                        },
                    },
                ],
            },
        },
        ...WebhookConnectionFragmentDoc.definitions,
    ],
};
const WorkflowStateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "workflowState" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "workflowState" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }],
                        },
                    },
                ],
            },
        },
        ...WorkflowStateFragmentDoc.definitions,
    ],
};
const WorkflowState_IssuesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "workflowState_issues" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "workflowState" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "issues" },
                                    arguments: [
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "after" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "before" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "filter" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "first" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "includeArchived" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "last" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                        },
                                        {
                                            kind: "Argument",
                                            name: { kind: "Name", value: "orderBy" },
                                            value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                        },
                                    ],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
        ...IssueConnectionFragmentDoc.definitions,
    ],
};
const WorkflowStatesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "workflowStates" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "workflowStates" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "after" },
                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "before" },
                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "filter" },
                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "first" },
                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeArchived" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "last" },
                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "orderBy" },
                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }],
                        },
                    },
                ],
            },
        },
        ...WorkflowStateConnectionFragmentDoc.definitions,
    ],
};
const AttachmentArchiveDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "attachmentArchive" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentArchive" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const AttachmentCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "attachmentCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                        },
                    },
                ],
            },
        },
        ...AttachmentPayloadFragmentDoc.definitions,
    ],
};
const AttachmentDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "attachmentDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const AttachmentLinkFrontDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "attachmentLinkFront" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentLinkFront" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "conversationId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "issueId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FrontAttachmentPayload" } }],
                        },
                    },
                ],
            },
        },
        ...FrontAttachmentPayloadFragmentDoc.definitions,
    ],
};
const AttachmentLinkIntercomDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "attachmentLinkIntercom" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentLinkIntercom" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "conversationId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "issueId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                        },
                    },
                ],
            },
        },
        ...AttachmentPayloadFragmentDoc.definitions,
    ],
};
const AttachmentLinkJiraIssueDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "attachmentLinkJiraIssue" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentLinkJiraIssue" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "issueId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "jiraIssueId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                        },
                    },
                ],
            },
        },
        ...AttachmentPayloadFragmentDoc.definitions,
    ],
};
const AttachmentLinkUrlDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "attachmentLinkURL" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentLinkURL" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "issueId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "title" },
                                value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "url" },
                                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                        },
                    },
                ],
            },
        },
        ...AttachmentPayloadFragmentDoc.definitions,
    ],
};
const AttachmentLinkZendeskDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "attachmentLinkZendesk" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "ticketId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentLinkZendesk" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "issueId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "ticketId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "ticketId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                        },
                    },
                ],
            },
        },
        ...AttachmentPayloadFragmentDoc.definitions,
    ],
};
const AttachmentUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "attachmentUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "attachmentUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                        },
                    },
                ],
            },
        },
        ...AttachmentPayloadFragmentDoc.definitions,
    ],
};
const BillingEmailUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "billingEmailUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "BillingEmailUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "billingEmailUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "BillingEmailPayload" } }],
                        },
                    },
                ],
            },
        },
        ...BillingEmailPayloadFragmentDoc.definitions,
    ],
};
const CollaborativeDocumentUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "collaborativeDocumentUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "CollaborationDocumentUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "collaborativeDocumentUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "FragmentSpread", name: { kind: "Name", value: "CollaborationDocumentUpdatePayload" } },
                            ],
                        },
                    },
                ],
            },
        },
        ...CollaborationDocumentUpdatePayloadFragmentDoc.definitions,
    ],
};
const CommentCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "commentCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "commentCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
                        },
                    },
                ],
            },
        },
        ...CommentPayloadFragmentDoc.definitions,
    ],
};
const CommentDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "commentDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "commentDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const CommentUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "commentUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "commentUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
                        },
                    },
                ],
            },
        },
        ...CommentPayloadFragmentDoc.definitions,
    ],
};
const ContactCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "contactCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "ContactCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "contactCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ContactPayload" } }],
                        },
                    },
                ],
            },
        },
        ...ContactPayloadFragmentDoc.definitions,
    ],
};
const CreateCsvExportReportDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "createCsvExportReport" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } },
                    type: {
                        kind: "ListType",
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "createCsvExportReport" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includePrivateTeamIds" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateCsvExportReportPayload" } }],
                        },
                    },
                ],
            },
        },
        ...CreateCsvExportReportPayloadFragmentDoc.definitions,
    ],
};
const CreateOrganizationFromOnboardingDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "createOrganizationFromOnboarding" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "CreateOrganizationInput" } },
                    },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "survey" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "OnboardingCustomerSurvey" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "createOrganizationFromOnboarding" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "survey" },
                                value: { kind: "Variable", name: { kind: "Name", value: "survey" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
                            ],
                        },
                    },
                ],
            },
        },
        ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
    ],
};
const CustomViewCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "customViewCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "customViewCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }],
                        },
                    },
                ],
            },
        },
        ...CustomViewPayloadFragmentDoc.definitions,
    ],
};
const CustomViewDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "customViewDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "customViewDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const CustomViewUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "customViewUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "customViewUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }],
                        },
                    },
                ],
            },
        },
        ...CustomViewPayloadFragmentDoc.definitions,
    ],
};
const CycleArchiveDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "cycleArchive" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "cycleArchive" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const CycleCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "cycleCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleCreateInput" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "cycleCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
                        },
                    },
                ],
            },
        },
        ...CyclePayloadFragmentDoc.definitions,
    ],
};
const CycleUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "cycleUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleUpdateInput" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "cycleUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
                        },
                    },
                ],
            },
        },
        ...CyclePayloadFragmentDoc.definitions,
    ],
};
const DebugFailWithInternalErrorDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "debugFailWithInternalError" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "debugFailWithInternalError" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DebugPayload" } }],
                        },
                    },
                ],
            },
        },
        ...DebugPayloadFragmentDoc.definitions,
    ],
};
const DocumentCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "documentCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "DocumentCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "documentCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }],
                        },
                    },
                ],
            },
        },
        ...DocumentPayloadFragmentDoc.definitions,
    ],
};
const DocumentDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "documentDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "documentDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const DocumentUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "documentUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "DocumentUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "documentUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }],
                        },
                    },
                ],
            },
        },
        ...DocumentPayloadFragmentDoc.definitions,
    ],
};
const EmailSubscribeDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "emailSubscribe" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "EmailSubscribeInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "emailSubscribe" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailSubscribePayload" } }],
                        },
                    },
                ],
            },
        },
        ...EmailSubscribePayloadFragmentDoc.definitions,
    ],
};
const EmailTokenUserAccountAuthDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "emailTokenUserAccountAuth" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "emailTokenUserAccountAuth" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
                        },
                    },
                ],
            },
        },
        ...AuthResolverResponseFragmentDoc.definitions,
    ],
};
const EmailUnsubscribeDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "emailUnsubscribe" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribeInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "emailUnsubscribe" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailUnsubscribePayload" } }],
                        },
                    },
                ],
            },
        },
        ...EmailUnsubscribePayloadFragmentDoc.definitions,
    ],
};
const EmailUserAccountAuthChallengeDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "emailUserAccountAuthChallenge" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "emailUserAccountAuthChallenge" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "FragmentSpread", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } },
                            ],
                        },
                    },
                ],
            },
        },
        ...EmailUserAccountAuthChallengeResponseFragmentDoc.definitions,
    ],
};
const EmojiCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "emojiCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmojiCreateInput" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "emojiCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiPayload" } }],
                        },
                    },
                ],
            },
        },
        ...EmojiPayloadFragmentDoc.definitions,
    ],
};
const EmojiDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "emojiDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "emojiDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const EventCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "eventCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EventCreateInput" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "eventCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EventPayload" } }],
                        },
                    },
                ],
            },
        },
        ...EventPayloadFragmentDoc.definitions,
    ],
};
const FavoriteCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "favoriteCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "favoriteCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }],
                        },
                    },
                ],
            },
        },
        ...FavoritePayloadFragmentDoc.definitions,
    ],
};
const FavoriteDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "favoriteDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "favoriteDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const FavoriteUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "favoriteUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "favoriteUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }],
                        },
                    },
                ],
            },
        },
        ...FavoritePayloadFragmentDoc.definitions,
    ],
};
const FeedbackCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "feedbackCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "FeedbackCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "feedbackCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FeedbackPayload" } }],
                        },
                    },
                ],
            },
        },
        ...FeedbackPayloadFragmentDoc.definitions,
    ],
};
const FileUploadDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "fileUpload" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "filename" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "size" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "fileUpload" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "contentType" },
                                value: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "filename" },
                                value: { kind: "Variable", name: { kind: "Name", value: "filename" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "metaData" },
                                value: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "size" },
                                value: { kind: "Variable", name: { kind: "Name", value: "size" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }],
                        },
                    },
                ],
            },
        },
        ...UploadPayloadFragmentDoc.definitions,
    ],
};
const GoogleUserAccountAuthDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "googleUserAccountAuth" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "GoogleUserAccountAuthInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "googleUserAccountAuth" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
                        },
                    },
                ],
            },
        },
        ...AuthResolverResponseFragmentDoc.definitions,
    ],
};
const ImageUploadFromUrlDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "imageUploadFromUrl" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "imageUploadFromUrl" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "url" },
                                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } }],
                        },
                    },
                ],
            },
        },
        ...ImageUploadFromUrlPayloadFragmentDoc.definitions,
    ],
};
const IntegrationDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const IntegrationFigmaDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationFigma" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationFigma" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "code" },
                                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "redirectUri" },
                                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationFrontDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationFront" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationFront" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "code" },
                                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "redirectUri" },
                                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationGithubCommitCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationGithubCommitCreate" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationGithubCommitCreate" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...GitHubCommitIntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationGithubConnectDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationGithubConnect" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationGithubConnect" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "installationId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationGitlabConnectDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationGitlabConnect" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationGitlabConnect" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "accessToken" },
                                value: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "gitlabUrl" },
                                value: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationGoogleSheetsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationGoogleSheets" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationGoogleSheets" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "code" },
                                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationIntercomDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationIntercom" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationIntercom" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "code" },
                                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "redirectUri" },
                                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationIntercomDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationIntercomDelete" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationIntercomDelete" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationIntercomSettingsUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationIntercomSettingsUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "IntercomSettingsInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationIntercomSettingsUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationLoomDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationLoom" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationLoom" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationResourceArchiveDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationResourceArchive" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationResourceArchive" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const IntegrationSentryConnectDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationSentryConnect" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationSentryConnect" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "code" },
                                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "installationId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "organizationSlug" },
                                value: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationSettingsUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationSettingsUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationSettingsInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationSettingsUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationSlackDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationSlack" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationSlack" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "code" },
                                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "redirectUri" },
                                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "shouldUseV2Auth" },
                                value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationSlackImportEmojisDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationSlackImportEmojis" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationSlackImportEmojis" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "code" },
                                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "redirectUri" },
                                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationSlackPersonalDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationSlackPersonal" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationSlackPersonal" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "code" },
                                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "redirectUri" },
                                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationSlackPostDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationSlackPost" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationSlackPost" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "code" },
                                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "redirectUri" },
                                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "shouldUseV2Auth" },
                                value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "teamId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationSlackProjectPostDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationSlackProjectPost" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationSlackProjectPost" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "code" },
                                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "projectId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "redirectUri" },
                                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IntegrationZendeskDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "integrationZendesk" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "subdomain" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "integrationZendesk" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "code" },
                                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "redirectUri" },
                                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "scope" },
                                value: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "subdomain" },
                                value: { kind: "Variable", name: { kind: "Name", value: "subdomain" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const IssueArchiveDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueArchive" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "trash" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueArchive" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "trash" },
                                value: { kind: "Variable", name: { kind: "Name", value: "trash" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const IssueBatchUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueBatchUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "ids" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UUID" } } },
                        },
                    },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueBatchUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "ids" },
                                value: { kind: "Variable", name: { kind: "Name", value: "ids" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueBatchPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IssueBatchPayloadFragmentDoc.definitions,
    ],
};
const IssueCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueCreateInput" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                        },
                    },
                ],
            },
        },
        ...IssuePayloadFragmentDoc.definitions,
    ],
};
const IssueDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const IssueImportCreateAsanaDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueImportCreateAsana" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueImportCreateAsana" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "asanaTeamName" },
                                value: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "asanaToken" },
                                value: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeClosedIssues" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "instantProcess" },
                                value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "teamId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IssueImportPayloadFragmentDoc.definitions,
    ],
};
const IssueImportCreateClubhouseDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueImportCreateClubhouse" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseTeamName" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueImportCreateClubhouse" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "clubhouseTeamName" },
                                value: { kind: "Variable", name: { kind: "Name", value: "clubhouseTeamName" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "clubhouseToken" },
                                value: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeClosedIssues" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "instantProcess" },
                                value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "teamId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IssueImportPayloadFragmentDoc.definitions,
    ],
};
const IssueImportCreateGithubDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueImportCreateGithub" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "githubRepoName" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "githubRepoOwner" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "githubShouldImportOrgProjects" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "githubToken" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueImportCreateGithub" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "githubRepoName" },
                                value: { kind: "Variable", name: { kind: "Name", value: "githubRepoName" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "githubRepoOwner" },
                                value: { kind: "Variable", name: { kind: "Name", value: "githubRepoOwner" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "githubShouldImportOrgProjects" },
                                value: { kind: "Variable", name: { kind: "Name", value: "githubShouldImportOrgProjects" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "githubToken" },
                                value: { kind: "Variable", name: { kind: "Name", value: "githubToken" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeClosedIssues" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "instantProcess" },
                                value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "teamId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IssueImportPayloadFragmentDoc.definitions,
    ],
};
const IssueImportCreateJiraDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueImportCreateJira" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueImportCreateJira" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "includeClosedIssues" },
                                value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "instantProcess" },
                                value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "jiraEmail" },
                                value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "jiraHostname" },
                                value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "jiraProject" },
                                value: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "jiraToken" },
                                value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "teamId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IssueImportPayloadFragmentDoc.definitions,
    ],
};
const IssueImportDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueImportDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueImportDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "issueImportId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportDeletePayload" } }],
                        },
                    },
                ],
            },
        },
        ...IssueImportDeletePayloadFragmentDoc.definitions,
    ],
};
const IssueImportProcessDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueImportProcess" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "mapping" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "JSONObject" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueImportProcess" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "issueImportId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "mapping" },
                                value: { kind: "Variable", name: { kind: "Name", value: "mapping" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IssueImportPayloadFragmentDoc.definitions,
    ],
};
const IssueImportUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueImportUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueImportUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueImportUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IssueImportPayloadFragmentDoc.definitions,
    ],
};
const IssueLabelArchiveDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueLabelArchive" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueLabelArchive" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const IssueLabelCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueLabelCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelCreateInput" } },
                    },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueLabelCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "replaceTeamLabels" },
                                value: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IssueLabelPayloadFragmentDoc.definitions,
    ],
};
const IssueLabelUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueLabelUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueLabelUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IssueLabelPayloadFragmentDoc.definitions,
    ],
};
const IssueRelationCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueRelationCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueRelationCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IssueRelationPayloadFragmentDoc.definitions,
    ],
};
const IssueRelationDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueRelationDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueRelationDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const IssueRelationUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueRelationUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueRelationUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IssueRelationPayloadFragmentDoc.definitions,
    ],
};
const IssueUnarchiveDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueUnarchive" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueUnarchive" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const IssueUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "issueUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "issueUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                        },
                    },
                ],
            },
        },
        ...IssuePayloadFragmentDoc.definitions,
    ],
};
const JiraIntegrationConnectDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "jiraIntegrationConnect" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "JiraConfigurationInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "jiraIntegrationConnect" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const JoinOrganizationFromOnboardingDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "joinOrganizationFromOnboarding" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "JoinOrganizationInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "joinOrganizationFromOnboarding" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
                            ],
                        },
                    },
                ],
            },
        },
        ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
    ],
};
const LeaveOrganizationDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "leaveOrganization" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "leaveOrganization" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "organizationId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
                            ],
                        },
                    },
                ],
            },
        },
        ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
    ],
};
const MilestoneCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "milestoneCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "MilestoneCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "milestoneCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "MilestonePayload" } }],
                        },
                    },
                ],
            },
        },
        ...MilestonePayloadFragmentDoc.definitions,
    ],
};
const MilestoneDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "milestoneDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "milestoneDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const MilestoneUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "milestoneUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "MilestoneUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "milestoneUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "MilestonePayload" } }],
                        },
                    },
                ],
            },
        },
        ...MilestonePayloadFragmentDoc.definitions,
    ],
};
const NotificationArchiveDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "notificationArchive" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "notificationArchive" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const NotificationCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "notificationCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "NotificationUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "notificationCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...NotificationPayloadFragmentDoc.definitions,
    ],
};
const NotificationSubscriptionCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "notificationSubscriptionCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "notificationSubscriptionCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } },
                            ],
                        },
                    },
                ],
            },
        },
        ...NotificationSubscriptionPayloadFragmentDoc.definitions,
    ],
};
const NotificationSubscriptionDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "notificationSubscriptionDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "notificationSubscriptionDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const NotificationUnarchiveDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "notificationUnarchive" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "notificationUnarchive" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const NotificationUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "notificationUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "NotificationUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "notificationUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...NotificationPayloadFragmentDoc.definitions,
    ],
};
const OauthClientArchiveDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "oauthClientArchive" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "oauthClientArchive" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const OauthClientCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "oauthClientCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "OauthClientCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "oauthClientCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientPayload" } }],
                        },
                    },
                ],
            },
        },
        ...OauthClientPayloadFragmentDoc.definitions,
    ],
};
const OauthClientRotateSecretDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "oauthClientRotateSecret" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "oauthClientRotateSecret" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RotateSecretPayload" } }],
                        },
                    },
                ],
            },
        },
        ...RotateSecretPayloadFragmentDoc.definitions,
    ],
};
const OauthClientUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "oauthClientUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "OauthClientUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "oauthClientUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientPayload" } }],
                        },
                    },
                ],
            },
        },
        ...OauthClientPayloadFragmentDoc.definitions,
    ],
};
const OauthTokenRevokeDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "oauthTokenRevoke" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "appId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                        },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "oauthTokenRevoke" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "appId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "appId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "scope" },
                                value: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthTokenRevokePayload" } }],
                        },
                    },
                ],
            },
        },
        ...OauthTokenRevokePayloadFragmentDoc.definitions,
    ],
};
const OrganizationCancelDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "organizationCancelDelete" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organizationCancelDelete" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } },
                            ],
                        },
                    },
                ],
            },
        },
        ...OrganizationCancelDeletePayloadFragmentDoc.definitions,
    ],
};
const OrganizationDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "organizationDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "DeleteOrganizationInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organizationDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }],
                        },
                    },
                ],
            },
        },
        ...OrganizationDeletePayloadFragmentDoc.definitions,
    ],
};
const OrganizationDeleteChallengeDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "organizationDeleteChallenge" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organizationDeleteChallenge" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }],
                        },
                    },
                ],
            },
        },
        ...OrganizationDeletePayloadFragmentDoc.definitions,
    ],
};
const OrganizationDomainCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "organizationDomainCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomainCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organizationDomainCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDomainPayload" } }],
                        },
                    },
                ],
            },
        },
        ...OrganizationDomainPayloadFragmentDoc.definitions,
    ],
};
const OrganizationDomainDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "organizationDomainDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organizationDomainDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const OrganizationDomainVerifyDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "organizationDomainVerify" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomainVerificationInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organizationDomainVerify" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDomainPayload" } }],
                        },
                    },
                ],
            },
        },
        ...OrganizationDomainPayloadFragmentDoc.definitions,
    ],
};
const OrganizationInviteCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "organizationInviteCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organizationInviteCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }],
                        },
                    },
                ],
            },
        },
        ...OrganizationInvitePayloadFragmentDoc.definitions,
    ],
};
const OrganizationInviteDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "organizationInviteDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organizationInviteDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const OrganizationUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "organizationUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "UpdateOrganizationInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "organizationUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...OrganizationPayloadFragmentDoc.definitions,
    ],
};
const ProjectArchiveDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "projectArchive" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "projectArchive" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const ProjectCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "projectCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "projectCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }],
                        },
                    },
                ],
            },
        },
        ...ProjectPayloadFragmentDoc.definitions,
    ],
};
const ProjectLinkCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "projectLinkCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "projectLinkCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkPayload" } }],
                        },
                    },
                ],
            },
        },
        ...ProjectLinkPayloadFragmentDoc.definitions,
    ],
};
const ProjectLinkDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "projectLinkDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "projectLinkDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const ProjectLinkUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "projectLinkUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "projectLinkUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkPayload" } }],
                        },
                    },
                ],
            },
        },
        ...ProjectLinkPayloadFragmentDoc.definitions,
    ],
};
const ProjectUnarchiveDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "projectUnarchive" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "projectUnarchive" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const ProjectUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "projectUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "projectUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }],
                        },
                    },
                ],
            },
        },
        ...ProjectPayloadFragmentDoc.definitions,
    ],
};
const PushSubscriptionCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "pushSubscriptionCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pushSubscriptionCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }],
                        },
                    },
                ],
            },
        },
        ...PushSubscriptionPayloadFragmentDoc.definitions,
    ],
};
const PushSubscriptionDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "pushSubscriptionDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "pushSubscriptionDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }],
                        },
                    },
                ],
            },
        },
        ...PushSubscriptionPayloadFragmentDoc.definitions,
    ],
};
const ReactionCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "reactionCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "ReactionCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "reactionCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ReactionPayload" } }],
                        },
                    },
                ],
            },
        },
        ...ReactionPayloadFragmentDoc.definitions,
    ],
};
const ReactionDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "reactionDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "reactionDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const RefreshGoogleSheetsDataDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "refreshGoogleSheetsData" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "refreshGoogleSheetsData" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                        },
                    },
                ],
            },
        },
        ...IntegrationPayloadFragmentDoc.definitions,
    ],
};
const ResendOrganizationInviteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "resendOrganizationInvite" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "resendOrganizationInvite" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const SamlTokenUserAccountAuthDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "samlTokenUserAccountAuth" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "samlTokenUserAccountAuth" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
                        },
                    },
                ],
            },
        },
        ...AuthResolverResponseFragmentDoc.definitions,
    ],
};
const TeamCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "teamCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } },
                    type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamCreateInput" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "teamCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "copySettingsFromTeamId" },
                                value: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }],
                        },
                    },
                ],
            },
        },
        ...TeamPayloadFragmentDoc.definitions,
    ],
};
const TeamDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "teamDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "teamDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const TeamKeyDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "teamKeyDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "teamKeyDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const TeamMembershipCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "teamMembershipCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "teamMembershipCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }],
                        },
                    },
                ],
            },
        },
        ...TeamMembershipPayloadFragmentDoc.definitions,
    ],
};
const TeamMembershipDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "teamMembershipDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "teamMembershipDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const TeamMembershipUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "teamMembershipUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "teamMembershipUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }],
                        },
                    },
                ],
            },
        },
        ...TeamMembershipPayloadFragmentDoc.definitions,
    ],
};
const TeamUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "teamUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamUpdateInput" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "teamUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }],
                        },
                    },
                ],
            },
        },
        ...TeamPayloadFragmentDoc.definitions,
    ],
};
const TemplateCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "templateCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "TemplateCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "templateCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }],
                        },
                    },
                ],
            },
        },
        ...TemplatePayloadFragmentDoc.definitions,
    ],
};
const TemplateDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "templateDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "templateDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const TemplateUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "templateUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "TemplateUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "templateUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }],
                        },
                    },
                ],
            },
        },
        ...TemplatePayloadFragmentDoc.definitions,
    ],
};
const UserDemoteAdminDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "userDemoteAdmin" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "userDemoteAdmin" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                        },
                    },
                ],
            },
        },
        ...UserAdminPayloadFragmentDoc.definitions,
    ],
};
const UserFlagUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "userFlagUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "flag" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "operation" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagUpdateOperation" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "userFlagUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "flag" },
                                value: { kind: "Variable", name: { kind: "Name", value: "flag" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "operation" },
                                value: { kind: "Variable", name: { kind: "Name", value: "operation" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagPayload" } }],
                        },
                    },
                ],
            },
        },
        ...UserSettingsFlagPayloadFragmentDoc.definitions,
    ],
};
const UserPromoteAdminDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "userPromoteAdmin" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "userPromoteAdmin" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                        },
                    },
                ],
            },
        },
        ...UserAdminPayloadFragmentDoc.definitions,
    ],
};
const UserSettingsFlagIncrementDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "userSettingsFlagIncrement" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "flag" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "userSettingsFlagIncrement" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "flag" },
                                value: { kind: "Variable", name: { kind: "Name", value: "flag" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagPayload" } }],
                        },
                    },
                ],
            },
        },
        ...UserSettingsFlagPayloadFragmentDoc.definitions,
    ],
};
const UserSettingsFlagsResetDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "userSettingsFlagsReset" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "userSettingsFlagsReset" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } }],
                        },
                    },
                ],
            },
        },
        ...UserSettingsFlagsResetPayloadFragmentDoc.definitions,
    ],
};
const UserSettingsUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "userSettingsUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "userSettingsUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsPayload" } }],
                        },
                    },
                ],
            },
        },
        ...UserSettingsPayloadFragmentDoc.definitions,
    ],
};
const UserSubscribeToNewsletterDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "userSubscribeToNewsletter" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "userSubscribeToNewsletter" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "FragmentSpread", name: { kind: "Name", value: "UserSubscribeToNewsletterPayload" } },
                            ],
                        },
                    },
                ],
            },
        },
        ...UserSubscribeToNewsletterPayloadFragmentDoc.definitions,
    ],
};
const UserSuspendDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "userSuspend" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "userSuspend" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                        },
                    },
                ],
            },
        },
        ...UserAdminPayloadFragmentDoc.definitions,
    ],
};
const UserUnsuspendDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "userUnsuspend" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "userUnsuspend" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                        },
                    },
                ],
            },
        },
        ...UserAdminPayloadFragmentDoc.definitions,
    ],
};
const UserUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "userUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UpdateUserInput" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "userUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }],
                        },
                    },
                ],
            },
        },
        ...UserPayloadFragmentDoc.definitions,
    ],
};
const ViewPreferencesCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "viewPreferencesCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "viewPreferencesCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }],
                        },
                    },
                ],
            },
        },
        ...ViewPreferencesPayloadFragmentDoc.definitions,
    ],
};
const ViewPreferencesDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "viewPreferencesDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "viewPreferencesDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const ViewPreferencesUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "viewPreferencesUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "viewPreferencesUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }],
                        },
                    },
                ],
            },
        },
        ...ViewPreferencesPayloadFragmentDoc.definitions,
    ],
};
const WebhookCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "webhookCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "WebhookCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "webhookCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }],
                        },
                    },
                ],
            },
        },
        ...WebhookPayloadFragmentDoc.definitions,
    ],
};
const WebhookDeleteDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "webhookDelete" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "webhookDelete" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const WebhookUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "webhookUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "WebhookUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "webhookUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }],
                        },
                    },
                ],
            },
        },
        ...WebhookPayloadFragmentDoc.definitions,
    ],
};
const WorkflowStateArchiveDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "workflowStateArchive" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "workflowStateArchive" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                        },
                    },
                ],
            },
        },
        ...ArchivePayloadFragmentDoc.definitions,
    ],
};
const WorkflowStateCreateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "workflowStateCreate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateCreateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "workflowStateCreate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }],
                        },
                    },
                ],
            },
        },
        ...WorkflowStatePayloadFragmentDoc.definitions,
    ],
};
const WorkflowStateUpdateDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "workflowStateUpdate" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateUpdateInput" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "workflowStateUpdate" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "input" },
                                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }],
                        },
                    },
                ],
            },
        },
        ...WorkflowStatePayloadFragmentDoc.definitions,
    ],
};

var _generated_documents = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get IssueRelationType () { return IssueRelationType; },
    get PaginationOrderBy () { return PaginationOrderBy; },
    get TrashOptionType () { return TrashOptionType; },
    get UserFlagType () { return UserFlagType; },
    get UserFlagUpdateOperation () { return UserFlagUpdateOperation; },
    get ViewPreferencesType () { return ViewPreferencesType; },
    get ViewType () { return ViewType; },
    TemplateFragmentDoc: TemplateFragmentDoc,
    UserFragmentDoc: UserFragmentDoc,
    UserAccountFragmentDoc: UserAccountFragmentDoc,
    DocumentStepFragmentDoc: DocumentStepFragmentDoc,
    SyncDeltaResponseFragmentDoc: SyncDeltaResponseFragmentDoc,
    SyncResponseFragmentDoc: SyncResponseFragmentDoc,
    ArchiveResponseFragmentDoc: ArchiveResponseFragmentDoc,
    DependencyResponseFragmentDoc: DependencyResponseFragmentDoc,
    SyncBatchResponseFragmentDoc: SyncBatchResponseFragmentDoc,
    GithubRepoFragmentDoc: GithubRepoFragmentDoc,
    GithubOrgFragmentDoc: GithubOrgFragmentDoc,
    GithubOAuthTokenPayloadFragmentDoc: GithubOAuthTokenPayloadFragmentDoc,
    AuthorizedApplicationFragmentDoc: AuthorizedApplicationFragmentDoc,
    UserAuthorizedApplicationFragmentDoc: UserAuthorizedApplicationFragmentDoc,
    ApplicationFragmentDoc: ApplicationFragmentDoc,
    GoogleSheetsSettingsFragmentDoc: GoogleSheetsSettingsFragmentDoc,
    IntercomSettingsFragmentDoc: IntercomSettingsFragmentDoc,
    JiraProjectDataFragmentDoc: JiraProjectDataFragmentDoc,
    JiraLinearMappingFragmentDoc: JiraLinearMappingFragmentDoc,
    JiraSettingsFragmentDoc: JiraSettingsFragmentDoc,
    SentrySettingsFragmentDoc: SentrySettingsFragmentDoc,
    SlackPostSettingsFragmentDoc: SlackPostSettingsFragmentDoc,
    ZendeskSettingsFragmentDoc: ZendeskSettingsFragmentDoc,
    IntegrationSettingsFragmentDoc: IntegrationSettingsFragmentDoc,
    SamlConfigurationFragmentDoc: SamlConfigurationFragmentDoc,
    UserSettingsFragmentDoc: UserSettingsFragmentDoc,
    SubscriptionFragmentDoc: SubscriptionFragmentDoc,
    ApiKeyFragmentDoc: ApiKeyFragmentDoc,
    PageInfoFragmentDoc: PageInfoFragmentDoc,
    ApiKeyConnectionFragmentDoc: ApiKeyConnectionFragmentDoc,
    ApiKeyPayloadFragmentDoc: ApiKeyPayloadFragmentDoc,
    ArchivePayloadFragmentDoc: ArchivePayloadFragmentDoc,
    AttachmentFragmentDoc: AttachmentFragmentDoc,
    AttachmentConnectionFragmentDoc: AttachmentConnectionFragmentDoc,
    AttachmentPayloadFragmentDoc: AttachmentPayloadFragmentDoc,
    AuditEntryFragmentDoc: AuditEntryFragmentDoc,
    AuditEntryConnectionFragmentDoc: AuditEntryConnectionFragmentDoc,
    AuditEntryTypeFragmentDoc: AuditEntryTypeFragmentDoc,
    OrganizationFragmentDoc: OrganizationFragmentDoc,
    AuthResolverResponseFragmentDoc: AuthResolverResponseFragmentDoc,
    InvoiceFragmentDoc: InvoiceFragmentDoc,
    CardFragmentDoc: CardFragmentDoc,
    BillingDetailsPayloadFragmentDoc: BillingDetailsPayloadFragmentDoc,
    BillingEmailPayloadFragmentDoc: BillingEmailPayloadFragmentDoc,
    StepsResponseFragmentDoc: StepsResponseFragmentDoc,
    CollaborationDocumentUpdatePayloadFragmentDoc: CollaborationDocumentUpdatePayloadFragmentDoc,
    CommentFragmentDoc: CommentFragmentDoc,
    CommentConnectionFragmentDoc: CommentConnectionFragmentDoc,
    CommentPayloadFragmentDoc: CommentPayloadFragmentDoc,
    ContactPayloadFragmentDoc: ContactPayloadFragmentDoc,
    CreateCsvExportReportPayloadFragmentDoc: CreateCsvExportReportPayloadFragmentDoc,
    CreateOrJoinOrganizationResponseFragmentDoc: CreateOrJoinOrganizationResponseFragmentDoc,
    CustomViewFragmentDoc: CustomViewFragmentDoc,
    CustomViewConnectionFragmentDoc: CustomViewConnectionFragmentDoc,
    CustomViewPayloadFragmentDoc: CustomViewPayloadFragmentDoc,
    CycleFragmentDoc: CycleFragmentDoc,
    CycleConnectionFragmentDoc: CycleConnectionFragmentDoc,
    CyclePayloadFragmentDoc: CyclePayloadFragmentDoc,
    DebugPayloadFragmentDoc: DebugPayloadFragmentDoc,
    DocumentFragmentDoc: DocumentFragmentDoc,
    DocumentConnectionFragmentDoc: DocumentConnectionFragmentDoc,
    DocumentPayloadFragmentDoc: DocumentPayloadFragmentDoc,
    DocumentVersionFragmentDoc: DocumentVersionFragmentDoc,
    DocumentVersionConnectionFragmentDoc: DocumentVersionConnectionFragmentDoc,
    EmailSubscribePayloadFragmentDoc: EmailSubscribePayloadFragmentDoc,
    EmailUnsubscribePayloadFragmentDoc: EmailUnsubscribePayloadFragmentDoc,
    EmailUserAccountAuthChallengeResponseFragmentDoc: EmailUserAccountAuthChallengeResponseFragmentDoc,
    EmojiFragmentDoc: EmojiFragmentDoc,
    EmojiConnectionFragmentDoc: EmojiConnectionFragmentDoc,
    EmojiPayloadFragmentDoc: EmojiPayloadFragmentDoc,
    EventPayloadFragmentDoc: EventPayloadFragmentDoc,
    FavoriteFragmentDoc: FavoriteFragmentDoc,
    FavoriteConnectionFragmentDoc: FavoriteConnectionFragmentDoc,
    FavoritePayloadFragmentDoc: FavoritePayloadFragmentDoc,
    FeedbackPayloadFragmentDoc: FeedbackPayloadFragmentDoc,
    FigmaEmbedFragmentDoc: FigmaEmbedFragmentDoc,
    FigmaEmbedPayloadFragmentDoc: FigmaEmbedPayloadFragmentDoc,
    FrontAttachmentPayloadFragmentDoc: FrontAttachmentPayloadFragmentDoc,
    GitHubCommitIntegrationPayloadFragmentDoc: GitHubCommitIntegrationPayloadFragmentDoc,
    ImageUploadFromUrlPayloadFragmentDoc: ImageUploadFromUrlPayloadFragmentDoc,
    IntegrationFragmentDoc: IntegrationFragmentDoc,
    IntegrationConnectionFragmentDoc: IntegrationConnectionFragmentDoc,
    IntegrationPayloadFragmentDoc: IntegrationPayloadFragmentDoc,
    CommitPayloadFragmentDoc: CommitPayloadFragmentDoc,
    PullRequestPayloadFragmentDoc: PullRequestPayloadFragmentDoc,
    SentryIssuePayloadFragmentDoc: SentryIssuePayloadFragmentDoc,
    IntegrationResourceDataFragmentDoc: IntegrationResourceDataFragmentDoc,
    IntegrationResourceFragmentDoc: IntegrationResourceFragmentDoc,
    IntegrationResourceConnectionFragmentDoc: IntegrationResourceConnectionFragmentDoc,
    IssueFragmentDoc: IssueFragmentDoc,
    IssueBatchPayloadFragmentDoc: IssueBatchPayloadFragmentDoc,
    IssueConnectionFragmentDoc: IssueConnectionFragmentDoc,
    IssueDescriptionHistoryFragmentDoc: IssueDescriptionHistoryFragmentDoc,
    IssueDescriptionHistoryPayloadFragmentDoc: IssueDescriptionHistoryPayloadFragmentDoc,
    IssueRelationHistoryPayloadFragmentDoc: IssueRelationHistoryPayloadFragmentDoc,
    IssueImportFragmentDoc: IssueImportFragmentDoc,
    IssueHistoryFragmentDoc: IssueHistoryFragmentDoc,
    IssueHistoryConnectionFragmentDoc: IssueHistoryConnectionFragmentDoc,
    IssueImportDeletePayloadFragmentDoc: IssueImportDeletePayloadFragmentDoc,
    IssueImportPayloadFragmentDoc: IssueImportPayloadFragmentDoc,
    IssueLabelFragmentDoc: IssueLabelFragmentDoc,
    IssueLabelConnectionFragmentDoc: IssueLabelConnectionFragmentDoc,
    IssueLabelPayloadFragmentDoc: IssueLabelPayloadFragmentDoc,
    IssuePayloadFragmentDoc: IssuePayloadFragmentDoc,
    IssuePriorityValueFragmentDoc: IssuePriorityValueFragmentDoc,
    IssueRelationFragmentDoc: IssueRelationFragmentDoc,
    IssueRelationConnectionFragmentDoc: IssueRelationConnectionFragmentDoc,
    IssueRelationPayloadFragmentDoc: IssueRelationPayloadFragmentDoc,
    MilestoneFragmentDoc: MilestoneFragmentDoc,
    MilestoneConnectionFragmentDoc: MilestoneConnectionFragmentDoc,
    MilestonePayloadFragmentDoc: MilestonePayloadFragmentDoc,
    NotificationFragmentDoc: NotificationFragmentDoc,
    NotificationConnectionFragmentDoc: NotificationConnectionFragmentDoc,
    NotificationPayloadFragmentDoc: NotificationPayloadFragmentDoc,
    NotificationSubscriptionFragmentDoc: NotificationSubscriptionFragmentDoc,
    NotificationSubscriptionConnectionFragmentDoc: NotificationSubscriptionConnectionFragmentDoc,
    NotificationSubscriptionPayloadFragmentDoc: NotificationSubscriptionPayloadFragmentDoc,
    OauthAuthStringAuthorizePayloadFragmentDoc: OauthAuthStringAuthorizePayloadFragmentDoc,
    OauthAuthStringChallengePayloadFragmentDoc: OauthAuthStringChallengePayloadFragmentDoc,
    OauthAuthStringCheckPayloadFragmentDoc: OauthAuthStringCheckPayloadFragmentDoc,
    OauthClientFragmentDoc: OauthClientFragmentDoc,
    OauthClientPayloadFragmentDoc: OauthClientPayloadFragmentDoc,
    OauthTokenRevokePayloadFragmentDoc: OauthTokenRevokePayloadFragmentDoc,
    OrganizationCancelDeletePayloadFragmentDoc: OrganizationCancelDeletePayloadFragmentDoc,
    OrganizationDeletePayloadFragmentDoc: OrganizationDeletePayloadFragmentDoc,
    OrganizationDomainFragmentDoc: OrganizationDomainFragmentDoc,
    OrganizationDomainPayloadFragmentDoc: OrganizationDomainPayloadFragmentDoc,
    OrganizationDomainSimplePayloadFragmentDoc: OrganizationDomainSimplePayloadFragmentDoc,
    OrganizationExistsPayloadFragmentDoc: OrganizationExistsPayloadFragmentDoc,
    OrganizationInviteFragmentDoc: OrganizationInviteFragmentDoc,
    OrganizationInviteConnectionFragmentDoc: OrganizationInviteConnectionFragmentDoc,
    OrganizationInviteDetailsPayloadFragmentDoc: OrganizationInviteDetailsPayloadFragmentDoc,
    OrganizationInvitePayloadFragmentDoc: OrganizationInvitePayloadFragmentDoc,
    OrganizationPayloadFragmentDoc: OrganizationPayloadFragmentDoc,
    ProjectFragmentDoc: ProjectFragmentDoc,
    ProjectConnectionFragmentDoc: ProjectConnectionFragmentDoc,
    ProjectLinkFragmentDoc: ProjectLinkFragmentDoc,
    ProjectLinkConnectionFragmentDoc: ProjectLinkConnectionFragmentDoc,
    ProjectLinkPayloadFragmentDoc: ProjectLinkPayloadFragmentDoc,
    ProjectPayloadFragmentDoc: ProjectPayloadFragmentDoc,
    PushSubscriptionFragmentDoc: PushSubscriptionFragmentDoc,
    PushSubscriptionConnectionFragmentDoc: PushSubscriptionConnectionFragmentDoc,
    PushSubscriptionPayloadFragmentDoc: PushSubscriptionPayloadFragmentDoc,
    PushSubscriptionTestPayloadFragmentDoc: PushSubscriptionTestPayloadFragmentDoc,
    ReactionFragmentDoc: ReactionFragmentDoc,
    ReactionConnectionFragmentDoc: ReactionConnectionFragmentDoc,
    ReactionPayloadFragmentDoc: ReactionPayloadFragmentDoc,
    RotateSecretPayloadFragmentDoc: RotateSecretPayloadFragmentDoc,
    SsoUrlFromEmailResponseFragmentDoc: SsoUrlFromEmailResponseFragmentDoc,
    SubscriptionPayloadFragmentDoc: SubscriptionPayloadFragmentDoc,
    SubscriptionSessionPayloadFragmentDoc: SubscriptionSessionPayloadFragmentDoc,
    SynchronizedPayloadFragmentDoc: SynchronizedPayloadFragmentDoc,
    TeamFragmentDoc: TeamFragmentDoc,
    TeamConnectionFragmentDoc: TeamConnectionFragmentDoc,
    TeamMembershipFragmentDoc: TeamMembershipFragmentDoc,
    TeamMembershipConnectionFragmentDoc: TeamMembershipConnectionFragmentDoc,
    TeamMembershipPayloadFragmentDoc: TeamMembershipPayloadFragmentDoc,
    TeamPayloadFragmentDoc: TeamPayloadFragmentDoc,
    TemplateConnectionFragmentDoc: TemplateConnectionFragmentDoc,
    TemplatePayloadFragmentDoc: TemplatePayloadFragmentDoc,
    UploadFileHeaderFragmentDoc: UploadFileHeaderFragmentDoc,
    UploadFileFragmentDoc: UploadFileFragmentDoc,
    UploadPayloadFragmentDoc: UploadPayloadFragmentDoc,
    UserAdminPayloadFragmentDoc: UserAdminPayloadFragmentDoc,
    UserConnectionFragmentDoc: UserConnectionFragmentDoc,
    UserPayloadFragmentDoc: UserPayloadFragmentDoc,
    UserSettingsFlagPayloadFragmentDoc: UserSettingsFlagPayloadFragmentDoc,
    UserSettingsFlagsResetPayloadFragmentDoc: UserSettingsFlagsResetPayloadFragmentDoc,
    UserSettingsPayloadFragmentDoc: UserSettingsPayloadFragmentDoc,
    UserSubscribeToNewsletterPayloadFragmentDoc: UserSubscribeToNewsletterPayloadFragmentDoc,
    ViewPreferencesFragmentDoc: ViewPreferencesFragmentDoc,
    ViewPreferencesPayloadFragmentDoc: ViewPreferencesPayloadFragmentDoc,
    WebhookFragmentDoc: WebhookFragmentDoc,
    WebhookConnectionFragmentDoc: WebhookConnectionFragmentDoc,
    WebhookPayloadFragmentDoc: WebhookPayloadFragmentDoc,
    WorkflowStateFragmentDoc: WorkflowStateFragmentDoc,
    WorkflowStateConnectionFragmentDoc: WorkflowStateConnectionFragmentDoc,
    WorkflowStatePayloadFragmentDoc: WorkflowStatePayloadFragmentDoc,
    AdministrableTeamsDocument: AdministrableTeamsDocument,
    ApplicationWithAuthorizationDocument: ApplicationWithAuthorizationDocument,
    AttachmentDocument: AttachmentDocument,
    AttachmentIssueDocument: AttachmentIssueDocument,
    AttachmentIssue_AttachmentsDocument: AttachmentIssue_AttachmentsDocument,
    AttachmentIssue_ChildrenDocument: AttachmentIssue_ChildrenDocument,
    AttachmentIssue_CommentsDocument: AttachmentIssue_CommentsDocument,
    AttachmentIssue_HistoryDocument: AttachmentIssue_HistoryDocument,
    AttachmentIssue_InverseRelationsDocument: AttachmentIssue_InverseRelationsDocument,
    AttachmentIssue_LabelsDocument: AttachmentIssue_LabelsDocument,
    AttachmentIssue_RelationsDocument: AttachmentIssue_RelationsDocument,
    AttachmentIssue_SubscribersDocument: AttachmentIssue_SubscribersDocument,
    AttachmentsDocument: AttachmentsDocument,
    AttachmentsForUrlDocument: AttachmentsForUrlDocument,
    AuditEntriesDocument: AuditEntriesDocument,
    AuditEntryTypesDocument: AuditEntryTypesDocument,
    AuthorizedApplicationsDocument: AuthorizedApplicationsDocument,
    AvailableUsersDocument: AvailableUsersDocument,
    BillingDetailsDocument: BillingDetailsDocument,
    BillingDetails_PaymentMethodDocument: BillingDetails_PaymentMethodDocument,
    CollaborativeDocumentJoinDocument: CollaborativeDocumentJoinDocument,
    CollaborativeDocumentJoin_StepsDocument: CollaborativeDocumentJoin_StepsDocument,
    CommentDocument: CommentDocument,
    CommentsDocument: CommentsDocument,
    CustomViewDocument: CustomViewDocument,
    CustomViewsDocument: CustomViewsDocument,
    CycleDocument: CycleDocument,
    Cycle_IssuesDocument: Cycle_IssuesDocument,
    Cycle_UncompletedIssuesUponCloseDocument: Cycle_UncompletedIssuesUponCloseDocument,
    CyclesDocument: CyclesDocument,
    DocumentDocument: DocumentDocument,
    DocumentsDocument: DocumentsDocument,
    EmojiDocument: EmojiDocument,
    EmojisDocument: EmojisDocument,
    FavoriteDocument: FavoriteDocument,
    Favorite_ChildrenDocument: Favorite_ChildrenDocument,
    FavoritesDocument: FavoritesDocument,
    FigmaEmbedInfoDocument: FigmaEmbedInfoDocument,
    FigmaEmbedInfo_FigmaEmbedDocument: FigmaEmbedInfo_FigmaEmbedDocument,
    IntegrationDocument: IntegrationDocument,
    IntegrationsDocument: IntegrationsDocument,
    IssueDocument: IssueDocument,
    Issue_AttachmentsDocument: Issue_AttachmentsDocument,
    Issue_ChildrenDocument: Issue_ChildrenDocument,
    Issue_CommentsDocument: Issue_CommentsDocument,
    Issue_HistoryDocument: Issue_HistoryDocument,
    Issue_InverseRelationsDocument: Issue_InverseRelationsDocument,
    Issue_LabelsDocument: Issue_LabelsDocument,
    Issue_RelationsDocument: Issue_RelationsDocument,
    Issue_SubscribersDocument: Issue_SubscribersDocument,
    IssueImportFinishGithubOAuthDocument: IssueImportFinishGithubOAuthDocument,
    IssueLabelDocument: IssueLabelDocument,
    IssueLabel_IssuesDocument: IssueLabel_IssuesDocument,
    IssueLabelsDocument: IssueLabelsDocument,
    IssuePriorityValuesDocument: IssuePriorityValuesDocument,
    IssueRelationDocument: IssueRelationDocument,
    IssueRelationsDocument: IssueRelationsDocument,
    IssueSearchDocument: IssueSearchDocument,
    IssuesDocument: IssuesDocument,
    MilestoneDocument: MilestoneDocument,
    Milestone_ProjectsDocument: Milestone_ProjectsDocument,
    MilestonesDocument: MilestonesDocument,
    NotificationDocument: NotificationDocument,
    NotificationSubscriptionDocument: NotificationSubscriptionDocument,
    NotificationSubscriptionsDocument: NotificationSubscriptionsDocument,
    NotificationsDocument: NotificationsDocument,
    OrganizationDocument: OrganizationDocument,
    Organization_IntegrationsDocument: Organization_IntegrationsDocument,
    Organization_LabelsDocument: Organization_LabelsDocument,
    Organization_MilestonesDocument: Organization_MilestonesDocument,
    Organization_TeamsDocument: Organization_TeamsDocument,
    Organization_TemplatesDocument: Organization_TemplatesDocument,
    Organization_UsersDocument: Organization_UsersDocument,
    OrganizationExistsDocument: OrganizationExistsDocument,
    OrganizationInviteDocument: OrganizationInviteDocument,
    OrganizationInviteDetailsDocument: OrganizationInviteDetailsDocument,
    OrganizationInvitesDocument: OrganizationInvitesDocument,
    ProjectDocument: ProjectDocument,
    Project_DocumentsDocument: Project_DocumentsDocument,
    Project_IssuesDocument: Project_IssuesDocument,
    Project_LinksDocument: Project_LinksDocument,
    Project_MembersDocument: Project_MembersDocument,
    Project_TeamsDocument: Project_TeamsDocument,
    ProjectLinkDocument: ProjectLinkDocument,
    ProjectLinksDocument: ProjectLinksDocument,
    ProjectsDocument: ProjectsDocument,
    PushSubscriptionTestDocument: PushSubscriptionTestDocument,
    ReactionDocument: ReactionDocument,
    ReactionsDocument: ReactionsDocument,
    SsoUrlFromEmailDocument: SsoUrlFromEmailDocument,
    SubscriptionDocument: SubscriptionDocument,
    TeamDocument: TeamDocument,
    Team_CyclesDocument: Team_CyclesDocument,
    Team_IssuesDocument: Team_IssuesDocument,
    Team_LabelsDocument: Team_LabelsDocument,
    Team_MembersDocument: Team_MembersDocument,
    Team_MembershipsDocument: Team_MembershipsDocument,
    Team_ProjectsDocument: Team_ProjectsDocument,
    Team_StatesDocument: Team_StatesDocument,
    Team_TemplatesDocument: Team_TemplatesDocument,
    Team_WebhooksDocument: Team_WebhooksDocument,
    TeamMembershipDocument: TeamMembershipDocument,
    TeamMembershipsDocument: TeamMembershipsDocument,
    TeamsDocument: TeamsDocument,
    TemplateDocument: TemplateDocument,
    TemplatesDocument: TemplatesDocument,
    UserDocument: UserDocument,
    User_AssignedIssuesDocument: User_AssignedIssuesDocument,
    User_CreatedIssuesDocument: User_CreatedIssuesDocument,
    User_TeamMembershipsDocument: User_TeamMembershipsDocument,
    User_TeamsDocument: User_TeamsDocument,
    UserSettingsDocument: UserSettingsDocument,
    UsersDocument: UsersDocument,
    ViewerDocument: ViewerDocument,
    Viewer_AssignedIssuesDocument: Viewer_AssignedIssuesDocument,
    Viewer_CreatedIssuesDocument: Viewer_CreatedIssuesDocument,
    Viewer_TeamMembershipsDocument: Viewer_TeamMembershipsDocument,
    Viewer_TeamsDocument: Viewer_TeamsDocument,
    WebhookDocument: WebhookDocument,
    WebhooksDocument: WebhooksDocument,
    WorkflowStateDocument: WorkflowStateDocument,
    WorkflowState_IssuesDocument: WorkflowState_IssuesDocument,
    WorkflowStatesDocument: WorkflowStatesDocument,
    AttachmentArchiveDocument: AttachmentArchiveDocument,
    AttachmentCreateDocument: AttachmentCreateDocument,
    AttachmentDeleteDocument: AttachmentDeleteDocument,
    AttachmentLinkFrontDocument: AttachmentLinkFrontDocument,
    AttachmentLinkIntercomDocument: AttachmentLinkIntercomDocument,
    AttachmentLinkJiraIssueDocument: AttachmentLinkJiraIssueDocument,
    AttachmentLinkUrlDocument: AttachmentLinkUrlDocument,
    AttachmentLinkZendeskDocument: AttachmentLinkZendeskDocument,
    AttachmentUpdateDocument: AttachmentUpdateDocument,
    BillingEmailUpdateDocument: BillingEmailUpdateDocument,
    CollaborativeDocumentUpdateDocument: CollaborativeDocumentUpdateDocument,
    CommentCreateDocument: CommentCreateDocument,
    CommentDeleteDocument: CommentDeleteDocument,
    CommentUpdateDocument: CommentUpdateDocument,
    ContactCreateDocument: ContactCreateDocument,
    CreateCsvExportReportDocument: CreateCsvExportReportDocument,
    CreateOrganizationFromOnboardingDocument: CreateOrganizationFromOnboardingDocument,
    CustomViewCreateDocument: CustomViewCreateDocument,
    CustomViewDeleteDocument: CustomViewDeleteDocument,
    CustomViewUpdateDocument: CustomViewUpdateDocument,
    CycleArchiveDocument: CycleArchiveDocument,
    CycleCreateDocument: CycleCreateDocument,
    CycleUpdateDocument: CycleUpdateDocument,
    DebugFailWithInternalErrorDocument: DebugFailWithInternalErrorDocument,
    DocumentCreateDocument: DocumentCreateDocument,
    DocumentDeleteDocument: DocumentDeleteDocument,
    DocumentUpdateDocument: DocumentUpdateDocument,
    EmailSubscribeDocument: EmailSubscribeDocument,
    EmailTokenUserAccountAuthDocument: EmailTokenUserAccountAuthDocument,
    EmailUnsubscribeDocument: EmailUnsubscribeDocument,
    EmailUserAccountAuthChallengeDocument: EmailUserAccountAuthChallengeDocument,
    EmojiCreateDocument: EmojiCreateDocument,
    EmojiDeleteDocument: EmojiDeleteDocument,
    EventCreateDocument: EventCreateDocument,
    FavoriteCreateDocument: FavoriteCreateDocument,
    FavoriteDeleteDocument: FavoriteDeleteDocument,
    FavoriteUpdateDocument: FavoriteUpdateDocument,
    FeedbackCreateDocument: FeedbackCreateDocument,
    FileUploadDocument: FileUploadDocument,
    GoogleUserAccountAuthDocument: GoogleUserAccountAuthDocument,
    ImageUploadFromUrlDocument: ImageUploadFromUrlDocument,
    IntegrationDeleteDocument: IntegrationDeleteDocument,
    IntegrationFigmaDocument: IntegrationFigmaDocument,
    IntegrationFrontDocument: IntegrationFrontDocument,
    IntegrationGithubCommitCreateDocument: IntegrationGithubCommitCreateDocument,
    IntegrationGithubConnectDocument: IntegrationGithubConnectDocument,
    IntegrationGitlabConnectDocument: IntegrationGitlabConnectDocument,
    IntegrationGoogleSheetsDocument: IntegrationGoogleSheetsDocument,
    IntegrationIntercomDocument: IntegrationIntercomDocument,
    IntegrationIntercomDeleteDocument: IntegrationIntercomDeleteDocument,
    IntegrationIntercomSettingsUpdateDocument: IntegrationIntercomSettingsUpdateDocument,
    IntegrationLoomDocument: IntegrationLoomDocument,
    IntegrationResourceArchiveDocument: IntegrationResourceArchiveDocument,
    IntegrationSentryConnectDocument: IntegrationSentryConnectDocument,
    IntegrationSettingsUpdateDocument: IntegrationSettingsUpdateDocument,
    IntegrationSlackDocument: IntegrationSlackDocument,
    IntegrationSlackImportEmojisDocument: IntegrationSlackImportEmojisDocument,
    IntegrationSlackPersonalDocument: IntegrationSlackPersonalDocument,
    IntegrationSlackPostDocument: IntegrationSlackPostDocument,
    IntegrationSlackProjectPostDocument: IntegrationSlackProjectPostDocument,
    IntegrationZendeskDocument: IntegrationZendeskDocument,
    IssueArchiveDocument: IssueArchiveDocument,
    IssueBatchUpdateDocument: IssueBatchUpdateDocument,
    IssueCreateDocument: IssueCreateDocument,
    IssueDeleteDocument: IssueDeleteDocument,
    IssueImportCreateAsanaDocument: IssueImportCreateAsanaDocument,
    IssueImportCreateClubhouseDocument: IssueImportCreateClubhouseDocument,
    IssueImportCreateGithubDocument: IssueImportCreateGithubDocument,
    IssueImportCreateJiraDocument: IssueImportCreateJiraDocument,
    IssueImportDeleteDocument: IssueImportDeleteDocument,
    IssueImportProcessDocument: IssueImportProcessDocument,
    IssueImportUpdateDocument: IssueImportUpdateDocument,
    IssueLabelArchiveDocument: IssueLabelArchiveDocument,
    IssueLabelCreateDocument: IssueLabelCreateDocument,
    IssueLabelUpdateDocument: IssueLabelUpdateDocument,
    IssueRelationCreateDocument: IssueRelationCreateDocument,
    IssueRelationDeleteDocument: IssueRelationDeleteDocument,
    IssueRelationUpdateDocument: IssueRelationUpdateDocument,
    IssueUnarchiveDocument: IssueUnarchiveDocument,
    IssueUpdateDocument: IssueUpdateDocument,
    JiraIntegrationConnectDocument: JiraIntegrationConnectDocument,
    JoinOrganizationFromOnboardingDocument: JoinOrganizationFromOnboardingDocument,
    LeaveOrganizationDocument: LeaveOrganizationDocument,
    MilestoneCreateDocument: MilestoneCreateDocument,
    MilestoneDeleteDocument: MilestoneDeleteDocument,
    MilestoneUpdateDocument: MilestoneUpdateDocument,
    NotificationArchiveDocument: NotificationArchiveDocument,
    NotificationCreateDocument: NotificationCreateDocument,
    NotificationSubscriptionCreateDocument: NotificationSubscriptionCreateDocument,
    NotificationSubscriptionDeleteDocument: NotificationSubscriptionDeleteDocument,
    NotificationUnarchiveDocument: NotificationUnarchiveDocument,
    NotificationUpdateDocument: NotificationUpdateDocument,
    OauthClientArchiveDocument: OauthClientArchiveDocument,
    OauthClientCreateDocument: OauthClientCreateDocument,
    OauthClientRotateSecretDocument: OauthClientRotateSecretDocument,
    OauthClientUpdateDocument: OauthClientUpdateDocument,
    OauthTokenRevokeDocument: OauthTokenRevokeDocument,
    OrganizationCancelDeleteDocument: OrganizationCancelDeleteDocument,
    OrganizationDeleteDocument: OrganizationDeleteDocument,
    OrganizationDeleteChallengeDocument: OrganizationDeleteChallengeDocument,
    OrganizationDomainCreateDocument: OrganizationDomainCreateDocument,
    OrganizationDomainDeleteDocument: OrganizationDomainDeleteDocument,
    OrganizationDomainVerifyDocument: OrganizationDomainVerifyDocument,
    OrganizationInviteCreateDocument: OrganizationInviteCreateDocument,
    OrganizationInviteDeleteDocument: OrganizationInviteDeleteDocument,
    OrganizationUpdateDocument: OrganizationUpdateDocument,
    ProjectArchiveDocument: ProjectArchiveDocument,
    ProjectCreateDocument: ProjectCreateDocument,
    ProjectLinkCreateDocument: ProjectLinkCreateDocument,
    ProjectLinkDeleteDocument: ProjectLinkDeleteDocument,
    ProjectLinkUpdateDocument: ProjectLinkUpdateDocument,
    ProjectUnarchiveDocument: ProjectUnarchiveDocument,
    ProjectUpdateDocument: ProjectUpdateDocument,
    PushSubscriptionCreateDocument: PushSubscriptionCreateDocument,
    PushSubscriptionDeleteDocument: PushSubscriptionDeleteDocument,
    ReactionCreateDocument: ReactionCreateDocument,
    ReactionDeleteDocument: ReactionDeleteDocument,
    RefreshGoogleSheetsDataDocument: RefreshGoogleSheetsDataDocument,
    ResendOrganizationInviteDocument: ResendOrganizationInviteDocument,
    SamlTokenUserAccountAuthDocument: SamlTokenUserAccountAuthDocument,
    TeamCreateDocument: TeamCreateDocument,
    TeamDeleteDocument: TeamDeleteDocument,
    TeamKeyDeleteDocument: TeamKeyDeleteDocument,
    TeamMembershipCreateDocument: TeamMembershipCreateDocument,
    TeamMembershipDeleteDocument: TeamMembershipDeleteDocument,
    TeamMembershipUpdateDocument: TeamMembershipUpdateDocument,
    TeamUpdateDocument: TeamUpdateDocument,
    TemplateCreateDocument: TemplateCreateDocument,
    TemplateDeleteDocument: TemplateDeleteDocument,
    TemplateUpdateDocument: TemplateUpdateDocument,
    UserDemoteAdminDocument: UserDemoteAdminDocument,
    UserFlagUpdateDocument: UserFlagUpdateDocument,
    UserPromoteAdminDocument: UserPromoteAdminDocument,
    UserSettingsFlagIncrementDocument: UserSettingsFlagIncrementDocument,
    UserSettingsFlagsResetDocument: UserSettingsFlagsResetDocument,
    UserSettingsUpdateDocument: UserSettingsUpdateDocument,
    UserSubscribeToNewsletterDocument: UserSubscribeToNewsletterDocument,
    UserSuspendDocument: UserSuspendDocument,
    UserUnsuspendDocument: UserUnsuspendDocument,
    UserUpdateDocument: UserUpdateDocument,
    ViewPreferencesCreateDocument: ViewPreferencesCreateDocument,
    ViewPreferencesDeleteDocument: ViewPreferencesDeleteDocument,
    ViewPreferencesUpdateDocument: ViewPreferencesUpdateDocument,
    WebhookCreateDocument: WebhookCreateDocument,
    WebhookDeleteDocument: WebhookDeleteDocument,
    WebhookUpdateDocument: WebhookUpdateDocument,
    WorkflowStateArchiveDocument: WorkflowStateArchiveDocument,
    WorkflowStateCreateDocument: WorkflowStateCreateDocument,
    WorkflowStateUpdateDocument: WorkflowStateUpdateDocument
});

/**
 * Base class to provide a request function
 *
 * @param request - function to call the graphql client
 */
class Request {
    constructor(request) {
        this._request = request;
    }
}
/**
 * Default connection variables required for pagination
 * Defaults to 50 as per the Linear API
 */
function defaultConnection(variables) {
    var _a, _b;
    return Object.assign(Object.assign({}, variables), { first: (_a = variables.first) !== null && _a !== void 0 ? _a : (variables.after ? 50 : undefined), last: (_b = variables.last) !== null && _b !== void 0 ? _b : (variables.before ? 50 : undefined) });
}
/**
 * Connection models containing a list of nodes and pagination information
 * Follows the Relay spec
 */
class LinearConnection extends Request {
    constructor(request) {
        super(request);
        this.pageInfo = new PageInfo(request, { hasNextPage: false, hasPreviousPage: false });
        this.nodes = [];
    }
}
/**
 * The base connection class to provide pagination
 * Follows the Relay spec
 *
 * @param request - function to call the graphql client
 * @param fetch - Function to refetch the connection given different pagination variables
 * @param nodes - The list of models to initialize the connection
 * @param pageInfo - The pagination information to initialize the connection
 */
class Connection extends LinearConnection {
    constructor(request, fetch, nodes, pageInfo) {
        super(request);
        this._fetch = fetch;
        this.nodes = nodes;
        this.pageInfo = pageInfo;
    }
    /** Add nodes to the end of the existing nodes */
    _appendNodes(nodes) {
        var _a;
        this.nodes = nodes ? [...((_a = this.nodes) !== null && _a !== void 0 ? _a : []), ...nodes] : this.nodes;
    }
    /** Add nodes to the start of the existing nodes */
    _prependNodes(nodes) {
        var _a;
        this.nodes = nodes ? [...nodes, ...((_a = this.nodes) !== null && _a !== void 0 ? _a : [])] : this.nodes;
    }
    /** Update the pagination end cursor */
    _appendPageInfo(pageInfo) {
        var _a, _b;
        if (this.pageInfo) {
            this.pageInfo.endCursor = (_a = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.endCursor) !== null && _a !== void 0 ? _a : this.pageInfo.startCursor;
            this.pageInfo.hasNextPage = (_b = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.hasNextPage) !== null && _b !== void 0 ? _b : this.pageInfo.hasNextPage;
        }
    }
    /** Update the pagination start cursor */
    _prependPageInfo(pageInfo) {
        var _a, _b;
        if (this.pageInfo) {
            this.pageInfo.startCursor = (_a = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.startCursor) !== null && _a !== void 0 ? _a : this.pageInfo.startCursor;
            this.pageInfo.hasPreviousPage = (_b = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.hasPreviousPage) !== null && _b !== void 0 ? _b : this.pageInfo.hasPreviousPage;
        }
    }
    /** Fetch the next page of results and append to nodes */
    fetchNext() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.pageInfo) === null || _a === void 0 ? void 0 : _a.hasNextPage) {
                const response = yield this._fetch({
                    after: (_b = this.pageInfo) === null || _b === void 0 ? void 0 : _b.endCursor,
                });
                this._appendNodes(response === null || response === void 0 ? void 0 : response.nodes);
                this._appendPageInfo(response === null || response === void 0 ? void 0 : response.pageInfo);
            }
            return Promise.resolve(this);
        });
    }
    /** Fetch the previous page of results and prepend to nodes */
    fetchPrevious() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.pageInfo) === null || _a === void 0 ? void 0 : _a.hasPreviousPage) {
                const response = yield this._fetch({
                    before: (_b = this.pageInfo) === null || _b === void 0 ? void 0 : _b.startCursor,
                });
                this._prependNodes(response === null || response === void 0 ? void 0 : response.nodes);
                this._prependPageInfo(response === null || response === void 0 ? void 0 : response.pageInfo);
            }
            return Promise.resolve(this);
        });
    }
}
/**
 * Function to parse custom scalars into Date types
 *
 * @param value - value to parse
 */
function parseDate(value) {
    try {
        return value ? new Date(value) : undefined;
    }
    catch (e) {
        return undefined;
    }
}
/**
 * Function to parse custom scalars into JSON objects
 *
 * @param value - value to parse
 */
function parseJson(value) {
    try {
        return value ? JSON.parse(value) : undefined;
    }
    catch (e) {
        return undefined;
    }
}
/**
 * An API key. Grants access to the user's resources.
 *
 * @param request - function to call the graphql client
 * @param data - L.ApiKeyFragment response data
 */
class ApiKey extends Request {
    constructor(request, data) {
        var _a, _b, _c;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.id = data.id;
        this.label = data.label;
        this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
    }
}
/**
 * ApiKeyConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this ApiKeyConnection model
 * @param data - ApiKeyConnection response data
 */
class ApiKeyConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new ApiKey(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * ApiKeyPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.ApiKeyPayloadFragment response data
 */
class ApiKeyPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this.apiKey = new ApiKey(request, data.apiKey);
    }
}
/**
 * Public information of the OAuth application.
 *
 * @param request - function to call the graphql client
 * @param data - L.ApplicationFragment response data
 */
class Application extends Request {
    constructor(request, data) {
        var _a, _b;
        super(request);
        this.clientId = data.clientId;
        this.description = (_a = data.description) !== null && _a !== void 0 ? _a : undefined;
        this.developer = data.developer;
        this.developerUrl = data.developerUrl;
        this.imageUrl = (_b = data.imageUrl) !== null && _b !== void 0 ? _b : undefined;
        this.name = data.name;
    }
}
/**
 * ArchivePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.ArchivePayloadFragment response data
 */
class ArchivePayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
    }
}
/**
 * Contains requested archived model objects.
 *
 * @param request - function to call the graphql client
 * @param data - L.ArchiveResponseFragment response data
 */
class ArchiveResponse extends Request {
    constructor(request, data) {
        super(request);
        this.archive = data.archive;
        this.databaseVersion = data.databaseVersion;
        this.totalCount = data.totalCount;
    }
}
/**
 * [Alpha] Issue attachment (e.g. support ticket, pull request).
 *
 * @param request - function to call the graphql client
 * @param data - L.AttachmentFragment response data
 */
class Attachment extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.groupBySource = data.groupBySource;
        this.id = data.id;
        this.metadata = (_c = parseJson(data.metadata)) !== null && _c !== void 0 ? _c : {};
        this.source = (_d = parseJson(data.source)) !== null && _d !== void 0 ? _d : undefined;
        this.sourceType = (_e = parseJson(data.sourceType)) !== null && _e !== void 0 ? _e : undefined;
        this.subtitle = (_f = data.subtitle) !== null && _f !== void 0 ? _f : undefined;
        this.title = data.title;
        this.updatedAt = (_g = parseDate(data.updatedAt)) !== null && _g !== void 0 ? _g : new Date();
        this.url = data.url;
        this._creator = (_h = data.creator) !== null && _h !== void 0 ? _h : undefined;
        this._issue = data.issue;
    }
    /** The creator of the attachment. */
    get creator() {
        var _a, _b;
        return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The issue this attachment belongs to. */
    get issue() {
        return new IssueQuery(this._request).fetch(this._issue.id);
    }
    /** [DEPRECATED] Archives an issue attachment. */
    archive() {
        return new AttachmentArchiveMutation(this._request).fetch(this.id);
    }
    /** [Alpha] Deletes an issue attachment. */
    delete() {
        return new AttachmentDeleteMutation(this._request).fetch(this.id);
    }
    /** [Alpha] Updates an existing issue attachment. */
    update(input) {
        return new AttachmentUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * AttachmentConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this AttachmentConnection model
 * @param data - AttachmentConnection response data
 */
class AttachmentConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new Attachment(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * AttachmentPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.AttachmentPayloadFragment response data
 */
class AttachmentPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._attachment = data.attachment;
    }
    /** The issue attachment that was created. */
    get attachment() {
        return new AttachmentQuery(this._request).fetch(this._attachment.id);
    }
}
/**
 * Workspace audit log entry object.
 *
 * @param request - function to call the graphql client
 * @param data - L.AuditEntryFragment response data
 */
class AuditEntry extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        super(request);
        this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
        this.archivedAt = (_b = parseDate(data.archivedAt)) !== null && _b !== void 0 ? _b : undefined;
        this.countryCode = (_c = data.countryCode) !== null && _c !== void 0 ? _c : undefined;
        this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : new Date();
        this.id = data.id;
        this.ip = (_e = data.ip) !== null && _e !== void 0 ? _e : undefined;
        this.metadata = (_f = parseJson(data.metadata)) !== null && _f !== void 0 ? _f : undefined;
        this.type = data.type;
        this.updatedAt = (_g = parseDate(data.updatedAt)) !== null && _g !== void 0 ? _g : new Date();
        this._actor = (_h = data.actor) !== null && _h !== void 0 ? _h : undefined;
    }
    /** The user that caused the audit entry to be created. */
    get actor() {
        var _a, _b;
        return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
}
/**
 * AuditEntryConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this AuditEntryConnection model
 * @param data - AuditEntryConnection response data
 */
class AuditEntryConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new AuditEntry(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * AuditEntryType model
 *
 * @param request - function to call the graphql client
 * @param data - L.AuditEntryTypeFragment response data
 */
class AuditEntryType extends Request {
    constructor(request, data) {
        super(request);
        this.description = data.description;
        this.type = data.type;
    }
}
/**
 * AuthResolverResponse model
 *
 * @param request - function to call the graphql client
 * @param data - L.AuthResolverResponseFragment response data
 */
class AuthResolverResponse extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d;
        super(request);
        this.allowDomainAccess = (_a = data.allowDomainAccess) !== null && _a !== void 0 ? _a : undefined;
        this.email = (_b = data.email) !== null && _b !== void 0 ? _b : undefined;
        this.id = data.id;
        this.lastUsedOrganizationId = (_c = data.lastUsedOrganizationId) !== null && _c !== void 0 ? _c : undefined;
        this.token = (_d = data.token) !== null && _d !== void 0 ? _d : undefined;
        this.availableOrganizations = data.availableOrganizations
            ? data.availableOrganizations.map(node => new Organization(request, node))
            : undefined;
        this.users = data.users.map(node => new User(request, node));
    }
}
/**
 * Public information of the OAuth application, plus the authorized scopes for a given user.
 *
 * @param request - function to call the graphql client
 * @param data - L.AuthorizedApplicationFragment response data
 */
class AuthorizedApplication extends Request {
    constructor(request, data) {
        var _a, _b;
        super(request);
        this.appId = data.appId;
        this.clientId = data.clientId;
        this.description = (_a = data.description) !== null && _a !== void 0 ? _a : undefined;
        this.developer = data.developer;
        this.developerUrl = data.developerUrl;
        this.imageUrl = (_b = data.imageUrl) !== null && _b !== void 0 ? _b : undefined;
        this.name = data.name;
        this.scope = data.scope;
        this.webhooksEnabled = data.webhooksEnabled;
    }
}
/**
 * BillingDetailsPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.BillingDetailsPayloadFragment response data
 */
class BillingDetailsPayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.email = (_a = data.email) !== null && _a !== void 0 ? _a : undefined;
        this.success = data.success;
        this.paymentMethod = data.paymentMethod ? new Card(request, data.paymentMethod) : undefined;
        this.invoices = data.invoices.map(node => new Invoice(request, node));
    }
}
/**
 * BillingEmailPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.BillingEmailPayloadFragment response data
 */
class BillingEmailPayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.email = (_a = data.email) !== null && _a !== void 0 ? _a : undefined;
        this.success = data.success;
    }
}
/**
 * Card model
 *
 * @param request - function to call the graphql client
 * @param data - L.CardFragment response data
 */
class Card extends Request {
    constructor(request, data) {
        super(request);
        this.brand = data.brand;
        this.last4 = data.last4;
    }
}
/**
 * CollaborationDocumentUpdatePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.CollaborationDocumentUpdatePayloadFragment response data
 */
class CollaborationDocumentUpdatePayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
        this.steps = data.steps ? new StepsResponse(request, data.steps) : undefined;
    }
}
/**
 * A comment associated with an issue.
 *
 * @param request - function to call the graphql client
 * @param data - L.CommentFragment response data
 */
class Comment extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.body = data.body;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.editedAt = (_c = parseDate(data.editedAt)) !== null && _c !== void 0 ? _c : undefined;
        this.id = data.id;
        this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
        this.url = data.url;
        this._issue = data.issue;
        this._user = data.user;
    }
    /** The issue that the comment is associated with. */
    get issue() {
        return new IssueQuery(this._request).fetch(this._issue.id);
    }
    /** The user who wrote the comment. */
    get user() {
        return new UserQuery(this._request).fetch(this._user.id);
    }
    /** Deletes a comment. */
    delete() {
        return new CommentDeleteMutation(this._request).fetch(this.id);
    }
    /** Updates a comment. */
    update(input) {
        return new CommentUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * CommentConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this CommentConnection model
 * @param data - CommentConnection response data
 */
class CommentConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new Comment(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * CommentPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.CommentPayloadFragment response data
 */
class CommentPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._comment = data.comment;
    }
    /** The comment that was created or updated. */
    get comment() {
        return new CommentQuery(this._request).fetch(this._comment.id);
    }
}
/**
 * GitHub's commit data
 *
 * @param request - function to call the graphql client
 * @param data - L.CommitPayloadFragment response data
 */
class CommitPayload extends Request {
    constructor(request, data) {
        super(request);
        this.added = data.added;
        this.id = data.id;
        this.message = data.message;
        this.modified = data.modified;
        this.removed = data.removed;
        this.timestamp = data.timestamp;
        this.url = data.url;
    }
}
/**
 * ContactPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.ContactPayloadFragment response data
 */
class ContactPayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
    }
}
/**
 * CreateCsvExportReportPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.CreateCsvExportReportPayloadFragment response data
 */
class CreateCsvExportReportPayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
    }
}
/**
 * CreateOrJoinOrganizationResponse model
 *
 * @param request - function to call the graphql client
 * @param data - L.CreateOrJoinOrganizationResponseFragment response data
 */
class CreateOrJoinOrganizationResponse extends Request {
    constructor(request, data) {
        super(request);
        this._user = data.user;
    }
    get organization() {
        return new OrganizationQuery(this._request).fetch();
    }
    get user() {
        return new UserQuery(this._request).fetch(this._user.id);
    }
}
/**
 * A custom view that has been saved by a user.
 *
 * @param request - function to call the graphql client
 * @param data - L.CustomViewFragment response data
 */
class CustomView extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
        this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
        this.description = (_d = data.description) !== null && _d !== void 0 ? _d : undefined;
        this.filterData = (_e = parseJson(data.filterData)) !== null && _e !== void 0 ? _e : {};
        this.filters = (_f = parseJson(data.filters)) !== null && _f !== void 0 ? _f : {};
        this.icon = (_g = data.icon) !== null && _g !== void 0 ? _g : undefined;
        this.id = data.id;
        this.name = data.name;
        this.shared = data.shared;
        this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : new Date();
        this._creator = data.creator;
        this._team = (_j = data.team) !== null && _j !== void 0 ? _j : undefined;
    }
    /** The user who created the custom view. */
    get creator() {
        return new UserQuery(this._request).fetch(this._creator.id);
    }
    /** The organization of the custom view. */
    get organization() {
        return new OrganizationQuery(this._request).fetch();
    }
    /** The team associated with the custom view. */
    get team() {
        var _a, _b;
        return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** Deletes a custom view. */
    delete() {
        return new CustomViewDeleteMutation(this._request).fetch(this.id);
    }
    /** Updates a custom view. */
    update(input) {
        return new CustomViewUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * CustomViewConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this CustomViewConnection model
 * @param data - CustomViewConnection response data
 */
class CustomViewConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new CustomView(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * CustomViewPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.CustomViewPayloadFragment response data
 */
class CustomViewPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._customView = data.customView;
    }
    /** The custom view that was created or updated. */
    get customView() {
        return new CustomViewQuery(this._request).fetch(this._customView.id);
    }
}
/**
 * A set of issues to be resolved in a specified amount of time.
 *
 * @param request - function to call the graphql client
 * @param data - L.CycleFragment response data
 */
class Cycle extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.autoArchivedAt = (_b = parseDate(data.autoArchivedAt)) !== null && _b !== void 0 ? _b : undefined;
        this.completedAt = (_c = parseDate(data.completedAt)) !== null && _c !== void 0 ? _c : undefined;
        this.completedIssueCountHistory = data.completedIssueCountHistory;
        this.completedScopeHistory = data.completedScopeHistory;
        this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : new Date();
        this.endsAt = (_e = parseDate(data.endsAt)) !== null && _e !== void 0 ? _e : new Date();
        this.id = data.id;
        this.issueCountHistory = data.issueCountHistory;
        this.name = (_f = data.name) !== null && _f !== void 0 ? _f : undefined;
        this.number = data.number;
        this.progress = data.progress;
        this.scopeHistory = data.scopeHistory;
        this.startsAt = (_g = parseDate(data.startsAt)) !== null && _g !== void 0 ? _g : new Date();
        this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : new Date();
        this._team = data.team;
    }
    /** The team that the cycle is associated with. */
    get team() {
        return new TeamQuery(this._request).fetch(this._team.id);
    }
    /** Issues associated with the cycle. */
    issues(variables) {
        return new Cycle_IssuesQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Issues that weren't completed when the cycle was closed. */
    uncompletedIssuesUponClose(variables) {
        return new Cycle_UncompletedIssuesUponCloseQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Archives a cycle. */
    archive() {
        return new CycleArchiveMutation(this._request).fetch(this.id);
    }
    /** Updates a cycle. */
    update(input) {
        return new CycleUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * CycleConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this CycleConnection model
 * @param data - CycleConnection response data
 */
class CycleConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new Cycle(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * CyclePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.CyclePayloadFragment response data
 */
class CyclePayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._cycle = (_a = data.cycle) !== null && _a !== void 0 ? _a : undefined;
    }
    /** The Cycle that was created or updated. */
    get cycle() {
        var _a, _b;
        return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
}
/**
 * DebugPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.DebugPayloadFragment response data
 */
class DebugPayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
    }
}
/**
 * Contains the requested dependencies.
 *
 * @param request - function to call the graphql client
 * @param data - L.DependencyResponseFragment response data
 */
class DependencyResponse extends Request {
    constructor(request, data) {
        super(request);
        this.dependencies = data.dependencies;
    }
}
/**
 * A document for a project.
 *
 * @param request - function to call the graphql client
 * @param data - L.DocumentFragment response data
 */
class Document extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f, _g;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
        this.content = (_c = data.content) !== null && _c !== void 0 ? _c : undefined;
        this.contentData = (_d = parseJson(data.contentData)) !== null && _d !== void 0 ? _d : undefined;
        this.createdAt = (_e = parseDate(data.createdAt)) !== null && _e !== void 0 ? _e : new Date();
        this.icon = (_f = data.icon) !== null && _f !== void 0 ? _f : undefined;
        this.id = data.id;
        this.slugId = data.slugId;
        this.title = data.title;
        this.updatedAt = (_g = parseDate(data.updatedAt)) !== null && _g !== void 0 ? _g : new Date();
        this._creator = data.creator;
        this._project = data.project;
        this._updatedBy = data.updatedBy;
    }
    /** The user who created the document. */
    get creator() {
        return new UserQuery(this._request).fetch(this._creator.id);
    }
    /** The project that the document is associated with. */
    get project() {
        return new ProjectQuery(this._request).fetch(this._project.id);
    }
    /** The user who last updated the document. */
    get updatedBy() {
        return new UserQuery(this._request).fetch(this._updatedBy.id);
    }
    /** Deletes a document. */
    delete() {
        return new DocumentDeleteMutation(this._request).fetch(this.id);
    }
    /** Updates a document. */
    update(input) {
        return new DocumentUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * DocumentConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this DocumentConnection model
 * @param data - DocumentConnection response data
 */
class DocumentConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new Document(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * DocumentPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.DocumentPayloadFragment response data
 */
class DocumentPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._document = data.document;
    }
    /** The document that was created or updated. */
    get document() {
        return new DocumentQuery(this._request).fetch(this._document.id);
    }
}
/**
 * Collaborative editing steps for documents.
 *
 * @param request - function to call the graphql client
 * @param data - L.DocumentStepFragment response data
 */
class DocumentStep extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.clientId = data.clientId;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.id = data.id;
        this.step = (_c = parseJson(data.step)) !== null && _c !== void 0 ? _c : {};
        this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
        this.version = data.version;
    }
}
/**
 * A version of a document.
 *
 * @param request - function to call the graphql client
 * @param data - L.DocumentVersionFragment response data
 */
class DocumentVersion extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.content = (_b = data.content) !== null && _b !== void 0 ? _b : undefined;
        this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
        this.id = data.id;
        this.revision = data.revision;
        this.title = data.title;
        this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
        this._creator = data.creator;
        this._project = data.project;
    }
    /** The user who created the version. */
    get creator() {
        return new UserQuery(this._request).fetch(this._creator.id);
    }
    /** The project that the document is associated with. */
    get project() {
        return new ProjectQuery(this._request).fetch(this._project.id);
    }
}
/**
 * DocumentVersionConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this DocumentVersionConnection model
 * @param data - DocumentVersionConnection response data
 */
class DocumentVersionConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new DocumentVersion(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * EmailSubscribePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.EmailSubscribePayloadFragment response data
 */
class EmailSubscribePayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
    }
}
/**
 * EmailUnsubscribePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.EmailUnsubscribePayloadFragment response data
 */
class EmailUnsubscribePayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
    }
}
/**
 * EmailUserAccountAuthChallengeResponse model
 *
 * @param request - function to call the graphql client
 * @param data - L.EmailUserAccountAuthChallengeResponseFragment response data
 */
class EmailUserAccountAuthChallengeResponse extends Request {
    constructor(request, data) {
        super(request);
        this.authType = data.authType;
        this.success = data.success;
    }
}
/**
 * A custom emoji.
 *
 * @param request - function to call the graphql client
 * @param data - L.EmojiFragment response data
 */
class Emoji extends Request {
    constructor(request, data) {
        var _a, _b, _c;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.id = data.id;
        this.name = data.name;
        this.source = data.source;
        this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
        this.url = data.url;
        this._creator = data.creator;
    }
    /** The user who created the emoji. */
    get creator() {
        return new UserQuery(this._request).fetch(this._creator.id);
    }
    /** The organization that the emoji belongs to. */
    get organization() {
        return new OrganizationQuery(this._request).fetch();
    }
    /** Deletes an emoji. */
    delete() {
        return new EmojiDeleteMutation(this._request).fetch(this.id);
    }
}
/**
 * EmojiConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this EmojiConnection model
 * @param data - EmojiConnection response data
 */
class EmojiConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new Emoji(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * EmojiPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.EmojiPayloadFragment response data
 */
class EmojiPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._emoji = data.emoji;
    }
    /** The emoji that was created. */
    get emoji() {
        return new EmojiQuery(this._request).fetch(this._emoji.id);
    }
}
/**
 * EventPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.EventPayloadFragment response data
 */
class EventPayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
    }
}
/**
 * User favorites presented in the sidebar.
 *
 * @param request - function to call the graphql client
 * @param data - L.FavoriteFragment response data
 */
class Favorite extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.folderName = (_c = data.folderName) !== null && _c !== void 0 ? _c : undefined;
        this.id = data.id;
        this.sortOrder = data.sortOrder;
        this.type = data.type;
        this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
        this._customView = (_e = data.customView) !== null && _e !== void 0 ? _e : undefined;
        this._cycle = (_f = data.cycle) !== null && _f !== void 0 ? _f : undefined;
        this._document = (_g = data.document) !== null && _g !== void 0 ? _g : undefined;
        this._issue = (_h = data.issue) !== null && _h !== void 0 ? _h : undefined;
        this._label = (_j = data.label) !== null && _j !== void 0 ? _j : undefined;
        this._parent = (_k = data.parent) !== null && _k !== void 0 ? _k : undefined;
        this._project = (_l = data.project) !== null && _l !== void 0 ? _l : undefined;
        this._projectTeam = (_m = data.projectTeam) !== null && _m !== void 0 ? _m : undefined;
        this._user = data.user;
    }
    /** The favorited custom view. */
    get customView() {
        var _a, _b;
        return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The favorited cycle. */
    get cycle() {
        var _a, _b;
        return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The favorited document. */
    get document() {
        var _a, _b;
        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.id) ? new DocumentQuery(this._request).fetch((_b = this._document) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The favorited issue. */
    get issue() {
        var _a, _b;
        return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The favorited label. */
    get label() {
        var _a, _b;
        return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The parent folder of the favorite. */
    get parent() {
        var _a, _b;
        return ((_a = this._parent) === null || _a === void 0 ? void 0 : _a.id) ? new FavoriteQuery(this._request).fetch((_b = this._parent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The favorited project. */
    get project() {
        var _a, _b;
        return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The favorited team of the project. */
    get projectTeam() {
        var _a, _b;
        return ((_a = this._projectTeam) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._projectTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The owner of the favorite. */
    get user() {
        return new UserQuery(this._request).fetch(this._user.id);
    }
    /** Children of the favorite. Only applies to favorites of type folder. */
    children(variables) {
        return new Favorite_ChildrenQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Deletes a favorite reference. */
    delete() {
        return new FavoriteDeleteMutation(this._request).fetch(this.id);
    }
    /** Updates a favorite. */
    update(input) {
        return new FavoriteUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * FavoriteConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this FavoriteConnection model
 * @param data - FavoriteConnection response data
 */
class FavoriteConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new Favorite(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * FavoritePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.FavoritePayloadFragment response data
 */
class FavoritePayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._favorite = data.favorite;
    }
    /** The object that was added as a favorite. */
    get favorite() {
        return new FavoriteQuery(this._request).fetch(this._favorite.id);
    }
}
/**
 * FeedbackPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.FeedbackPayloadFragment response data
 */
class FeedbackPayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
    }
}
/**
 * Object representing Figma preview information.
 *
 * @param request - function to call the graphql client
 * @param data - L.FigmaEmbedFragment response data
 */
class FigmaEmbed extends Request {
    constructor(request, data) {
        var _a, _b, _c;
        super(request);
        this.lastModified = (_a = parseDate(data.lastModified)) !== null && _a !== void 0 ? _a : new Date();
        this.name = data.name;
        this.nodeName = (_b = data.nodeName) !== null && _b !== void 0 ? _b : undefined;
        this.url = (_c = data.url) !== null && _c !== void 0 ? _c : undefined;
    }
}
/**
 * FigmaEmbedPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.FigmaEmbedPayloadFragment response data
 */
class FigmaEmbedPayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
        this.figmaEmbed = data.figmaEmbed ? new FigmaEmbed(request, data.figmaEmbed) : undefined;
    }
}
/**
 * FrontAttachmentPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.FrontAttachmentPayloadFragment response data
 */
class FrontAttachmentPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
    }
}
/**
 * GitHubCommitIntegrationPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.GitHubCommitIntegrationPayloadFragment response data
 */
class GitHubCommitIntegrationPayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this.webhookSecret = data.webhookSecret;
        this._integration = (_a = data.integration) !== null && _a !== void 0 ? _a : undefined;
    }
    /** The integration that was created or updated. */
    get integration() {
        var _a, _b;
        return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
}
/**
 * GitHub OAuth token, plus information about the organizations the user is a member of.
 *
 * @param request - function to call the graphql client
 * @param data - L.GithubOAuthTokenPayloadFragment response data
 */
class GithubOAuthTokenPayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.token = (_a = data.token) !== null && _a !== void 0 ? _a : undefined;
        this.organizations = data.organizations ? data.organizations.map(node => new GithubOrg(request, node)) : undefined;
    }
}
/**
 * Relevant information for the GitHub organization.
 *
 * @param request - function to call the graphql client
 * @param data - L.GithubOrgFragment response data
 */
class GithubOrg extends Request {
    constructor(request, data) {
        super(request);
        this.id = data.id;
        this.login = data.login;
        this.name = data.name;
        this.repositories = data.repositories.map(node => new GithubRepo(request, node));
    }
}
/**
 * Relevant information for the GitHub repository.
 *
 * @param request - function to call the graphql client
 * @param data - L.GithubRepoFragment response data
 */
class GithubRepo extends Request {
    constructor(request, data) {
        super(request);
        this.id = data.id;
        this.name = data.name;
    }
}
/**
 * Google Sheets specific settings.
 *
 * @param request - function to call the graphql client
 * @param data - L.GoogleSheetsSettingsFragment response data
 */
class GoogleSheetsSettings extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.sheetId = data.sheetId;
        this.spreadsheetId = data.spreadsheetId;
        this.spreadsheetUrl = data.spreadsheetUrl;
        this.updatedIssuesAt = (_a = parseDate(data.updatedIssuesAt)) !== null && _a !== void 0 ? _a : new Date();
    }
}
/**
 * ImageUploadFromUrlPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.ImageUploadFromUrlPayloadFragment response data
 */
class ImageUploadFromUrlPayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this.url = (_a = data.url) !== null && _a !== void 0 ? _a : undefined;
    }
}
/**
 * An integration with an external service.
 *
 * @param request - function to call the graphql client
 * @param data - L.IntegrationFragment response data
 */
class Integration extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.id = data.id;
        this.service = data.service;
        this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
        this._creator = data.creator;
        this._team = (_d = data.team) !== null && _d !== void 0 ? _d : undefined;
    }
    /** The user that added the integration. */
    get creator() {
        return new UserQuery(this._request).fetch(this._creator.id);
    }
    /** The organization that the integration is associated with. */
    get organization() {
        return new OrganizationQuery(this._request).fetch();
    }
    /** The team that the integration is associated with. */
    get team() {
        var _a, _b;
        return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** Deletes an integration. */
    delete() {
        return new IntegrationDeleteMutation(this._request).fetch(this.id);
    }
    /** Archives an integration resource. */
    resourceArchive() {
        return new IntegrationResourceArchiveMutation(this._request).fetch(this.id);
    }
    /** [INTERNAL] Updates the integration. */
    settingsUpdate(input) {
        return new IntegrationSettingsUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * IntegrationConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this IntegrationConnection model
 * @param data - IntegrationConnection response data
 */
class IntegrationConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new Integration(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * IntegrationPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.IntegrationPayloadFragment response data
 */
class IntegrationPayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._integration = (_a = data.integration) !== null && _a !== void 0 ? _a : undefined;
    }
    /** The integration that was created or updated. */
    get integration() {
        var _a, _b;
        return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
}
/**
 * An integration resource created by an external service.
 *
 * @param request - function to call the graphql client
 * @param data - L.IntegrationResourceFragment response data
 */
class IntegrationResource extends Request {
    constructor(request, data) {
        var _a, _b, _c;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.id = data.id;
        this.resourceId = data.resourceId;
        this.resourceType = data.resourceType;
        this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
        this.data = new IntegrationResourceData(request, data.data);
        this.pullRequest = new PullRequestPayload(request, data.pullRequest);
        this._integration = data.integration;
        this._issue = data.issue;
    }
    /** The integration that the resource is associated with. */
    get integration() {
        return new IntegrationQuery(this._request).fetch(this._integration.id);
    }
    /** The issue that the resource is associated with. */
    get issue() {
        return new IssueQuery(this._request).fetch(this._issue.id);
    }
    /** Archives an integration resource. */
    archive() {
        return new IntegrationResourceArchiveMutation(this._request).fetch(this.id);
    }
}
/**
 * IntegrationResourceConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this IntegrationResourceConnection model
 * @param data - IntegrationResourceConnection response data
 */
class IntegrationResourceConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new IntegrationResource(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * Integration resource's payload
 *
 * @param request - function to call the graphql client
 * @param data - L.IntegrationResourceDataFragment response data
 */
class IntegrationResourceData extends Request {
    constructor(request, data) {
        super(request);
        this.githubCommit = data.githubCommit ? new CommitPayload(request, data.githubCommit) : undefined;
        this.githubPullRequest = data.githubPullRequest
            ? new PullRequestPayload(request, data.githubPullRequest)
            : undefined;
        this.gitlabMergeRequest = data.gitlabMergeRequest
            ? new PullRequestPayload(request, data.gitlabMergeRequest)
            : undefined;
        this.sentryIssue = data.sentryIssue ? new SentryIssuePayload(request, data.sentryIssue) : undefined;
    }
}
/**
 * The integration resource's settings
 *
 * @param request - function to call the graphql client
 * @param data - L.IntegrationSettingsFragment response data
 */
class IntegrationSettings extends Request {
    constructor(request, data) {
        super(request);
        this.googleSheets = data.googleSheets ? new GoogleSheetsSettings(request, data.googleSheets) : undefined;
        this.intercom = data.intercom ? new IntercomSettings(request, data.intercom) : undefined;
        this.jira = data.jira ? new JiraSettings(request, data.jira) : undefined;
        this.sentry = data.sentry ? new SentrySettings(request, data.sentry) : undefined;
        this.slackPost = data.slackPost ? new SlackPostSettings(request, data.slackPost) : undefined;
        this.slackProjectPost = data.slackProjectPost ? new SlackPostSettings(request, data.slackProjectPost) : undefined;
        this.zendesk = data.zendesk ? new ZendeskSettings(request, data.zendesk) : undefined;
    }
    /** [INTERNAL] Updates the integration. */
    update(id, input) {
        return new IntegrationSettingsUpdateMutation(this._request).fetch(id, input);
    }
}
/**
 * Intercom specific settings.
 *
 * @param request - function to call the graphql client
 * @param data - L.IntercomSettingsFragment response data
 */
class IntercomSettings extends Request {
    constructor(request, data) {
        var _a, _b;
        super(request);
        this.sendNoteOnComment = (_a = data.sendNoteOnComment) !== null && _a !== void 0 ? _a : undefined;
        this.sendNoteOnStatusChange = (_b = data.sendNoteOnStatusChange) !== null && _b !== void 0 ? _b : undefined;
    }
}
/**
 * Invoice model
 *
 * @param request - function to call the graphql client
 * @param data - L.InvoiceFragment response data
 */
class Invoice extends Request {
    constructor(request, data) {
        var _a, _b, _c;
        super(request);
        this.created = (_a = parseDate(data.created)) !== null && _a !== void 0 ? _a : new Date();
        this.dueDate = (_b = data.dueDate) !== null && _b !== void 0 ? _b : undefined;
        this.status = data.status;
        this.total = data.total;
        this.url = (_c = data.url) !== null && _c !== void 0 ? _c : undefined;
    }
}
/**
 * An issue.
 *
 * @param request - function to call the graphql client
 * @param data - L.IssueFragment response data
 */
class Issue extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.autoArchivedAt = (_b = parseDate(data.autoArchivedAt)) !== null && _b !== void 0 ? _b : undefined;
        this.autoClosedAt = (_c = parseDate(data.autoClosedAt)) !== null && _c !== void 0 ? _c : undefined;
        this.boardOrder = data.boardOrder;
        this.branchName = data.branchName;
        this.canceledAt = (_d = parseDate(data.canceledAt)) !== null && _d !== void 0 ? _d : undefined;
        this.completedAt = (_e = parseDate(data.completedAt)) !== null && _e !== void 0 ? _e : undefined;
        this.createdAt = (_f = parseDate(data.createdAt)) !== null && _f !== void 0 ? _f : new Date();
        this.customerTicketCount = data.customerTicketCount;
        this.description = (_g = data.description) !== null && _g !== void 0 ? _g : undefined;
        this.dueDate = (_h = data.dueDate) !== null && _h !== void 0 ? _h : undefined;
        this.estimate = (_j = data.estimate) !== null && _j !== void 0 ? _j : undefined;
        this.id = data.id;
        this.identifier = data.identifier;
        this.number = data.number;
        this.previousIdentifiers = data.previousIdentifiers;
        this.priority = data.priority;
        this.priorityLabel = data.priorityLabel;
        this.snoozedUntilAt = (_k = parseDate(data.snoozedUntilAt)) !== null && _k !== void 0 ? _k : undefined;
        this.sortOrder = data.sortOrder;
        this.startedAt = (_l = parseDate(data.startedAt)) !== null && _l !== void 0 ? _l : undefined;
        this.subIssueSortOrder = (_m = data.subIssueSortOrder) !== null && _m !== void 0 ? _m : undefined;
        this.title = data.title;
        this.trashed = (_o = data.trashed) !== null && _o !== void 0 ? _o : undefined;
        this.updatedAt = (_p = parseDate(data.updatedAt)) !== null && _p !== void 0 ? _p : new Date();
        this.url = data.url;
        this._assignee = (_q = data.assignee) !== null && _q !== void 0 ? _q : undefined;
        this._creator = (_r = data.creator) !== null && _r !== void 0 ? _r : undefined;
        this._cycle = (_s = data.cycle) !== null && _s !== void 0 ? _s : undefined;
        this._parent = (_t = data.parent) !== null && _t !== void 0 ? _t : undefined;
        this._project = (_u = data.project) !== null && _u !== void 0 ? _u : undefined;
        this._snoozedBy = (_v = data.snoozedBy) !== null && _v !== void 0 ? _v : undefined;
        this._state = data.state;
        this._team = data.team;
    }
    /** The user to whom the issue is assigned to. */
    get assignee() {
        var _a, _b;
        return ((_a = this._assignee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._assignee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The user who created the issue. */
    get creator() {
        var _a, _b;
        return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The cycle that the issue is associated with. */
    get cycle() {
        var _a, _b;
        return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The parent of the issue. */
    get parent() {
        var _a, _b;
        return ((_a = this._parent) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._parent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The project that the issue is associated with. */
    get project() {
        var _a, _b;
        return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The user who snoozed the issue. */
    get snoozedBy() {
        var _a, _b;
        return ((_a = this._snoozedBy) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._snoozedBy) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The workflow state that the issue is associated with. */
    get state() {
        return new WorkflowStateQuery(this._request).fetch(this._state.id);
    }
    /** The team that the issue is associated with. */
    get team() {
        return new TeamQuery(this._request).fetch(this._team.id);
    }
    /** Attachments associated with the issue. */
    attachments(variables) {
        return new Issue_AttachmentsQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Children of the issue. */
    children(variables) {
        return new Issue_ChildrenQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Comments associated with the issue. */
    comments(variables) {
        return new Issue_CommentsQuery(this._request, this.id, variables).fetch(variables);
    }
    /** History entries associated with the issue. */
    history(variables) {
        return new Issue_HistoryQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Inverse relations associated with this issue. */
    inverseRelations(variables) {
        return new Issue_InverseRelationsQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Labels associated with this issue. */
    labels(variables) {
        return new Issue_LabelsQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Relations associated with this issue. */
    relations(variables) {
        return new Issue_RelationsQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Users who are subscribed to the issue. */
    subscribers(variables) {
        return new Issue_SubscribersQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Archives an issue. */
    archive(variables) {
        return new IssueArchiveMutation(this._request).fetch(this.id, variables);
    }
    /** Deletes (trashes) an issue. */
    delete() {
        return new IssueDeleteMutation(this._request).fetch(this.id);
    }
    /** Unarchives an issue. */
    unarchive() {
        return new IssueUnarchiveMutation(this._request).fetch(this.id);
    }
    /** Updates an issue. */
    update(input) {
        return new IssueUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * IssueBatchPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.IssueBatchPayloadFragment response data
 */
class IssueBatchPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this.issues = data.issues.map(node => new Issue(request, node));
    }
}
/**
 * IssueConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this IssueConnection model
 * @param data - IssueConnection response data
 */
class IssueConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new Issue(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * IssueDescriptionHistory model
 *
 * @param request - function to call the graphql client
 * @param data - L.IssueDescriptionHistoryFragment response data
 */
class IssueDescriptionHistory extends Request {
    constructor(request, data) {
        var _a, _b;
        super(request);
        this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
        this.descriptionData = data.descriptionData;
        this.id = data.id;
        this.type = data.type;
        this.updatedAt = (_b = parseDate(data.updatedAt)) !== null && _b !== void 0 ? _b : new Date();
    }
}
/**
 * IssueDescriptionHistoryPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.IssueDescriptionHistoryPayloadFragment response data
 */
class IssueDescriptionHistoryPayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
        this.history = data.history ? data.history.map(node => new IssueDescriptionHistory(request, node)) : undefined;
    }
}
/**
 * A record of changes to an issue.
 *
 * @param request - function to call the graphql client
 * @param data - L.IssueHistoryFragment response data
 */
class IssueHistory extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7;
        super(request);
        this.addedLabelIds = (_a = data.addedLabelIds) !== null && _a !== void 0 ? _a : undefined;
        this.archived = (_b = data.archived) !== null && _b !== void 0 ? _b : undefined;
        this.archivedAt = (_c = parseDate(data.archivedAt)) !== null && _c !== void 0 ? _c : undefined;
        this.autoArchived = (_d = data.autoArchived) !== null && _d !== void 0 ? _d : undefined;
        this.autoClosed = (_e = data.autoClosed) !== null && _e !== void 0 ? _e : undefined;
        this.createdAt = (_f = parseDate(data.createdAt)) !== null && _f !== void 0 ? _f : new Date();
        this.fromDueDate = (_g = data.fromDueDate) !== null && _g !== void 0 ? _g : undefined;
        this.fromEstimate = (_h = data.fromEstimate) !== null && _h !== void 0 ? _h : undefined;
        this.fromPriority = (_j = data.fromPriority) !== null && _j !== void 0 ? _j : undefined;
        this.fromTitle = (_k = data.fromTitle) !== null && _k !== void 0 ? _k : undefined;
        this.id = data.id;
        this.removedLabelIds = (_l = data.removedLabelIds) !== null && _l !== void 0 ? _l : undefined;
        this.source = (_m = parseJson(data.source)) !== null && _m !== void 0 ? _m : undefined;
        this.toDueDate = (_o = data.toDueDate) !== null && _o !== void 0 ? _o : undefined;
        this.toEstimate = (_p = data.toEstimate) !== null && _p !== void 0 ? _p : undefined;
        this.toPriority = (_q = data.toPriority) !== null && _q !== void 0 ? _q : undefined;
        this.toTitle = (_r = data.toTitle) !== null && _r !== void 0 ? _r : undefined;
        this.trashed = (_s = data.trashed) !== null && _s !== void 0 ? _s : undefined;
        this.updatedAt = (_t = parseDate(data.updatedAt)) !== null && _t !== void 0 ? _t : new Date();
        this.updatedDescription = (_u = data.updatedDescription) !== null && _u !== void 0 ? _u : undefined;
        this.issueImport = data.issueImport ? new IssueImport(request, data.issueImport) : undefined;
        this.relationChanges = data.relationChanges
            ? data.relationChanges.map(node => new IssueRelationHistoryPayload(request, node))
            : undefined;
        this._actor = (_v = data.actor) !== null && _v !== void 0 ? _v : undefined;
        this._fromAssignee = (_w = data.fromAssignee) !== null && _w !== void 0 ? _w : undefined;
        this._fromCycle = (_x = data.fromCycle) !== null && _x !== void 0 ? _x : undefined;
        this._fromParent = (_y = data.fromParent) !== null && _y !== void 0 ? _y : undefined;
        this._fromProject = (_z = data.fromProject) !== null && _z !== void 0 ? _z : undefined;
        this._fromState = (_0 = data.fromState) !== null && _0 !== void 0 ? _0 : undefined;
        this._fromTeam = (_1 = data.fromTeam) !== null && _1 !== void 0 ? _1 : undefined;
        this._issue = data.issue;
        this._toAssignee = (_2 = data.toAssignee) !== null && _2 !== void 0 ? _2 : undefined;
        this._toCycle = (_3 = data.toCycle) !== null && _3 !== void 0 ? _3 : undefined;
        this._toParent = (_4 = data.toParent) !== null && _4 !== void 0 ? _4 : undefined;
        this._toProject = (_5 = data.toProject) !== null && _5 !== void 0 ? _5 : undefined;
        this._toState = (_6 = data.toState) !== null && _6 !== void 0 ? _6 : undefined;
        this._toTeam = (_7 = data.toTeam) !== null && _7 !== void 0 ? _7 : undefined;
    }
    /** The user who made these changes. If null, possibly means that the change made by an integration. */
    get actor() {
        var _a, _b;
        return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The user from whom the issue was re-assigned from. */
    get fromAssignee() {
        var _a, _b;
        return ((_a = this._fromAssignee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._fromAssignee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The previous cycle of the issue. */
    get fromCycle() {
        var _a, _b;
        return ((_a = this._fromCycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._fromCycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The previous parent of the issue. */
    get fromParent() {
        var _a, _b;
        return ((_a = this._fromParent) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._fromParent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The previous project of the issue. */
    get fromProject() {
        var _a, _b;
        return ((_a = this._fromProject) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._fromProject) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The previous workflow state of the issue. */
    get fromState() {
        var _a, _b;
        return ((_a = this._fromState) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._fromState) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The team from which the issue was moved from. */
    get fromTeam() {
        var _a, _b;
        return ((_a = this._fromTeam) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._fromTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The issue that was changed. */
    get issue() {
        return new IssueQuery(this._request).fetch(this._issue.id);
    }
    /** The user to whom the issue was assigned to. */
    get toAssignee() {
        var _a, _b;
        return ((_a = this._toAssignee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._toAssignee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The new cycle of the issue. */
    get toCycle() {
        var _a, _b;
        return ((_a = this._toCycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._toCycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The new parent of the issue. */
    get toParent() {
        var _a, _b;
        return ((_a = this._toParent) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._toParent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The new project of the issue. */
    get toProject() {
        var _a, _b;
        return ((_a = this._toProject) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._toProject) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The new workflow state of the issue. */
    get toState() {
        var _a, _b;
        return ((_a = this._toState) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._toState) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The team to which the issue was moved to. */
    get toTeam() {
        var _a, _b;
        return ((_a = this._toTeam) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._toTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
}
/**
 * IssueHistoryConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this IssueHistoryConnection model
 * @param data - IssueHistoryConnection response data
 */
class IssueHistoryConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new IssueHistory(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * An import job for data from an external service
 *
 * @param request - function to call the graphql client
 * @param data - L.IssueImportFragment response data
 */
class IssueImport extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.creatorId = data.creatorId;
        this.error = (_c = data.error) !== null && _c !== void 0 ? _c : undefined;
        this.id = data.id;
        this.mapping = (_d = parseJson(data.mapping)) !== null && _d !== void 0 ? _d : undefined;
        this.service = data.service;
        this.status = data.status;
        this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
    }
    /** Deletes an import job. */
    delete(issueImportId) {
        return new IssueImportDeleteMutation(this._request).fetch(issueImportId);
    }
    /** Updates the mapping for the issue import. */
    update(input) {
        return new IssueImportUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * IssueImportDeletePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.IssueImportDeletePayloadFragment response data
 */
class IssueImportDeletePayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this.issueImport = data.issueImport ? new IssueImport(request, data.issueImport) : undefined;
    }
}
/**
 * IssueImportPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.IssueImportPayloadFragment response data
 */
class IssueImportPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this.issueImport = data.issueImport ? new IssueImport(request, data.issueImport) : undefined;
    }
}
/**
 * Labels that can be associated with issues.
 *
 * @param request - function to call the graphql client
 * @param data - L.IssueLabelFragment response data
 */
class IssueLabel extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.color = data.color;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
        this.id = data.id;
        this.name = data.name;
        this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
        this._creator = (_e = data.creator) !== null && _e !== void 0 ? _e : undefined;
        this._team = (_f = data.team) !== null && _f !== void 0 ? _f : undefined;
    }
    /** The user who created the label. */
    get creator() {
        var _a, _b;
        return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    get organization() {
        return new OrganizationQuery(this._request).fetch();
    }
    /** The team that the label is associated with. If null, the label is associated with the global workspace.. */
    get team() {
        var _a, _b;
        return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** Issues associated with the label. */
    issues(variables) {
        return new IssueLabel_IssuesQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Archives an issue label. */
    archive() {
        return new IssueLabelArchiveMutation(this._request).fetch(this.id);
    }
    /** Updates an label. */
    update(input) {
        return new IssueLabelUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * IssueLabelConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this IssueLabelConnection model
 * @param data - IssueLabelConnection response data
 */
class IssueLabelConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new IssueLabel(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * IssueLabelPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.IssueLabelPayloadFragment response data
 */
class IssueLabelPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._issueLabel = data.issueLabel;
    }
    /** The label that was created or updated. */
    get issueLabel() {
        return new IssueLabelQuery(this._request).fetch(this._issueLabel.id);
    }
}
/**
 * IssuePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.IssuePayloadFragment response data
 */
class IssuePayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._issue = (_a = data.issue) !== null && _a !== void 0 ? _a : undefined;
    }
    /** The issue that was created or updated. */
    get issue() {
        var _a, _b;
        return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
}
/**
 * IssuePriorityValue model
 *
 * @param request - function to call the graphql client
 * @param data - L.IssuePriorityValueFragment response data
 */
class IssuePriorityValue extends Request {
    constructor(request, data) {
        super(request);
        this.label = data.label;
        this.priority = data.priority;
    }
}
/**
 * A relation between two issues.
 *
 * @param request - function to call the graphql client
 * @param data - L.IssueRelationFragment response data
 */
class IssueRelation extends Request {
    constructor(request, data) {
        var _a, _b, _c;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.id = data.id;
        this.type = data.type;
        this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
        this._issue = data.issue;
        this._relatedIssue = data.relatedIssue;
    }
    /** The issue whose relationship is being described. */
    get issue() {
        return new IssueQuery(this._request).fetch(this._issue.id);
    }
    /** The related issue. */
    get relatedIssue() {
        return new IssueQuery(this._request).fetch(this._relatedIssue.id);
    }
    /** Deletes an issue relation. */
    delete() {
        return new IssueRelationDeleteMutation(this._request).fetch(this.id);
    }
    /** Updates an issue relation. */
    update(input) {
        return new IssueRelationUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * IssueRelationConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this IssueRelationConnection model
 * @param data - IssueRelationConnection response data
 */
class IssueRelationConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new IssueRelation(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * Issue relation history's payload
 *
 * @param request - function to call the graphql client
 * @param data - L.IssueRelationHistoryPayloadFragment response data
 */
class IssueRelationHistoryPayload extends Request {
    constructor(request, data) {
        super(request);
        this.identifier = data.identifier;
        this.type = data.type;
    }
}
/**
 * IssueRelationPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.IssueRelationPayloadFragment response data
 */
class IssueRelationPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._issueRelation = data.issueRelation;
    }
    /** The issue relation that was created or updated. */
    get issueRelation() {
        return new IssueRelationQuery(this._request).fetch(this._issueRelation.id);
    }
}
/**
 * Tuple for mapping Jira projects to Linear teams.
 *
 * @param request - function to call the graphql client
 * @param data - L.JiraLinearMappingFragment response data
 */
class JiraLinearMapping extends Request {
    constructor(request, data) {
        super(request);
        this.jiraProjectId = data.jiraProjectId;
        this.linearTeamId = data.linearTeamId;
    }
}
/**
 * Metadata about a Jira project.
 *
 * @param request - function to call the graphql client
 * @param data - L.JiraProjectDataFragment response data
 */
class JiraProjectData extends Request {
    constructor(request, data) {
        super(request);
        this.id = data.id;
        this.key = data.key;
        this.name = data.name;
    }
}
/**
 * Jira specific settings.
 *
 * @param request - function to call the graphql client
 * @param data - L.JiraSettingsFragment response data
 */
class JiraSettings extends Request {
    constructor(request, data) {
        super(request);
        this.projectMapping = data.projectMapping
            ? data.projectMapping.map(node => new JiraLinearMapping(request, node))
            : undefined;
        this.projects = data.projects.map(node => new JiraProjectData(request, node));
    }
}
/**
 * A milestone that contains projects.
 *
 * @param request - function to call the graphql client
 * @param data - L.MilestoneFragment response data
 */
class Milestone extends Request {
    constructor(request, data) {
        var _a, _b, _c;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.id = data.id;
        this.name = data.name;
        this.sortOrder = data.sortOrder;
        this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
    }
    /** The organization that the milestone belongs to. */
    get organization() {
        return new OrganizationQuery(this._request).fetch();
    }
    /** Projects associated with the milestone. */
    projects(variables) {
        return new Milestone_ProjectsQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Deletes a milestone. */
    delete() {
        return new MilestoneDeleteMutation(this._request).fetch(this.id);
    }
    /** Updates a milestone. */
    update(input) {
        return new MilestoneUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * MilestoneConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this MilestoneConnection model
 * @param data - MilestoneConnection response data
 */
class MilestoneConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new Milestone(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * MilestonePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.MilestonePayloadFragment response data
 */
class MilestonePayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._milestone = (_a = data.milestone) !== null && _a !== void 0 ? _a : undefined;
    }
    /** The milesteone that was created or updated. */
    get milestone() {
        var _a, _b;
        return ((_a = this._milestone) === null || _a === void 0 ? void 0 : _a.id) ? new MilestoneQuery(this._request).fetch((_b = this._milestone) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
}
/**
 * A notification sent to a user.
 *
 * @param request - function to call the graphql client
 * @param data - L.NotificationFragment response data
 */
class Notification extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.emailedAt = (_c = parseDate(data.emailedAt)) !== null && _c !== void 0 ? _c : undefined;
        this.id = data.id;
        this.reactionEmoji = (_d = data.reactionEmoji) !== null && _d !== void 0 ? _d : undefined;
        this.readAt = (_e = parseDate(data.readAt)) !== null && _e !== void 0 ? _e : undefined;
        this.snoozedUntilAt = (_f = parseDate(data.snoozedUntilAt)) !== null && _f !== void 0 ? _f : undefined;
        this.type = data.type;
        this.updatedAt = (_g = parseDate(data.updatedAt)) !== null && _g !== void 0 ? _g : new Date();
        this._comment = (_h = data.comment) !== null && _h !== void 0 ? _h : undefined;
        this._issue = data.issue;
        this._team = data.team;
        this._user = data.user;
    }
    /** The comment which the notification is associated with. */
    get comment() {
        var _a, _b;
        return ((_a = this._comment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch((_b = this._comment) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The issue that the notification is associated with. */
    get issue() {
        return new IssueQuery(this._request).fetch(this._issue.id);
    }
    /** The team which the notification is associated with. */
    get team() {
        return new TeamQuery(this._request).fetch(this._team.id);
    }
    /** The recipient of the notification. */
    get user() {
        return new UserQuery(this._request).fetch(this._user.id);
    }
    /** Archives a notification. */
    archive() {
        return new NotificationArchiveMutation(this._request).fetch(this.id);
    }
    /** Unarchives a notification. */
    unarchive() {
        return new NotificationUnarchiveMutation(this._request).fetch(this.id);
    }
    /** Updates a notification. */
    update(input) {
        return new NotificationUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * NotificationConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this NotificationConnection model
 * @param data - NotificationConnection response data
 */
class NotificationConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new Notification(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * NotificationPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.NotificationPayloadFragment response data
 */
class NotificationPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._notification = data.notification;
    }
    /** The notification that was created or updated. */
    get notification() {
        return new NotificationQuery(this._request).fetch(this._notification.id);
    }
}
/**
 * Notification subscriptions for models.
 *
 * @param request - function to call the graphql client
 * @param data - L.NotificationSubscriptionFragment response data
 */
class NotificationSubscription extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.id = data.id;
        this.type = data.type;
        this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
        this._project = (_d = data.project) !== null && _d !== void 0 ? _d : undefined;
        this._team = (_e = data.team) !== null && _e !== void 0 ? _e : undefined;
        this._user = data.user;
    }
    /** Subscribed project. */
    get project() {
        var _a, _b;
        return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** Subscribed team. */
    get team() {
        var _a, _b;
        return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The user associated with notification subscriptions. */
    get user() {
        return new UserQuery(this._request).fetch(this._user.id);
    }
    /** Deletes a notification subscription reference. */
    delete() {
        return new NotificationSubscriptionDeleteMutation(this._request).fetch(this.id);
    }
}
/**
 * NotificationSubscriptionConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this NotificationSubscriptionConnection model
 * @param data - NotificationSubscriptionConnection response data
 */
class NotificationSubscriptionConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new NotificationSubscription(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * NotificationSubscriptionPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.NotificationSubscriptionPayloadFragment response data
 */
class NotificationSubscriptionPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._notificationSubscription = data.notificationSubscription;
    }
    /** The notification subscription that was created or updated. */
    get notificationSubscription() {
        return new NotificationSubscriptionQuery(this._request).fetch(this._notificationSubscription.id);
    }
}
/**
 * OauthAuthStringAuthorizePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.OauthAuthStringAuthorizePayloadFragment response data
 */
class OauthAuthStringAuthorizePayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
    }
}
/**
 * OauthAuthStringChallengePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.OauthAuthStringChallengePayloadFragment response data
 */
class OauthAuthStringChallengePayload extends Request {
    constructor(request, data) {
        super(request);
        this.authString = data.authString;
        this.success = data.success;
    }
}
/**
 * OauthAuthStringCheckPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.OauthAuthStringCheckPayloadFragment response data
 */
class OauthAuthStringCheckPayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.success = data.success;
        this.token = (_a = data.token) !== null && _a !== void 0 ? _a : undefined;
    }
}
/**
 * OAuth2 client application
 *
 * @param request - function to call the graphql client
 * @param data - L.OauthClientFragment response data
 */
class OauthClient extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.clientId = data.clientId;
        this.clientSecret = data.clientSecret;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.description = data.description;
        this.developer = data.developer;
        this.developerUrl = data.developerUrl;
        this.id = data.id;
        this.imageUrl = data.imageUrl;
        this.name = data.name;
        this.publicEnabled = data.publicEnabled;
        this.redirectUris = data.redirectUris;
        this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
        this.webhookResourceTypes = data.webhookResourceTypes;
        this.webhookUrl = (_d = data.webhookUrl) !== null && _d !== void 0 ? _d : undefined;
    }
    /** Archives an OAuth client. */
    archive() {
        return new OauthClientArchiveMutation(this._request).fetch(this.id);
    }
    /** Updates an OAuth client. */
    rotateSecret() {
        return new OauthClientRotateSecretMutation(this._request).fetch(this.id);
    }
    /** Updates an OAuth client. */
    update(input) {
        return new OauthClientUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * OauthClientPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.OauthClientPayloadFragment response data
 */
class OauthClientPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this.oauthClient = new OauthClient(request, data.oauthClient);
    }
}
/**
 * OauthTokenRevokePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.OauthTokenRevokePayloadFragment response data
 */
class OauthTokenRevokePayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
    }
}
/**
 * An organization. Organizations are root-level objects that contain user accounts and teams.
 *
 * @param request - function to call the graphql client
 * @param data - L.OrganizationFragment response data
 */
class Organization extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f;
        super(request);
        this.allowedAuthServices = data.allowedAuthServices;
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.createdIssueCount = data.createdIssueCount;
        this.deletionRequestedAt = (_c = parseDate(data.deletionRequestedAt)) !== null && _c !== void 0 ? _c : undefined;
        this.gitBranchFormat = (_d = data.gitBranchFormat) !== null && _d !== void 0 ? _d : undefined;
        this.gitLinkbackMessagesEnabled = data.gitLinkbackMessagesEnabled;
        this.gitPublicLinkbackMessagesEnabled = data.gitPublicLinkbackMessagesEnabled;
        this.id = data.id;
        this.logoUrl = (_e = data.logoUrl) !== null && _e !== void 0 ? _e : undefined;
        this.name = data.name;
        this.periodUploadVolume = data.periodUploadVolume;
        this.roadmapEnabled = data.roadmapEnabled;
        this.samlEnabled = data.samlEnabled;
        this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
        this.urlKey = data.urlKey;
        this.userCount = data.userCount;
    }
    /** The organization's subscription to a paid plan. */
    get subscription() {
        return new SubscriptionQuery(this._request).fetch();
    }
    /** Integrations associated with the organization. */
    integrations(variables) {
        return new Organization_IntegrationsQuery(this._request, variables).fetch(variables);
    }
    /** Labels associated with the organization. */
    labels(variables) {
        return new Organization_LabelsQuery(this._request, variables).fetch(variables);
    }
    /** Milestones associated with the organization. */
    milestones(variables) {
        return new Organization_MilestonesQuery(this._request, variables).fetch(variables);
    }
    /** Teams associated with the organization. */
    teams(variables) {
        return new Organization_TeamsQuery(this._request, variables).fetch(variables);
    }
    /** Templates associated with the organization. */
    templates(variables) {
        return new Organization_TemplatesQuery(this._request, variables).fetch(variables);
    }
    /** Users associated with the organization. */
    users(variables) {
        return new Organization_UsersQuery(this._request, variables).fetch(variables);
    }
    /** Delete's an organization. Administrator privileges required. */
    delete(input) {
        return new OrganizationDeleteMutation(this._request).fetch(input);
    }
    /** Updates the user's organization. */
    update(input) {
        return new OrganizationUpdateMutation(this._request).fetch(input);
    }
}
/**
 * OrganizationCancelDeletePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.OrganizationCancelDeletePayloadFragment response data
 */
class OrganizationCancelDeletePayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
    }
}
/**
 * OrganizationDeletePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.OrganizationDeletePayloadFragment response data
 */
class OrganizationDeletePayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
    }
}
/**
 * Defines the use of a domain by an organization.
 *
 * @param request - function to call the graphql client
 * @param data - L.OrganizationDomainFragment response data
 */
class OrganizationDomain extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.id = data.id;
        this.name = data.name;
        this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
        this.verificationEmail = (_d = data.verificationEmail) !== null && _d !== void 0 ? _d : undefined;
        this.verified = data.verified;
        this._creator = (_e = data.creator) !== null && _e !== void 0 ? _e : undefined;
    }
    /** The user who added the domain. */
    get creator() {
        var _a, _b;
        return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** Deletes a domain. */
    delete() {
        return new OrganizationDomainDeleteMutation(this._request).fetch(this.id);
    }
}
/**
 * OrganizationDomainPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.OrganizationDomainPayloadFragment response data
 */
class OrganizationDomainPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this.organizationDomain = new OrganizationDomain(request, data.organizationDomain);
    }
}
/**
 * OrganizationDomainSimplePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.OrganizationDomainSimplePayloadFragment response data
 */
class OrganizationDomainSimplePayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
    }
}
/**
 * OrganizationExistsPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.OrganizationExistsPayloadFragment response data
 */
class OrganizationExistsPayload extends Request {
    constructor(request, data) {
        super(request);
        this.exists = data.exists;
        this.success = data.success;
    }
}
/**
 * An invitation to the organization that has been sent via email.
 *
 * @param request - function to call the graphql client
 * @param data - L.OrganizationInviteFragment response data
 */
class OrganizationInvite extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f;
        super(request);
        this.acceptedAt = (_a = parseDate(data.acceptedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.archivedAt = (_b = parseDate(data.archivedAt)) !== null && _b !== void 0 ? _b : undefined;
        this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
        this.email = data.email;
        this.expiresAt = (_d = parseDate(data.expiresAt)) !== null && _d !== void 0 ? _d : undefined;
        this.external = data.external;
        this.id = data.id;
        this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
        this._invitee = (_f = data.invitee) !== null && _f !== void 0 ? _f : undefined;
        this._inviter = data.inviter;
    }
    /** The user who has accepted the invite. Null, if the invite hasn't been accepted. */
    get invitee() {
        var _a, _b;
        return ((_a = this._invitee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._invitee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The user who created the invitation. */
    get inviter() {
        return new UserQuery(this._request).fetch(this._inviter.id);
    }
    /** The organization that the invite is associated with. */
    get organization() {
        return new OrganizationQuery(this._request).fetch();
    }
    /** Deletes an organization invite. */
    delete() {
        return new OrganizationInviteDeleteMutation(this._request).fetch(this.id);
    }
}
/**
 * OrganizationInviteConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this OrganizationInviteConnection model
 * @param data - OrganizationInviteConnection response data
 */
class OrganizationInviteConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new OrganizationInvite(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * OrganizationInviteDetailsPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.OrganizationInviteDetailsPayloadFragment response data
 */
class OrganizationInviteDetailsPayload extends Request {
    constructor(request, data) {
        var _a, _b;
        super(request);
        this.accepted = data.accepted;
        this.createdAt = (_a = parseDate(data.createdAt)) !== null && _a !== void 0 ? _a : new Date();
        this.email = data.email;
        this.expired = data.expired;
        this.inviter = data.inviter;
        this.organizationId = data.organizationId;
        this.organizationLogoUrl = (_b = data.organizationLogoUrl) !== null && _b !== void 0 ? _b : undefined;
        this.organizationName = data.organizationName;
    }
}
/**
 * OrganizationInvitePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.OrganizationInvitePayloadFragment response data
 */
class OrganizationInvitePayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._organizationInvite = data.organizationInvite;
    }
    /** The organization invite that was created or updated. */
    get organizationInvite() {
        return new OrganizationInviteQuery(this._request).fetch(this._organizationInvite.id);
    }
}
/**
 * OrganizationPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.OrganizationPayloadFragment response data
 */
class OrganizationPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
    }
    /** The organization that was created or updated. */
    get organization() {
        return new OrganizationQuery(this._request).fetch();
    }
}
/**
 * PageInfo model
 *
 * @param request - function to call the graphql client
 * @param data - L.PageInfoFragment response data
 */
class PageInfo extends Request {
    constructor(request, data) {
        var _a, _b;
        super(request);
        this.endCursor = (_a = data.endCursor) !== null && _a !== void 0 ? _a : undefined;
        this.hasNextPage = data.hasNextPage;
        this.hasPreviousPage = data.hasPreviousPage;
        this.startCursor = (_b = data.startCursor) !== null && _b !== void 0 ? _b : undefined;
    }
}
/**
 * A project.
 *
 * @param request - function to call the graphql client
 * @param data - L.ProjectFragment response data
 */
class Project extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.autoArchivedAt = (_b = parseDate(data.autoArchivedAt)) !== null && _b !== void 0 ? _b : undefined;
        this.canceledAt = (_c = parseDate(data.canceledAt)) !== null && _c !== void 0 ? _c : undefined;
        this.color = data.color;
        this.completedAt = (_d = parseDate(data.completedAt)) !== null && _d !== void 0 ? _d : undefined;
        this.completedIssueCountHistory = data.completedIssueCountHistory;
        this.completedScopeHistory = data.completedScopeHistory;
        this.createdAt = (_e = parseDate(data.createdAt)) !== null && _e !== void 0 ? _e : new Date();
        this.description = data.description;
        this.icon = (_f = data.icon) !== null && _f !== void 0 ? _f : undefined;
        this.id = data.id;
        this.issueCountHistory = data.issueCountHistory;
        this.name = data.name;
        this.progress = data.progress;
        this.scopeHistory = data.scopeHistory;
        this.slackIssueComments = data.slackIssueComments;
        this.slackIssueStatuses = data.slackIssueStatuses;
        this.slackNewIssue = data.slackNewIssue;
        this.slugId = data.slugId;
        this.sortOrder = data.sortOrder;
        this.startedAt = (_g = parseDate(data.startedAt)) !== null && _g !== void 0 ? _g : undefined;
        this.state = data.state;
        this.targetDate = (_h = data.targetDate) !== null && _h !== void 0 ? _h : undefined;
        this.updatedAt = (_j = parseDate(data.updatedAt)) !== null && _j !== void 0 ? _j : new Date();
        this.url = data.url;
        this._creator = data.creator;
        this._lead = (_k = data.lead) !== null && _k !== void 0 ? _k : undefined;
        this._milestone = (_l = data.milestone) !== null && _l !== void 0 ? _l : undefined;
    }
    /** The user who created the project. */
    get creator() {
        return new UserQuery(this._request).fetch(this._creator.id);
    }
    /** The project lead. */
    get lead() {
        var _a, _b;
        return ((_a = this._lead) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._lead) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The milestone that this project is associated with. */
    get milestone() {
        var _a, _b;
        return ((_a = this._milestone) === null || _a === void 0 ? void 0 : _a.id) ? new MilestoneQuery(this._request).fetch((_b = this._milestone) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** Documents associated with the project. */
    documents(variables) {
        return new Project_DocumentsQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Issues associated with the project. */
    issues(variables) {
        return new Project_IssuesQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Links associated with the project. */
    links(variables) {
        return new Project_LinksQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Users that are members of the project. */
    members(variables) {
        return new Project_MembersQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Teams associated with this project. */
    teams(variables) {
        return new Project_TeamsQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Archives a project. */
    archive() {
        return new ProjectArchiveMutation(this._request).fetch(this.id);
    }
    /** Unarchives a project. */
    unarchive() {
        return new ProjectUnarchiveMutation(this._request).fetch(this.id);
    }
    /** Updates a project. */
    update(input) {
        return new ProjectUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * ProjectConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this ProjectConnection model
 * @param data - ProjectConnection response data
 */
class ProjectConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new Project(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * An external link for a project.
 *
 * @param request - function to call the graphql client
 * @param data - L.ProjectLinkFragment response data
 */
class ProjectLink extends Request {
    constructor(request, data) {
        var _a, _b, _c;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.id = data.id;
        this.label = data.label;
        this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
        this.url = data.url;
        this._creator = data.creator;
        this._project = data.project;
    }
    /** The user who created the link. */
    get creator() {
        return new UserQuery(this._request).fetch(this._creator.id);
    }
    /** The project that the link is associated with. */
    get project() {
        return new ProjectQuery(this._request).fetch(this._project.id);
    }
    /** Deletes a project link. */
    delete() {
        return new ProjectLinkDeleteMutation(this._request).fetch(this.id);
    }
    /** Updates a project link. */
    update(input) {
        return new ProjectLinkUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * ProjectLinkConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this ProjectLinkConnection model
 * @param data - ProjectLinkConnection response data
 */
class ProjectLinkConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new ProjectLink(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * ProjectLinkPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.ProjectLinkPayloadFragment response data
 */
class ProjectLinkPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._projectLink = data.projectLink;
    }
    /** The project that was created or updated. */
    get projectLink() {
        return new ProjectLinkQuery(this._request).fetch(this._projectLink.id);
    }
}
/**
 * ProjectPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.ProjectPayloadFragment response data
 */
class ProjectPayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._project = (_a = data.project) !== null && _a !== void 0 ? _a : undefined;
    }
    /** The project that was created or updated. */
    get project() {
        var _a, _b;
        return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
}
/**
 * Pull request data
 *
 * @param request - function to call the graphql client
 * @param data - L.PullRequestPayloadFragment response data
 */
class PullRequestPayload extends Request {
    constructor(request, data) {
        super(request);
        this.branch = data.branch;
        this.closedAt = data.closedAt;
        this.createdAt = data.createdAt;
        this.draft = data.draft;
        this.id = data.id;
        this.mergedAt = data.mergedAt;
        this.number = data.number;
        this.repoLogin = data.repoLogin;
        this.repoName = data.repoName;
        this.status = data.status;
        this.title = data.title;
        this.updatedAt = data.updatedAt;
        this.url = data.url;
        this.userId = data.userId;
        this.userLogin = data.userLogin;
    }
}
/**
 * A user's web browser push notification subscription.
 *
 * @param request - function to call the graphql client
 * @param data - L.PushSubscriptionFragment response data
 */
class PushSubscription extends Request {
    constructor(request, data) {
        var _a, _b, _c;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.id = data.id;
        this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
    }
    /** Deletes a push subscription. */
    delete() {
        return new PushSubscriptionDeleteMutation(this._request).fetch(this.id);
    }
}
/**
 * PushSubscriptionConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this PushSubscriptionConnection model
 * @param data - PushSubscriptionConnection response data
 */
class PushSubscriptionConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new PushSubscription(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * PushSubscriptionPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.PushSubscriptionPayloadFragment response data
 */
class PushSubscriptionPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
    }
}
/**
 * PushSubscriptionTestPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.PushSubscriptionTestPayloadFragment response data
 */
class PushSubscriptionTestPayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
    }
}
/**
 * A reaction associated with a comment.
 *
 * @param request - function to call the graphql client
 * @param data - L.ReactionFragment response data
 */
class Reaction extends Request {
    constructor(request, data) {
        var _a, _b, _c;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.emoji = data.emoji;
        this.id = data.id;
        this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
        this._comment = data.comment;
        this._user = data.user;
    }
    /** The comment that the reaction is associated with. */
    get comment() {
        return new CommentQuery(this._request).fetch(this._comment.id);
    }
    /** The user who reacted. */
    get user() {
        return new UserQuery(this._request).fetch(this._user.id);
    }
    /** Deletes a reaction. */
    delete() {
        return new ReactionDeleteMutation(this._request).fetch(this.id);
    }
}
/**
 * ReactionConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this ReactionConnection model
 * @param data - ReactionConnection response data
 */
class ReactionConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new Reaction(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * ReactionPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.ReactionPayloadFragment response data
 */
class ReactionPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._reaction = data.reaction;
    }
    get reaction() {
        return new ReactionQuery(this._request).fetch(this._reaction.id);
    }
}
/**
 * RotateSecretPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.RotateSecretPayloadFragment response data
 */
class RotateSecretPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
    }
}
/**
 * The integration resource's settings
 *
 * @param request - function to call the graphql client
 * @param data - L.SamlConfigurationFragment response data
 */
class SamlConfiguration extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f;
        super(request);
        this.allowedDomains = (_a = data.allowedDomains) !== null && _a !== void 0 ? _a : undefined;
        this.issuerEntityId = (_b = data.issuerEntityId) !== null && _b !== void 0 ? _b : undefined;
        this.ssoBinding = (_c = data.ssoBinding) !== null && _c !== void 0 ? _c : undefined;
        this.ssoEndpoint = (_d = data.ssoEndpoint) !== null && _d !== void 0 ? _d : undefined;
        this.ssoSignAlgo = (_e = data.ssoSignAlgo) !== null && _e !== void 0 ? _e : undefined;
        this.ssoSigningCert = (_f = data.ssoSigningCert) !== null && _f !== void 0 ? _f : undefined;
    }
}
/**
 * Sentry issue data
 *
 * @param request - function to call the graphql client
 * @param data - L.SentryIssuePayloadFragment response data
 */
class SentryIssuePayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.actorId = data.actorId;
        this.actorName = data.actorName;
        this.actorType = data.actorType;
        this.firstSeen = data.firstSeen;
        this.firstVersion = (_a = data.firstVersion) !== null && _a !== void 0 ? _a : undefined;
        this.issueId = data.issueId;
        this.issueTitle = data.issueTitle;
        this.projectId = data.projectId;
        this.projectSlug = data.projectSlug;
        this.shortId = data.shortId;
        this.webUrl = data.webUrl;
    }
}
/**
 * Sentry specific settings.
 *
 * @param request - function to call the graphql client
 * @param data - L.SentrySettingsFragment response data
 */
class SentrySettings extends Request {
    constructor(request, data) {
        super(request);
        this.organizationSlug = data.organizationSlug;
    }
}
/**
 * Slack notification specific settings.
 *
 * @param request - function to call the graphql client
 * @param data - L.SlackPostSettingsFragment response data
 */
class SlackPostSettings extends Request {
    constructor(request, data) {
        super(request);
        this.channel = data.channel;
        this.channelId = data.channelId;
        this.configurationUrl = data.configurationUrl;
    }
}
/**
 * SsoUrlFromEmailResponse model
 *
 * @param request - function to call the graphql client
 * @param data - L.SsoUrlFromEmailResponseFragment response data
 */
class SsoUrlFromEmailResponse extends Request {
    constructor(request, data) {
        super(request);
        this.samlSsoUrl = data.samlSsoUrl;
        this.success = data.success;
    }
}
/**
 * StepsResponse model
 *
 * @param request - function to call the graphql client
 * @param data - L.StepsResponseFragment response data
 */
class StepsResponse extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.clientIds = data.clientIds;
        this.steps = (_a = data.steps) !== null && _a !== void 0 ? _a : undefined;
        this.version = data.version;
    }
}
/**
 * The subscription of an organization.
 *
 * @param request - function to call the graphql client
 * @param data - L.SubscriptionFragment response data
 */
class Subscription extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f, _g;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.canceledAt = (_b = parseDate(data.canceledAt)) !== null && _b !== void 0 ? _b : undefined;
        this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
        this.id = data.id;
        this.nextBillingAt = (_d = parseDate(data.nextBillingAt)) !== null && _d !== void 0 ? _d : undefined;
        this.pendingChangeType = (_e = data.pendingChangeType) !== null && _e !== void 0 ? _e : undefined;
        this.seats = data.seats;
        this.type = data.type;
        this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
        this._creator = (_g = data.creator) !== null && _g !== void 0 ? _g : undefined;
    }
    /** The creator of the subscription. */
    get creator() {
        var _a, _b;
        return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The organization that the subscription is associated with. */
    get organization() {
        return new OrganizationQuery(this._request).fetch();
    }
}
/**
 * SubscriptionPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.SubscriptionPayloadFragment response data
 */
class SubscriptionPayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.canceledAt = (_a = parseDate(data.canceledAt)) !== null && _a !== void 0 ? _a : undefined;
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
    }
    /** The subscription entity being mutated. */
    get subscription() {
        return new SubscriptionQuery(this._request).fetch();
    }
}
/**
 * SubscriptionSessionPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.SubscriptionSessionPayloadFragment response data
 */
class SubscriptionSessionPayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.session = (_a = data.session) !== null && _a !== void 0 ? _a : undefined;
    }
}
/**
 * Contains the requested relations.
 *
 * @param request - function to call the graphql client
 * @param data - L.SyncBatchResponseFragment response data
 */
class SyncBatchResponse extends Request {
    constructor(request, data) {
        super(request);
        this.models = data.models;
    }
}
/**
 * Contains a delta sync.
 *
 * @param request - function to call the graphql client
 * @param data - L.SyncDeltaResponseFragment response data
 */
class SyncDeltaResponse extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.loadMore = data.loadMore;
        this.success = data.success;
        this.updates = (_a = data.updates) !== null && _a !== void 0 ? _a : undefined;
    }
}
/**
 * Contains either the full serialized state of the application or delta packets that the requester can
 *   apply to the local data set in order to be up-to-date.
 *
 * @param request - function to call the graphql client
 * @param data - L.SyncResponseFragment response data
 */
class SyncResponse extends Request {
    constructor(request, data) {
        var _a, _b;
        super(request);
        this.databaseVersion = data.databaseVersion;
        this.delta = (_a = data.delta) !== null && _a !== void 0 ? _a : undefined;
        this.lastSyncId = data.lastSyncId;
        this.state = (_b = data.state) !== null && _b !== void 0 ? _b : undefined;
        this.subscribedSyncGroups = data.subscribedSyncGroups;
    }
}
/**
 * SynchronizedPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.SynchronizedPayloadFragment response data
 */
class SynchronizedPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
    }
}
/**
 * An organizational unit that contains issues.
 *
 * @param request - function to call the graphql client
 * @param data - L.TeamFragment response data
 */
class Team extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.autoArchivePeriod = data.autoArchivePeriod;
        this.autoClosePeriod = (_b = data.autoClosePeriod) !== null && _b !== void 0 ? _b : undefined;
        this.autoCloseStateId = (_c = data.autoCloseStateId) !== null && _c !== void 0 ? _c : undefined;
        this.color = (_d = data.color) !== null && _d !== void 0 ? _d : undefined;
        this.createdAt = (_e = parseDate(data.createdAt)) !== null && _e !== void 0 ? _e : new Date();
        this.cycleCalenderUrl = data.cycleCalenderUrl;
        this.cycleCooldownTime = data.cycleCooldownTime;
        this.cycleDuration = data.cycleDuration;
        this.cycleIssueAutoAssignCompleted = data.cycleIssueAutoAssignCompleted;
        this.cycleIssueAutoAssignStarted = data.cycleIssueAutoAssignStarted;
        this.cycleLockToActive = data.cycleLockToActive;
        this.cycleStartDay = data.cycleStartDay;
        this.cyclesEnabled = data.cyclesEnabled;
        this.defaultIssueEstimate = data.defaultIssueEstimate;
        this.defaultTemplateForMembersId = (_f = data.defaultTemplateForMembersId) !== null && _f !== void 0 ? _f : undefined;
        this.defaultTemplateForNonMembersId = (_g = data.defaultTemplateForNonMembersId) !== null && _g !== void 0 ? _g : undefined;
        this.description = (_h = data.description) !== null && _h !== void 0 ? _h : undefined;
        this.groupIssueHistory = data.groupIssueHistory;
        this.icon = (_j = data.icon) !== null && _j !== void 0 ? _j : undefined;
        this.id = data.id;
        this.inviteHash = data.inviteHash;
        this.issueEstimationAllowZero = data.issueEstimationAllowZero;
        this.issueEstimationExtended = data.issueEstimationExtended;
        this.issueEstimationType = data.issueEstimationType;
        this.issueOrderingNoPriorityFirst = data.issueOrderingNoPriorityFirst;
        this.key = data.key;
        this.name = data.name;
        this.private = data.private;
        this.slackIssueComments = data.slackIssueComments;
        this.slackIssueStatuses = data.slackIssueStatuses;
        this.slackNewIssue = data.slackNewIssue;
        this.timezone = data.timezone;
        this.triageEnabled = data.triageEnabled;
        this.upcomingCycleCount = data.upcomingCycleCount;
        this.updatedAt = (_k = parseDate(data.updatedAt)) !== null && _k !== void 0 ? _k : new Date();
        this._activeCycle = (_l = data.activeCycle) !== null && _l !== void 0 ? _l : undefined;
        this._defaultIssueState = (_m = data.defaultIssueState) !== null && _m !== void 0 ? _m : undefined;
        this._defaultTemplateForMembers = (_o = data.defaultTemplateForMembers) !== null && _o !== void 0 ? _o : undefined;
        this._defaultTemplateForNonMembers = (_p = data.defaultTemplateForNonMembers) !== null && _p !== void 0 ? _p : undefined;
        this._draftWorkflowState = (_q = data.draftWorkflowState) !== null && _q !== void 0 ? _q : undefined;
        this._markedAsDuplicateWorkflowState = (_r = data.markedAsDuplicateWorkflowState) !== null && _r !== void 0 ? _r : undefined;
        this._mergeWorkflowState = (_s = data.mergeWorkflowState) !== null && _s !== void 0 ? _s : undefined;
        this._reviewWorkflowState = (_t = data.reviewWorkflowState) !== null && _t !== void 0 ? _t : undefined;
        this._startWorkflowState = (_u = data.startWorkflowState) !== null && _u !== void 0 ? _u : undefined;
        this._triageIssueState = (_v = data.triageIssueState) !== null && _v !== void 0 ? _v : undefined;
    }
    /** Team's currently active cycle. */
    get activeCycle() {
        var _a, _b;
        return ((_a = this._activeCycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._activeCycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The default workflow state into which issues are set when they are opened by team members. */
    get defaultIssueState() {
        var _a, _b;
        return ((_a = this._defaultIssueState) === null || _a === void 0 ? void 0 : _a.id)
            ? new WorkflowStateQuery(this._request).fetch((_b = this._defaultIssueState) === null || _b === void 0 ? void 0 : _b.id)
            : undefined;
    }
    /** The default template to use for new issues created by members of the team. */
    get defaultTemplateForMembers() {
        var _a, _b;
        return ((_a = this._defaultTemplateForMembers) === null || _a === void 0 ? void 0 : _a.id)
            ? new TemplateQuery(this._request).fetch((_b = this._defaultTemplateForMembers) === null || _b === void 0 ? void 0 : _b.id)
            : undefined;
    }
    /** The default template to use for new issues created by non-members of the team. */
    get defaultTemplateForNonMembers() {
        var _a, _b;
        return ((_a = this._defaultTemplateForNonMembers) === null || _a === void 0 ? void 0 : _a.id)
            ? new TemplateQuery(this._request).fetch((_b = this._defaultTemplateForNonMembers) === null || _b === void 0 ? void 0 : _b.id)
            : undefined;
    }
    /** The workflow state into which issues are moved when a PR has been opened as draft. */
    get draftWorkflowState() {
        var _a, _b;
        return ((_a = this._draftWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
            ? new WorkflowStateQuery(this._request).fetch((_b = this._draftWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
            : undefined;
    }
    /** The workflow state into which issues are moved when they are marked as a duplicate of another issue. Defaults to the first canceled state. */
    get markedAsDuplicateWorkflowState() {
        var _a, _b;
        return ((_a = this._markedAsDuplicateWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
            ? new WorkflowStateQuery(this._request).fetch((_b = this._markedAsDuplicateWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
            : undefined;
    }
    /** The workflow state into which issues are moved when a PR has been merged. */
    get mergeWorkflowState() {
        var _a, _b;
        return ((_a = this._mergeWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
            ? new WorkflowStateQuery(this._request).fetch((_b = this._mergeWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
            : undefined;
    }
    /** The organization that the team is associated with. */
    get organization() {
        return new OrganizationQuery(this._request).fetch();
    }
    /** The workflow state into which issues are moved when a review has been requested for the PR. */
    get reviewWorkflowState() {
        var _a, _b;
        return ((_a = this._reviewWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
            ? new WorkflowStateQuery(this._request).fetch((_b = this._reviewWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
            : undefined;
    }
    /** The workflow state into which issues are moved when a PR has been opened. */
    get startWorkflowState() {
        var _a, _b;
        return ((_a = this._startWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
            ? new WorkflowStateQuery(this._request).fetch((_b = this._startWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
            : undefined;
    }
    /** The workflow state into which issues are set when they are opened by non-team members or integrations if triage is enabled. */
    get triageIssueState() {
        var _a, _b;
        return ((_a = this._triageIssueState) === null || _a === void 0 ? void 0 : _a.id)
            ? new WorkflowStateQuery(this._request).fetch((_b = this._triageIssueState) === null || _b === void 0 ? void 0 : _b.id)
            : undefined;
    }
    /** Cycles associated with the team. */
    cycles(variables) {
        return new Team_CyclesQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Issues associated with the team. */
    issues(variables) {
        return new Team_IssuesQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Labels associated with the team. */
    labels(variables) {
        return new Team_LabelsQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Users who are members of this team. */
    members(variables) {
        return new Team_MembersQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Memberships associated with the team. For easier access of the same data, use `members` query. */
    memberships(variables) {
        return new Team_MembershipsQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Projects associated with the team. */
    projects(variables) {
        return new Team_ProjectsQuery(this._request, this.id, variables).fetch(variables);
    }
    /** The states that define the workflow associated with the team. */
    states(variables) {
        return new Team_StatesQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Templates associated with the team. */
    templates(variables) {
        return new Team_TemplatesQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Webhooks associated with the team. */
    webhooks(variables) {
        return new Team_WebhooksQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Deletes a team. */
    delete() {
        return new TeamDeleteMutation(this._request).fetch(this.id);
    }
    /** Updates a team. */
    update(input) {
        return new TeamUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * TeamConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this TeamConnection model
 * @param data - TeamConnection response data
 */
class TeamConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new Team(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * Defines the membership of a user to a team.
 *
 * @param request - function to call the graphql client
 * @param data - L.TeamMembershipFragment response data
 */
class TeamMembership extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.id = data.id;
        this.owner = (_c = data.owner) !== null && _c !== void 0 ? _c : undefined;
        this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
        this._team = data.team;
        this._user = data.user;
    }
    /** The team that the membership is associated with. */
    get team() {
        return new TeamQuery(this._request).fetch(this._team.id);
    }
    /** The user that the membership is associated with. */
    get user() {
        return new UserQuery(this._request).fetch(this._user.id);
    }
    /** Deletes a team membership. */
    delete() {
        return new TeamMembershipDeleteMutation(this._request).fetch(this.id);
    }
    /** Updates a team membership. */
    update(input) {
        return new TeamMembershipUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * TeamMembershipConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this TeamMembershipConnection model
 * @param data - TeamMembershipConnection response data
 */
class TeamMembershipConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new TeamMembership(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * TeamMembershipPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.TeamMembershipPayloadFragment response data
 */
class TeamMembershipPayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._teamMembership = (_a = data.teamMembership) !== null && _a !== void 0 ? _a : undefined;
    }
    /** The team membership that was created or updated. */
    get teamMembership() {
        var _a, _b;
        return ((_a = this._teamMembership) === null || _a === void 0 ? void 0 : _a.id)
            ? new TeamMembershipQuery(this._request).fetch((_b = this._teamMembership) === null || _b === void 0 ? void 0 : _b.id)
            : undefined;
    }
}
/**
 * TeamPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.TeamPayloadFragment response data
 */
class TeamPayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._team = (_a = data.team) !== null && _a !== void 0 ? _a : undefined;
    }
    /** The team that was created or updated. */
    get team() {
        var _a, _b;
        return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
}
/**
 * A template object used for creating entities faster.
 *
 * @param request - function to call the graphql client
 * @param data - L.TemplateFragment response data
 */
class Template extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f, _g;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
        this.id = data.id;
        this.name = data.name;
        this.templateData = (_d = parseJson(data.templateData)) !== null && _d !== void 0 ? _d : {};
        this.type = data.type;
        this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
        this._creator = (_f = data.creator) !== null && _f !== void 0 ? _f : undefined;
        this._team = (_g = data.team) !== null && _g !== void 0 ? _g : undefined;
    }
    /** The user who created the template. */
    get creator() {
        var _a, _b;
        return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The organization that the template is associated with. If null, the template is associated with a particular team. */
    get organization() {
        return new OrganizationQuery(this._request).fetch();
    }
    /** The team that the template is associated with. If null, the template is global to the workspace. */
    get team() {
        var _a, _b;
        return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** Deletes a template. */
    delete() {
        return new TemplateDeleteMutation(this._request).fetch(this.id);
    }
    /** Updates an existing template. */
    update(input) {
        return new TemplateUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * TemplateConnection model
 *
 * @param request - function to call the graphql client
 * @param data - L.TemplateConnectionFragment response data
 */
class TemplateConnection extends Request {
    constructor(request, data) {
        super(request);
        this.pageInfo = new PageInfo(request, data.pageInfo);
    }
    get nodes() {
        return new TemplatesQuery(this._request).fetch();
    }
}
/**
 * TemplatePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.TemplatePayloadFragment response data
 */
class TemplatePayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._template = data.template;
    }
    /** The template that was created or updated. */
    get template() {
        return new TemplateQuery(this._request).fetch(this._template.id);
    }
}
/**
 * Object representing Google Cloud upload policy, plus additional data.
 *
 * @param request - function to call the graphql client
 * @param data - L.UploadFileFragment response data
 */
class UploadFile extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.assetUrl = data.assetUrl;
        this.contentType = data.contentType;
        this.filename = data.filename;
        this.metaData = (_a = parseJson(data.metaData)) !== null && _a !== void 0 ? _a : undefined;
        this.size = data.size;
        this.uploadUrl = data.uploadUrl;
        this.headers = data.headers.map(node => new UploadFileHeader(request, node));
    }
}
/**
 * UploadFileHeader model
 *
 * @param request - function to call the graphql client
 * @param data - L.UploadFileHeaderFragment response data
 */
class UploadFileHeader extends Request {
    constructor(request, data) {
        super(request);
        this.key = data.key;
        this.value = data.value;
    }
}
/**
 * UploadPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.UploadPayloadFragment response data
 */
class UploadPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this.uploadFile = data.uploadFile ? new UploadFile(request, data.uploadFile) : undefined;
    }
}
/**
 * A user that has access to the the resources of an organization.
 *
 * @param request - function to call the graphql client
 * @param data - L.UserFragment response data
 */
class User extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        super(request);
        this.active = data.active;
        this.admin = data.admin;
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.avatarUrl = (_b = data.avatarUrl) !== null && _b !== void 0 ? _b : undefined;
        this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
        this.createdIssueCount = data.createdIssueCount;
        this.description = (_d = data.description) !== null && _d !== void 0 ? _d : undefined;
        this.disableReason = (_e = data.disableReason) !== null && _e !== void 0 ? _e : undefined;
        this.displayName = data.displayName;
        this.email = data.email;
        this.id = data.id;
        this.inviteHash = data.inviteHash;
        this.isMe = data.isMe;
        this.lastSeen = (_f = parseDate(data.lastSeen)) !== null && _f !== void 0 ? _f : undefined;
        this.name = data.name;
        this.statusEmoji = (_g = data.statusEmoji) !== null && _g !== void 0 ? _g : undefined;
        this.statusLabel = (_h = data.statusLabel) !== null && _h !== void 0 ? _h : undefined;
        this.statusUntilAt = (_j = parseDate(data.statusUntilAt)) !== null && _j !== void 0 ? _j : undefined;
        this.timezone = (_k = data.timezone) !== null && _k !== void 0 ? _k : undefined;
        this.updatedAt = (_l = parseDate(data.updatedAt)) !== null && _l !== void 0 ? _l : new Date();
        this.url = data.url;
    }
    /** Organization the user belongs to. */
    get organization() {
        return new OrganizationQuery(this._request).fetch();
    }
    /** Issues assigned to the user. */
    assignedIssues(variables) {
        return new User_AssignedIssuesQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Issues created by the user. */
    createdIssues(variables) {
        return new User_CreatedIssuesQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Memberships associated with the user. For easier access of the same data, use `teams` query. */
    teamMemberships(variables) {
        return new User_TeamMembershipsQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Teams the user is part of. */
    teams(variables) {
        return new User_TeamsQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Updates the user's settings. */
    settingsUpdate(input) {
        return new UserSettingsUpdateMutation(this._request).fetch(this.id, input);
    }
    /** Suspends a user. Can only be called by an admin. */
    suspend() {
        return new UserSuspendMutation(this._request).fetch(this.id);
    }
    /** Un-suspends a user. Can only be called by an admin. */
    unsuspend() {
        return new UserUnsuspendMutation(this._request).fetch(this.id);
    }
    /** Updates a user. Only available to organization admins and the user themselves. */
    update(input) {
        return new UserUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * A user account.
 *
 * @param request - function to call the graphql client
 * @param data - L.UserAccountFragment response data
 */
class UserAccount extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.email = data.email;
        this.id = data.id;
        this.name = (_c = data.name) !== null && _c !== void 0 ? _c : undefined;
        this.service = data.service;
        this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
        this.users = data.users.map(node => new User(request, node));
    }
}
/**
 * UserAdminPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.UserAdminPayloadFragment response data
 */
class UserAdminPayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
    }
}
/**
 * Public information of the OAuth application, plus whether the application has been authorized for the given scopes.
 *
 * @param request - function to call the graphql client
 * @param data - L.UserAuthorizedApplicationFragment response data
 */
class UserAuthorizedApplication extends Request {
    constructor(request, data) {
        var _a, _b;
        super(request);
        this.clientId = data.clientId;
        this.createdByLinear = data.createdByLinear;
        this.description = (_a = data.description) !== null && _a !== void 0 ? _a : undefined;
        this.developer = data.developer;
        this.developerUrl = data.developerUrl;
        this.imageUrl = (_b = data.imageUrl) !== null && _b !== void 0 ? _b : undefined;
        this.isAuthorized = data.isAuthorized;
        this.name = data.name;
        this.webhooksEnabled = data.webhooksEnabled;
    }
}
/**
 * UserConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this UserConnection model
 * @param data - UserConnection response data
 */
class UserConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new User(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * UserPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.UserPayloadFragment response data
 */
class UserPayload extends Request {
    constructor(request, data) {
        var _a;
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._user = (_a = data.user) !== null && _a !== void 0 ? _a : undefined;
    }
    /** The user that was created or updated. */
    get user() {
        var _a, _b;
        return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
}
/**
 * The settings of a user as a JSON object.
 *
 * @param request - function to call the graphql client
 * @param data - L.UserSettingsFragment response data
 */
class UserSettings extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.id = data.id;
        this.notificationPreferences = (_c = parseJson(data.notificationPreferences)) !== null && _c !== void 0 ? _c : {};
        this.unsubscribedFrom = data.unsubscribedFrom;
        this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
        this._user = data.user;
    }
    /** The user associated with these settings. */
    get user() {
        return new UserQuery(this._request).fetch(this._user.id);
    }
    /** Updates the user's settings. */
    update(input) {
        return new UserSettingsUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * UserSettingsFlagPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.UserSettingsFlagPayloadFragment response data
 */
class UserSettingsFlagPayload extends Request {
    constructor(request, data) {
        super(request);
        this.flag = data.flag;
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this.value = data.value;
    }
}
/**
 * UserSettingsFlagsResetPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.UserSettingsFlagsResetPayloadFragment response data
 */
class UserSettingsFlagsResetPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
    }
}
/**
 * UserSettingsPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.UserSettingsPayloadFragment response data
 */
class UserSettingsPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
    }
    /** The user's settings. */
    get userSettings() {
        return new UserSettingsQuery(this._request).fetch();
    }
}
/**
 * UserSubscribeToNewsletterPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.UserSubscribeToNewsletterPayloadFragment response data
 */
class UserSubscribeToNewsletterPayload extends Request {
    constructor(request, data) {
        super(request);
        this.success = data.success;
    }
}
/**
 * View preferences.
 *
 * @param request - function to call the graphql client
 * @param data - L.ViewPreferencesFragment response data
 */
class ViewPreferences extends Request {
    constructor(request, data) {
        var _a, _b, _c;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.id = data.id;
        this.type = data.type;
        this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
        this.viewType = data.viewType;
    }
    /** Deletes a ViewPreferences. */
    delete() {
        return new ViewPreferencesDeleteMutation(this._request).fetch(this.id);
    }
    /** Updates an existing ViewPreferences object. */
    update(input) {
        return new ViewPreferencesUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * ViewPreferencesPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.ViewPreferencesPayloadFragment response data
 */
class ViewPreferencesPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this.viewPreferences = new ViewPreferences(request, data.viewPreferences);
    }
}
/**
 * A webhook used to send HTTP notifications over data updates
 *
 * @param request - function to call the graphql client
 * @param data - L.WebhookFragment response data
 */
class Webhook extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d, _e, _f;
        super(request);
        this.allPublicTeams = data.allPublicTeams;
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.enabled = data.enabled;
        this.id = data.id;
        this.label = data.label;
        this.resourceTypes = data.resourceTypes;
        this.secret = (_c = data.secret) !== null && _c !== void 0 ? _c : undefined;
        this.teamIds = data.teamIds;
        this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
        this.url = (_e = data.url) !== null && _e !== void 0 ? _e : undefined;
        this._creator = (_f = data.creator) !== null && _f !== void 0 ? _f : undefined;
        this._team = data.team;
    }
    /** The user who created the webhook. */
    get creator() {
        var _a, _b;
        return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
    }
    /** The team that the webhook is associated with. */
    get team() {
        return new TeamQuery(this._request).fetch(this._team.id);
    }
    /** Deletes a Webhook. */
    delete() {
        return new WebhookDeleteMutation(this._request).fetch(this.id);
    }
    /** Updates an existing Webhook. */
    update(input) {
        return new WebhookUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * WebhookConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this WebhookConnection model
 * @param data - WebhookConnection response data
 */
class WebhookConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new Webhook(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * WebhookPayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.WebhookPayloadFragment response data
 */
class WebhookPayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._webhook = data.webhook;
    }
    /** The webhook entity being mutated. */
    get webhook() {
        return new WebhookQuery(this._request).fetch(this._webhook.id);
    }
}
/**
 * A state in a team workflow.
 *
 * @param request - function to call the graphql client
 * @param data - L.WorkflowStateFragment response data
 */
class WorkflowState extends Request {
    constructor(request, data) {
        var _a, _b, _c, _d;
        super(request);
        this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
        this.color = data.color;
        this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
        this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
        this.id = data.id;
        this.name = data.name;
        this.position = data.position;
        this.type = data.type;
        this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
        this._team = data.team;
    }
    /** The team to which this state belongs to. */
    get team() {
        return new TeamQuery(this._request).fetch(this._team.id);
    }
    /** Issues belonging in this state. */
    issues(variables) {
        return new WorkflowState_IssuesQuery(this._request, this.id, variables).fetch(variables);
    }
    /** Archives a state. Only states with issues that have all been archived can be archived. */
    archive() {
        return new WorkflowStateArchiveMutation(this._request).fetch(this.id);
    }
    /** Updates a state. */
    update(input) {
        return new WorkflowStateUpdateMutation(this._request).fetch(this.id, input);
    }
}
/**
 * WorkflowStateConnection model
 *
 * @param request - function to call the graphql client
 * @param fetch - function to trigger a refetch of this WorkflowStateConnection model
 * @param data - WorkflowStateConnection response data
 */
class WorkflowStateConnection extends Connection {
    constructor(request, fetch, data) {
        super(request, fetch, data.nodes.map(node => new WorkflowState(request, node)), new PageInfo(request, data.pageInfo));
    }
}
/**
 * WorkflowStatePayload model
 *
 * @param request - function to call the graphql client
 * @param data - L.WorkflowStatePayloadFragment response data
 */
class WorkflowStatePayload extends Request {
    constructor(request, data) {
        super(request);
        this.lastSyncId = data.lastSyncId;
        this.success = data.success;
        this._workflowState = data.workflowState;
    }
    /** The state that was created or updated. */
    get workflowState() {
        return new WorkflowStateQuery(this._request).fetch(this._workflowState.id);
    }
}
/**
 * Zendesk specific settings.
 *
 * @param request - function to call the graphql client
 * @param data - L.ZendeskSettingsFragment response data
 */
class ZendeskSettings extends Request {
    constructor(request, data) {
        super(request);
        this.botUserId = data.botUserId;
        this.subdomain = data.subdomain;
        this.url = data.url;
    }
}
/**
 * A fetchable AdministrableTeams Query
 *
 * @param request - function to call the graphql client
 */
class AdministrableTeamsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the AdministrableTeams query and return a TeamConnection
     *
     * @param variables - variables to pass into the AdministrableTeamsQuery
     * @returns parsed response from AdministrableTeamsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AdministrableTeamsDocument, variables);
            const data = response.administrableTeams;
            return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable ApplicationWithAuthorization Query
 *
 * @param request - function to call the graphql client
 */
class ApplicationWithAuthorizationQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ApplicationWithAuthorization query and return a UserAuthorizedApplication
     *
     * @param clientId - required clientId to pass to applicationWithAuthorization
     * @param scope - required scope to pass to applicationWithAuthorization
     * @param variables - variables without 'clientId', 'scope' to pass into the ApplicationWithAuthorizationQuery
     * @returns parsed response from ApplicationWithAuthorizationQuery
     */
    fetch(clientId, scope, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ApplicationWithAuthorizationDocument, Object.assign({ clientId,
                scope }, variables));
            const data = response.applicationWithAuthorization;
            return new UserAuthorizedApplication(this._request, data);
        });
    }
}
/**
 * A fetchable Attachment Query
 *
 * @param request - function to call the graphql client
 */
class AttachmentQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Attachment query and return a Attachment
     *
     * @param id - required id to pass to attachment
     * @returns parsed response from AttachmentQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentDocument, {
                id,
            });
            const data = response.attachment;
            return new Attachment(this._request, data);
        });
    }
}
/**
 * A fetchable AttachmentIssue Query
 *
 * @param request - function to call the graphql client
 */
class AttachmentIssueQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the AttachmentIssue query and return a Issue
     *
     * @param id - required id to pass to attachmentIssue
     * @returns parsed response from AttachmentIssueQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentIssueDocument, {
                id,
            });
            const data = response.attachmentIssue;
            return new Issue(this._request, data);
        });
    }
}
/**
 * A fetchable Attachments Query
 *
 * @param request - function to call the graphql client
 */
class AttachmentsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Attachments query and return a AttachmentConnection
     *
     * @param variables - variables to pass into the AttachmentsQuery
     * @returns parsed response from AttachmentsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentsDocument, variables);
            const data = response.attachments;
            return new AttachmentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable AttachmentsForUrl Query
 *
 * @param request - function to call the graphql client
 */
class AttachmentsForUrlQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the AttachmentsForUrl query and return a AttachmentConnection
     *
     * @param url - required url to pass to attachmentsForURL
     * @param variables - variables without 'url' to pass into the AttachmentsForUrlQuery
     * @returns parsed response from AttachmentsForUrlQuery
     */
    fetch(url, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentsForUrlDocument, Object.assign({ url }, variables));
            const data = response.attachmentsForURL;
            return new AttachmentConnection(this._request, connection => this.fetch(url, defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable AuditEntries Query
 *
 * @param request - function to call the graphql client
 */
class AuditEntriesQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the AuditEntries query and return a AuditEntryConnection
     *
     * @param variables - variables to pass into the AuditEntriesQuery
     * @returns parsed response from AuditEntriesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AuditEntriesDocument, variables);
            const data = response.auditEntries;
            return new AuditEntryConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable AuditEntryTypes Query
 *
 * @param request - function to call the graphql client
 */
class AuditEntryTypesQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the AuditEntryTypes query and return a AuditEntryType list
     *
     * @returns parsed response from AuditEntryTypesQuery
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AuditEntryTypesDocument, {});
            const data = response.auditEntryTypes;
            return data.map(node => new AuditEntryType(this._request, node));
        });
    }
}
/**
 * A fetchable AuthorizedApplications Query
 *
 * @param request - function to call the graphql client
 */
class AuthorizedApplicationsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the AuthorizedApplications query and return a AuthorizedApplication list
     *
     * @returns parsed response from AuthorizedApplicationsQuery
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AuthorizedApplicationsDocument, {});
            const data = response.authorizedApplications;
            return data.map(node => new AuthorizedApplication(this._request, node));
        });
    }
}
/**
 * A fetchable AvailableUsers Query
 *
 * @param request - function to call the graphql client
 */
class AvailableUsersQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the AvailableUsers query and return a AuthResolverResponse
     *
     * @returns parsed response from AvailableUsersQuery
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AvailableUsersDocument, {});
            const data = response.availableUsers;
            return new AuthResolverResponse(this._request, data);
        });
    }
}
/**
 * A fetchable BillingDetails Query
 *
 * @param request - function to call the graphql client
 */
class BillingDetailsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the BillingDetails query and return a BillingDetailsPayload
     *
     * @returns parsed response from BillingDetailsQuery
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(BillingDetailsDocument, {});
            const data = response.billingDetails;
            return new BillingDetailsPayload(this._request, data);
        });
    }
}
/**
 * A fetchable CollaborativeDocumentJoin Query
 *
 * @param request - function to call the graphql client
 */
class CollaborativeDocumentJoinQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the CollaborativeDocumentJoin query and return a CollaborationDocumentUpdatePayload
     *
     * @param clientId - required clientId to pass to collaborativeDocumentJoin
     * @param issueId - required issueId to pass to collaborativeDocumentJoin
     * @param version - required version to pass to collaborativeDocumentJoin
     * @returns parsed response from CollaborativeDocumentJoinQuery
     */
    fetch(clientId, issueId, version) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CollaborativeDocumentJoinDocument, {
                clientId,
                issueId,
                version,
            });
            const data = response.collaborativeDocumentJoin;
            return new CollaborationDocumentUpdatePayload(this._request, data);
        });
    }
}
/**
 * A fetchable Comment Query
 *
 * @param request - function to call the graphql client
 */
class CommentQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Comment query and return a Comment
     *
     * @param id - required id to pass to comment
     * @returns parsed response from CommentQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CommentDocument, {
                id,
            });
            const data = response.comment;
            return new Comment(this._request, data);
        });
    }
}
/**
 * A fetchable Comments Query
 *
 * @param request - function to call the graphql client
 */
class CommentsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Comments query and return a CommentConnection
     *
     * @param variables - variables to pass into the CommentsQuery
     * @returns parsed response from CommentsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CommentsDocument, variables);
            const data = response.comments;
            return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable CustomView Query
 *
 * @param request - function to call the graphql client
 */
class CustomViewQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the CustomView query and return a CustomView
     *
     * @param id - required id to pass to customView
     * @returns parsed response from CustomViewQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CustomViewDocument, {
                id,
            });
            const data = response.customView;
            return new CustomView(this._request, data);
        });
    }
}
/**
 * A fetchable CustomViews Query
 *
 * @param request - function to call the graphql client
 */
class CustomViewsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the CustomViews query and return a CustomViewConnection
     *
     * @param variables - variables to pass into the CustomViewsQuery
     * @returns parsed response from CustomViewsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CustomViewsDocument, variables);
            const data = response.customViews;
            return new CustomViewConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable Cycle Query
 *
 * @param request - function to call the graphql client
 */
class CycleQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Cycle query and return a Cycle
     *
     * @param id - required id to pass to cycle
     * @returns parsed response from CycleQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CycleDocument, {
                id,
            });
            const data = response.cycle;
            return new Cycle(this._request, data);
        });
    }
}
/**
 * A fetchable Cycles Query
 *
 * @param request - function to call the graphql client
 */
class CyclesQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Cycles query and return a CycleConnection
     *
     * @param variables - variables to pass into the CyclesQuery
     * @returns parsed response from CyclesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CyclesDocument, variables);
            const data = response.cycles;
            return new CycleConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable Document Query
 *
 * @param request - function to call the graphql client
 */
class DocumentQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Document query and return a Document
     *
     * @param id - required id to pass to document
     * @returns parsed response from DocumentQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(DocumentDocument, {
                id,
            });
            const data = response.document;
            return new Document(this._request, data);
        });
    }
}
/**
 * A fetchable Documents Query
 *
 * @param request - function to call the graphql client
 */
class DocumentsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Documents query and return a DocumentConnection
     *
     * @param variables - variables to pass into the DocumentsQuery
     * @returns parsed response from DocumentsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(DocumentsDocument, variables);
            const data = response.documents;
            return new DocumentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable Emoji Query
 *
 * @param request - function to call the graphql client
 */
class EmojiQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Emoji query and return a Emoji
     *
     * @param id - required id to pass to emoji
     * @returns parsed response from EmojiQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(EmojiDocument, {
                id,
            });
            const data = response.emoji;
            return new Emoji(this._request, data);
        });
    }
}
/**
 * A fetchable Emojis Query
 *
 * @param request - function to call the graphql client
 */
class EmojisQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Emojis query and return a EmojiConnection
     *
     * @param variables - variables to pass into the EmojisQuery
     * @returns parsed response from EmojisQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(EmojisDocument, variables);
            const data = response.emojis;
            return new EmojiConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable Favorite Query
 *
 * @param request - function to call the graphql client
 */
class FavoriteQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Favorite query and return a Favorite
     *
     * @param id - required id to pass to favorite
     * @returns parsed response from FavoriteQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(FavoriteDocument, {
                id,
            });
            const data = response.favorite;
            return new Favorite(this._request, data);
        });
    }
}
/**
 * A fetchable Favorites Query
 *
 * @param request - function to call the graphql client
 */
class FavoritesQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Favorites query and return a FavoriteConnection
     *
     * @param variables - variables to pass into the FavoritesQuery
     * @returns parsed response from FavoritesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(FavoritesDocument, variables);
            const data = response.favorites;
            return new FavoriteConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable FigmaEmbedInfo Query
 *
 * @param request - function to call the graphql client
 */
class FigmaEmbedInfoQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the FigmaEmbedInfo query and return a FigmaEmbedPayload
     *
     * @param fileId - required fileId to pass to figmaEmbedInfo
     * @param variables - variables without 'fileId' to pass into the FigmaEmbedInfoQuery
     * @returns parsed response from FigmaEmbedInfoQuery
     */
    fetch(fileId, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(FigmaEmbedInfoDocument, Object.assign({ fileId }, variables));
            const data = response.figmaEmbedInfo;
            return new FigmaEmbedPayload(this._request, data);
        });
    }
}
/**
 * A fetchable Integration Query
 *
 * @param request - function to call the graphql client
 */
class IntegrationQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Integration query and return a Integration
     *
     * @param id - required id to pass to integration
     * @returns parsed response from IntegrationQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationDocument, {
                id,
            });
            const data = response.integration;
            return new Integration(this._request, data);
        });
    }
}
/**
 * A fetchable Integrations Query
 *
 * @param request - function to call the graphql client
 */
class IntegrationsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Integrations query and return a IntegrationConnection
     *
     * @param variables - variables to pass into the IntegrationsQuery
     * @returns parsed response from IntegrationsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationsDocument, variables);
            const data = response.integrations;
            return new IntegrationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable Issue Query
 *
 * @param request - function to call the graphql client
 */
class IssueQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Issue query and return a Issue
     *
     * @param id - required id to pass to issue
     * @returns parsed response from IssueQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueDocument, {
                id,
            });
            const data = response.issue;
            return new Issue(this._request, data);
        });
    }
}
/**
 * A fetchable IssueImportFinishGithubOAuth Query
 *
 * @param request - function to call the graphql client
 */
class IssueImportFinishGithubOAuthQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueImportFinishGithubOAuth query and return a GithubOAuthTokenPayload
     *
     * @param code - required code to pass to issueImportFinishGithubOAuth
     * @returns parsed response from IssueImportFinishGithubOAuthQuery
     */
    fetch(code) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueImportFinishGithubOAuthDocument, {
                code,
            });
            const data = response.issueImportFinishGithubOAuth;
            return new GithubOAuthTokenPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueLabel Query
 *
 * @param request - function to call the graphql client
 */
class IssueLabelQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueLabel query and return a IssueLabel
     *
     * @param id - required id to pass to issueLabel
     * @returns parsed response from IssueLabelQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueLabelDocument, {
                id,
            });
            const data = response.issueLabel;
            return new IssueLabel(this._request, data);
        });
    }
}
/**
 * A fetchable IssueLabels Query
 *
 * @param request - function to call the graphql client
 */
class IssueLabelsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueLabels query and return a IssueLabelConnection
     *
     * @param variables - variables to pass into the IssueLabelsQuery
     * @returns parsed response from IssueLabelsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueLabelsDocument, variables);
            const data = response.issueLabels;
            return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable IssuePriorityValues Query
 *
 * @param request - function to call the graphql client
 */
class IssuePriorityValuesQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssuePriorityValues query and return a IssuePriorityValue list
     *
     * @returns parsed response from IssuePriorityValuesQuery
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssuePriorityValuesDocument, {});
            const data = response.issuePriorityValues;
            return data.map(node => new IssuePriorityValue(this._request, node));
        });
    }
}
/**
 * A fetchable IssueRelation Query
 *
 * @param request - function to call the graphql client
 */
class IssueRelationQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueRelation query and return a IssueRelation
     *
     * @param id - required id to pass to issueRelation
     * @returns parsed response from IssueRelationQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueRelationDocument, {
                id,
            });
            const data = response.issueRelation;
            return new IssueRelation(this._request, data);
        });
    }
}
/**
 * A fetchable IssueRelations Query
 *
 * @param request - function to call the graphql client
 */
class IssueRelationsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueRelations query and return a IssueRelationConnection
     *
     * @param variables - variables to pass into the IssueRelationsQuery
     * @returns parsed response from IssueRelationsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueRelationsDocument, variables);
            const data = response.issueRelations;
            return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable IssueSearch Query
 *
 * @param request - function to call the graphql client
 */
class IssueSearchQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueSearch query and return a IssueConnection
     *
     * @param query - required query to pass to issueSearch
     * @param variables - variables without 'query' to pass into the IssueSearchQuery
     * @returns parsed response from IssueSearchQuery
     */
    fetch(query, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueSearchDocument, Object.assign({ query }, variables));
            const data = response.issueSearch;
            return new IssueConnection(this._request, connection => this.fetch(query, defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable Issues Query
 *
 * @param request - function to call the graphql client
 */
class IssuesQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Issues query and return a IssueConnection
     *
     * @param variables - variables to pass into the IssuesQuery
     * @returns parsed response from IssuesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssuesDocument, variables);
            const data = response.issues;
            return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable Milestone Query
 *
 * @param request - function to call the graphql client
 */
class MilestoneQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Milestone query and return a Milestone
     *
     * @param id - required id to pass to milestone
     * @returns parsed response from MilestoneQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(MilestoneDocument, {
                id,
            });
            const data = response.milestone;
            return new Milestone(this._request, data);
        });
    }
}
/**
 * A fetchable Milestones Query
 *
 * @param request - function to call the graphql client
 */
class MilestonesQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Milestones query and return a MilestoneConnection
     *
     * @param variables - variables to pass into the MilestonesQuery
     * @returns parsed response from MilestonesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(MilestonesDocument, variables);
            const data = response.milestones;
            return new MilestoneConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable Notification Query
 *
 * @param request - function to call the graphql client
 */
class NotificationQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Notification query and return a Notification
     *
     * @param id - required id to pass to notification
     * @returns parsed response from NotificationQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(NotificationDocument, {
                id,
            });
            const data = response.notification;
            return new Notification(this._request, data);
        });
    }
}
/**
 * A fetchable NotificationSubscription Query
 *
 * @param request - function to call the graphql client
 */
class NotificationSubscriptionQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the NotificationSubscription query and return a NotificationSubscription
     *
     * @param id - required id to pass to notificationSubscription
     * @returns parsed response from NotificationSubscriptionQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(NotificationSubscriptionDocument, {
                id,
            });
            const data = response.notificationSubscription;
            return new NotificationSubscription(this._request, data);
        });
    }
}
/**
 * A fetchable NotificationSubscriptions Query
 *
 * @param request - function to call the graphql client
 */
class NotificationSubscriptionsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the NotificationSubscriptions query and return a NotificationSubscriptionConnection
     *
     * @param variables - variables to pass into the NotificationSubscriptionsQuery
     * @returns parsed response from NotificationSubscriptionsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(NotificationSubscriptionsDocument, variables);
            const data = response.notificationSubscriptions;
            return new NotificationSubscriptionConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable Notifications Query
 *
 * @param request - function to call the graphql client
 */
class NotificationsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Notifications query and return a NotificationConnection
     *
     * @param variables - variables to pass into the NotificationsQuery
     * @returns parsed response from NotificationsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(NotificationsDocument, variables);
            const data = response.notifications;
            return new NotificationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable Organization Query
 *
 * @param request - function to call the graphql client
 */
class OrganizationQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Organization query and return a Organization
     *
     * @returns parsed response from OrganizationQuery
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OrganizationDocument, {});
            const data = response.organization;
            return new Organization(this._request, data);
        });
    }
}
/**
 * A fetchable OrganizationExists Query
 *
 * @param request - function to call the graphql client
 */
class OrganizationExistsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OrganizationExists query and return a OrganizationExistsPayload
     *
     * @param urlKey - required urlKey to pass to organizationExists
     * @returns parsed response from OrganizationExistsQuery
     */
    fetch(urlKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OrganizationExistsDocument, {
                urlKey,
            });
            const data = response.organizationExists;
            return new OrganizationExistsPayload(this._request, data);
        });
    }
}
/**
 * A fetchable OrganizationInvite Query
 *
 * @param request - function to call the graphql client
 */
class OrganizationInviteQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OrganizationInvite query and return a OrganizationInvite
     *
     * @param id - required id to pass to organizationInvite
     * @returns parsed response from OrganizationInviteQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OrganizationInviteDocument, {
                id,
            });
            const data = response.organizationInvite;
            return new OrganizationInvite(this._request, data);
        });
    }
}
/**
 * A fetchable OrganizationInviteDetails Query
 *
 * @param request - function to call the graphql client
 */
class OrganizationInviteDetailsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OrganizationInviteDetails query and return a OrganizationInviteDetailsPayload
     *
     * @param id - required id to pass to organizationInviteDetails
     * @returns parsed response from OrganizationInviteDetailsQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OrganizationInviteDetailsDocument, {
                id,
            });
            const data = response.organizationInviteDetails;
            return new OrganizationInviteDetailsPayload(this._request, data);
        });
    }
}
/**
 * A fetchable OrganizationInvites Query
 *
 * @param request - function to call the graphql client
 */
class OrganizationInvitesQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OrganizationInvites query and return a OrganizationInviteConnection
     *
     * @param variables - variables to pass into the OrganizationInvitesQuery
     * @returns parsed response from OrganizationInvitesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OrganizationInvitesDocument, variables);
            const data = response.organizationInvites;
            return new OrganizationInviteConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable Project Query
 *
 * @param request - function to call the graphql client
 */
class ProjectQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Project query and return a Project
     *
     * @param id - required id to pass to project
     * @returns parsed response from ProjectQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ProjectDocument, {
                id,
            });
            const data = response.project;
            return new Project(this._request, data);
        });
    }
}
/**
 * A fetchable ProjectLink Query
 *
 * @param request - function to call the graphql client
 */
class ProjectLinkQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ProjectLink query and return a ProjectLink
     *
     * @param id - required id to pass to projectLink
     * @returns parsed response from ProjectLinkQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ProjectLinkDocument, {
                id,
            });
            const data = response.projectLink;
            return new ProjectLink(this._request, data);
        });
    }
}
/**
 * A fetchable ProjectLinks Query
 *
 * @param request - function to call the graphql client
 */
class ProjectLinksQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ProjectLinks query and return a ProjectLinkConnection
     *
     * @param variables - variables to pass into the ProjectLinksQuery
     * @returns parsed response from ProjectLinksQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ProjectLinksDocument, variables);
            const data = response.projectLinks;
            return new ProjectLinkConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable Projects Query
 *
 * @param request - function to call the graphql client
 */
class ProjectsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Projects query and return a ProjectConnection
     *
     * @param variables - variables to pass into the ProjectsQuery
     * @returns parsed response from ProjectsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ProjectsDocument, variables);
            const data = response.projects;
            return new ProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable PushSubscriptionTest Query
 *
 * @param request - function to call the graphql client
 */
class PushSubscriptionTestQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the PushSubscriptionTest query and return a PushSubscriptionTestPayload
     *
     * @returns parsed response from PushSubscriptionTestQuery
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(PushSubscriptionTestDocument, {});
            const data = response.pushSubscriptionTest;
            return new PushSubscriptionTestPayload(this._request, data);
        });
    }
}
/**
 * A fetchable Reaction Query
 *
 * @param request - function to call the graphql client
 */
class ReactionQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Reaction query and return a Reaction
     *
     * @param id - required id to pass to reaction
     * @returns parsed response from ReactionQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ReactionDocument, {
                id,
            });
            const data = response.reaction;
            return new Reaction(this._request, data);
        });
    }
}
/**
 * A fetchable Reactions Query
 *
 * @param request - function to call the graphql client
 */
class ReactionsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Reactions query and return a ReactionConnection
     *
     * @param variables - variables to pass into the ReactionsQuery
     * @returns parsed response from ReactionsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ReactionsDocument, variables);
            const data = response.reactions;
            return new ReactionConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable SsoUrlFromEmail Query
 *
 * @param request - function to call the graphql client
 */
class SsoUrlFromEmailQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the SsoUrlFromEmail query and return a SsoUrlFromEmailResponse
     *
     * @param email - required email to pass to ssoUrlFromEmail
     * @param variables - variables without 'email' to pass into the SsoUrlFromEmailQuery
     * @returns parsed response from SsoUrlFromEmailQuery
     */
    fetch(email, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(SsoUrlFromEmailDocument, Object.assign({ email }, variables));
            const data = response.ssoUrlFromEmail;
            return new SsoUrlFromEmailResponse(this._request, data);
        });
    }
}
/**
 * A fetchable Subscription Query
 *
 * @param request - function to call the graphql client
 */
class SubscriptionQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Subscription query and return a Subscription
     *
     * @returns parsed response from SubscriptionQuery
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(SubscriptionDocument, {});
            const data = response.subscription;
            return data ? new Subscription(this._request, data) : undefined;
        });
    }
}
/**
 * A fetchable Team Query
 *
 * @param request - function to call the graphql client
 */
class TeamQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Team query and return a Team
     *
     * @param id - required id to pass to team
     * @returns parsed response from TeamQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(TeamDocument, {
                id,
            });
            const data = response.team;
            return new Team(this._request, data);
        });
    }
}
/**
 * A fetchable TeamMembership Query
 *
 * @param request - function to call the graphql client
 */
class TeamMembershipQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the TeamMembership query and return a TeamMembership
     *
     * @param id - required id to pass to teamMembership
     * @returns parsed response from TeamMembershipQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(TeamMembershipDocument, {
                id,
            });
            const data = response.teamMembership;
            return new TeamMembership(this._request, data);
        });
    }
}
/**
 * A fetchable TeamMemberships Query
 *
 * @param request - function to call the graphql client
 */
class TeamMembershipsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the TeamMemberships query and return a TeamMembershipConnection
     *
     * @param variables - variables to pass into the TeamMembershipsQuery
     * @returns parsed response from TeamMembershipsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(TeamMembershipsDocument, variables);
            const data = response.teamMemberships;
            return new TeamMembershipConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable Teams Query
 *
 * @param request - function to call the graphql client
 */
class TeamsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Teams query and return a TeamConnection
     *
     * @param variables - variables to pass into the TeamsQuery
     * @returns parsed response from TeamsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(TeamsDocument, variables);
            const data = response.teams;
            return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable Template Query
 *
 * @param request - function to call the graphql client
 */
class TemplateQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Template query and return a Template
     *
     * @param id - required id to pass to template
     * @returns parsed response from TemplateQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(TemplateDocument, {
                id,
            });
            const data = response.template;
            return new Template(this._request, data);
        });
    }
}
/**
 * A fetchable Templates Query
 *
 * @param request - function to call the graphql client
 */
class TemplatesQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Templates query and return a Template list
     *
     * @returns parsed response from TemplatesQuery
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(TemplatesDocument, {});
            const data = response.templates;
            return data.map(node => new Template(this._request, node));
        });
    }
}
/**
 * A fetchable User Query
 *
 * @param request - function to call the graphql client
 */
class UserQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the User query and return a User
     *
     * @param id - required id to pass to user
     * @returns parsed response from UserQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(UserDocument, {
                id,
            });
            const data = response.user;
            return new User(this._request, data);
        });
    }
}
/**
 * A fetchable UserSettings Query
 *
 * @param request - function to call the graphql client
 */
class UserSettingsQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the UserSettings query and return a UserSettings
     *
     * @returns parsed response from UserSettingsQuery
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(UserSettingsDocument, {});
            const data = response.userSettings;
            return new UserSettings(this._request, data);
        });
    }
}
/**
 * A fetchable Users Query
 *
 * @param request - function to call the graphql client
 */
class UsersQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Users query and return a UserConnection
     *
     * @param variables - variables to pass into the UsersQuery
     * @returns parsed response from UsersQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(UsersDocument, variables);
            const data = response.users;
            return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable Viewer Query
 *
 * @param request - function to call the graphql client
 */
class ViewerQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Viewer query and return a User
     *
     * @returns parsed response from ViewerQuery
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ViewerDocument, {});
            const data = response.viewer;
            return new User(this._request, data);
        });
    }
}
/**
 * A fetchable Webhook Query
 *
 * @param request - function to call the graphql client
 */
class WebhookQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Webhook query and return a Webhook
     *
     * @param id - required id to pass to webhook
     * @returns parsed response from WebhookQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(WebhookDocument, {
                id,
            });
            const data = response.webhook;
            return new Webhook(this._request, data);
        });
    }
}
/**
 * A fetchable Webhooks Query
 *
 * @param request - function to call the graphql client
 */
class WebhooksQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the Webhooks query and return a WebhookConnection
     *
     * @param variables - variables to pass into the WebhooksQuery
     * @returns parsed response from WebhooksQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(WebhooksDocument, variables);
            const data = response.webhooks;
            return new WebhookConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable WorkflowState Query
 *
 * @param request - function to call the graphql client
 */
class WorkflowStateQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the WorkflowState query and return a WorkflowState
     *
     * @param id - required id to pass to workflowState
     * @returns parsed response from WorkflowStateQuery
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(WorkflowStateDocument, {
                id,
            });
            const data = response.workflowState;
            return new WorkflowState(this._request, data);
        });
    }
}
/**
 * A fetchable WorkflowStates Query
 *
 * @param request - function to call the graphql client
 */
class WorkflowStatesQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the WorkflowStates query and return a WorkflowStateConnection
     *
     * @param variables - variables to pass into the WorkflowStatesQuery
     * @returns parsed response from WorkflowStatesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(WorkflowStatesDocument, variables);
            const data = response.workflowStates;
            return new WorkflowStateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
        });
    }
}
/**
 * A fetchable AttachmentArchive Mutation
 *
 * @param request - function to call the graphql client
 */
class AttachmentArchiveMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the AttachmentArchive mutation and return a ArchivePayload
     *
     * @param id - required id to pass to attachmentArchive
     * @returns parsed response from AttachmentArchiveMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentArchiveDocument, {
                id,
            });
            const data = response.attachmentArchive;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable AttachmentCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class AttachmentCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the AttachmentCreate mutation and return a AttachmentPayload
     *
     * @param input - required input to pass to attachmentCreate
     * @returns parsed response from AttachmentCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentCreateDocument, {
                input,
            });
            const data = response.attachmentCreate;
            return new AttachmentPayload(this._request, data);
        });
    }
}
/**
 * A fetchable AttachmentDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class AttachmentDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the AttachmentDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to attachmentDelete
     * @returns parsed response from AttachmentDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentDeleteDocument, {
                id,
            });
            const data = response.attachmentDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable AttachmentLinkFront Mutation
 *
 * @param request - function to call the graphql client
 */
class AttachmentLinkFrontMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the AttachmentLinkFront mutation and return a FrontAttachmentPayload
     *
     * @param conversationId - required conversationId to pass to attachmentLinkFront
     * @param issueId - required issueId to pass to attachmentLinkFront
     * @returns parsed response from AttachmentLinkFrontMutation
     */
    fetch(conversationId, issueId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentLinkFrontDocument, {
                conversationId,
                issueId,
            });
            const data = response.attachmentLinkFront;
            return new FrontAttachmentPayload(this._request, data);
        });
    }
}
/**
 * A fetchable AttachmentLinkIntercom Mutation
 *
 * @param request - function to call the graphql client
 */
class AttachmentLinkIntercomMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the AttachmentLinkIntercom mutation and return a AttachmentPayload
     *
     * @param conversationId - required conversationId to pass to attachmentLinkIntercom
     * @param issueId - required issueId to pass to attachmentLinkIntercom
     * @returns parsed response from AttachmentLinkIntercomMutation
     */
    fetch(conversationId, issueId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentLinkIntercomDocument, {
                conversationId,
                issueId,
            });
            const data = response.attachmentLinkIntercom;
            return new AttachmentPayload(this._request, data);
        });
    }
}
/**
 * A fetchable AttachmentLinkJiraIssue Mutation
 *
 * @param request - function to call the graphql client
 */
class AttachmentLinkJiraIssueMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the AttachmentLinkJiraIssue mutation and return a AttachmentPayload
     *
     * @param issueId - required issueId to pass to attachmentLinkJiraIssue
     * @param jiraIssueId - required jiraIssueId to pass to attachmentLinkJiraIssue
     * @returns parsed response from AttachmentLinkJiraIssueMutation
     */
    fetch(issueId, jiraIssueId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentLinkJiraIssueDocument, {
                issueId,
                jiraIssueId,
            });
            const data = response.attachmentLinkJiraIssue;
            return new AttachmentPayload(this._request, data);
        });
    }
}
/**
 * A fetchable AttachmentLinkUrl Mutation
 *
 * @param request - function to call the graphql client
 */
class AttachmentLinkUrlMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the AttachmentLinkUrl mutation and return a AttachmentPayload
     *
     * @param issueId - required issueId to pass to attachmentLinkURL
     * @param url - required url to pass to attachmentLinkURL
     * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkUrlMutation
     * @returns parsed response from AttachmentLinkUrlMutation
     */
    fetch(issueId, url, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentLinkUrlDocument, Object.assign({ issueId,
                url }, variables));
            const data = response.attachmentLinkURL;
            return new AttachmentPayload(this._request, data);
        });
    }
}
/**
 * A fetchable AttachmentLinkZendesk Mutation
 *
 * @param request - function to call the graphql client
 */
class AttachmentLinkZendeskMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the AttachmentLinkZendesk mutation and return a AttachmentPayload
     *
     * @param issueId - required issueId to pass to attachmentLinkZendesk
     * @param ticketId - required ticketId to pass to attachmentLinkZendesk
     * @returns parsed response from AttachmentLinkZendeskMutation
     */
    fetch(issueId, ticketId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentLinkZendeskDocument, {
                issueId,
                ticketId,
            });
            const data = response.attachmentLinkZendesk;
            return new AttachmentPayload(this._request, data);
        });
    }
}
/**
 * A fetchable AttachmentUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class AttachmentUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the AttachmentUpdate mutation and return a AttachmentPayload
     *
     * @param id - required id to pass to attachmentUpdate
     * @param input - required input to pass to attachmentUpdate
     * @returns parsed response from AttachmentUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentUpdateDocument, {
                id,
                input,
            });
            const data = response.attachmentUpdate;
            return new AttachmentPayload(this._request, data);
        });
    }
}
/**
 * A fetchable BillingEmailUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class BillingEmailUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the BillingEmailUpdate mutation and return a BillingEmailPayload
     *
     * @param input - required input to pass to billingEmailUpdate
     * @returns parsed response from BillingEmailUpdateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(BillingEmailUpdateDocument, {
                input,
            });
            const data = response.billingEmailUpdate;
            return new BillingEmailPayload(this._request, data);
        });
    }
}
/**
 * A fetchable CollaborativeDocumentUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class CollaborativeDocumentUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the CollaborativeDocumentUpdate mutation and return a CollaborationDocumentUpdatePayload
     *
     * @param input - required input to pass to collaborativeDocumentUpdate
     * @returns parsed response from CollaborativeDocumentUpdateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CollaborativeDocumentUpdateDocument, {
                input,
            });
            const data = response.collaborativeDocumentUpdate;
            return new CollaborationDocumentUpdatePayload(this._request, data);
        });
    }
}
/**
 * A fetchable CommentCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class CommentCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the CommentCreate mutation and return a CommentPayload
     *
     * @param input - required input to pass to commentCreate
     * @returns parsed response from CommentCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CommentCreateDocument, {
                input,
            });
            const data = response.commentCreate;
            return new CommentPayload(this._request, data);
        });
    }
}
/**
 * A fetchable CommentDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class CommentDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the CommentDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to commentDelete
     * @returns parsed response from CommentDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CommentDeleteDocument, {
                id,
            });
            const data = response.commentDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable CommentUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class CommentUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the CommentUpdate mutation and return a CommentPayload
     *
     * @param id - required id to pass to commentUpdate
     * @param input - required input to pass to commentUpdate
     * @returns parsed response from CommentUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CommentUpdateDocument, {
                id,
                input,
            });
            const data = response.commentUpdate;
            return new CommentPayload(this._request, data);
        });
    }
}
/**
 * A fetchable ContactCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class ContactCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ContactCreate mutation and return a ContactPayload
     *
     * @param input - required input to pass to contactCreate
     * @returns parsed response from ContactCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ContactCreateDocument, {
                input,
            });
            const data = response.contactCreate;
            return new ContactPayload(this._request, data);
        });
    }
}
/**
 * A fetchable CreateCsvExportReport Mutation
 *
 * @param request - function to call the graphql client
 */
class CreateCsvExportReportMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the CreateCsvExportReport mutation and return a CreateCsvExportReportPayload
     *
     * @param variables - variables to pass into the CreateCsvExportReportMutation
     * @returns parsed response from CreateCsvExportReportMutation
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CreateCsvExportReportDocument, variables);
            const data = response.createCsvExportReport;
            return new CreateCsvExportReportPayload(this._request, data);
        });
    }
}
/**
 * A fetchable CreateOrganizationFromOnboarding Mutation
 *
 * @param request - function to call the graphql client
 */
class CreateOrganizationFromOnboardingMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the CreateOrganizationFromOnboarding mutation and return a CreateOrJoinOrganizationResponse
     *
     * @param input - required input to pass to createOrganizationFromOnboarding
     * @param variables - variables without 'input' to pass into the CreateOrganizationFromOnboardingMutation
     * @returns parsed response from CreateOrganizationFromOnboardingMutation
     */
    fetch(input, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CreateOrganizationFromOnboardingDocument, Object.assign({ input }, variables));
            const data = response.createOrganizationFromOnboarding;
            return new CreateOrJoinOrganizationResponse(this._request, data);
        });
    }
}
/**
 * A fetchable CustomViewCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class CustomViewCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the CustomViewCreate mutation and return a CustomViewPayload
     *
     * @param input - required input to pass to customViewCreate
     * @returns parsed response from CustomViewCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CustomViewCreateDocument, {
                input,
            });
            const data = response.customViewCreate;
            return new CustomViewPayload(this._request, data);
        });
    }
}
/**
 * A fetchable CustomViewDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class CustomViewDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the CustomViewDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to customViewDelete
     * @returns parsed response from CustomViewDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CustomViewDeleteDocument, {
                id,
            });
            const data = response.customViewDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable CustomViewUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class CustomViewUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the CustomViewUpdate mutation and return a CustomViewPayload
     *
     * @param id - required id to pass to customViewUpdate
     * @param input - required input to pass to customViewUpdate
     * @returns parsed response from CustomViewUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CustomViewUpdateDocument, {
                id,
                input,
            });
            const data = response.customViewUpdate;
            return new CustomViewPayload(this._request, data);
        });
    }
}
/**
 * A fetchable CycleArchive Mutation
 *
 * @param request - function to call the graphql client
 */
class CycleArchiveMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the CycleArchive mutation and return a ArchivePayload
     *
     * @param id - required id to pass to cycleArchive
     * @returns parsed response from CycleArchiveMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CycleArchiveDocument, {
                id,
            });
            const data = response.cycleArchive;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable CycleCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class CycleCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the CycleCreate mutation and return a CyclePayload
     *
     * @param input - required input to pass to cycleCreate
     * @returns parsed response from CycleCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CycleCreateDocument, {
                input,
            });
            const data = response.cycleCreate;
            return new CyclePayload(this._request, data);
        });
    }
}
/**
 * A fetchable CycleUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class CycleUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the CycleUpdate mutation and return a CyclePayload
     *
     * @param id - required id to pass to cycleUpdate
     * @param input - required input to pass to cycleUpdate
     * @returns parsed response from CycleUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CycleUpdateDocument, {
                id,
                input,
            });
            const data = response.cycleUpdate;
            return new CyclePayload(this._request, data);
        });
    }
}
/**
 * A fetchable DebugFailWithInternalError Mutation
 *
 * @param request - function to call the graphql client
 */
class DebugFailWithInternalErrorMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the DebugFailWithInternalError mutation and return a DebugPayload
     *
     * @returns parsed response from DebugFailWithInternalErrorMutation
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(DebugFailWithInternalErrorDocument, {});
            const data = response.debugFailWithInternalError;
            return new DebugPayload(this._request, data);
        });
    }
}
/**
 * A fetchable DocumentCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class DocumentCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the DocumentCreate mutation and return a DocumentPayload
     *
     * @param input - required input to pass to documentCreate
     * @returns parsed response from DocumentCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(DocumentCreateDocument, {
                input,
            });
            const data = response.documentCreate;
            return new DocumentPayload(this._request, data);
        });
    }
}
/**
 * A fetchable DocumentDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class DocumentDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the DocumentDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to documentDelete
     * @returns parsed response from DocumentDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(DocumentDeleteDocument, {
                id,
            });
            const data = response.documentDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable DocumentUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class DocumentUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the DocumentUpdate mutation and return a DocumentPayload
     *
     * @param id - required id to pass to documentUpdate
     * @param input - required input to pass to documentUpdate
     * @returns parsed response from DocumentUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(DocumentUpdateDocument, {
                id,
                input,
            });
            const data = response.documentUpdate;
            return new DocumentPayload(this._request, data);
        });
    }
}
/**
 * A fetchable EmailSubscribe Mutation
 *
 * @param request - function to call the graphql client
 */
class EmailSubscribeMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the EmailSubscribe mutation and return a EmailSubscribePayload
     *
     * @param input - required input to pass to emailSubscribe
     * @returns parsed response from EmailSubscribeMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(EmailSubscribeDocument, {
                input,
            });
            const data = response.emailSubscribe;
            return new EmailSubscribePayload(this._request, data);
        });
    }
}
/**
 * A fetchable EmailTokenUserAccountAuth Mutation
 *
 * @param request - function to call the graphql client
 */
class EmailTokenUserAccountAuthMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the EmailTokenUserAccountAuth mutation and return a AuthResolverResponse
     *
     * @param input - required input to pass to emailTokenUserAccountAuth
     * @returns parsed response from EmailTokenUserAccountAuthMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(EmailTokenUserAccountAuthDocument, {
                input,
            });
            const data = response.emailTokenUserAccountAuth;
            return new AuthResolverResponse(this._request, data);
        });
    }
}
/**
 * A fetchable EmailUnsubscribe Mutation
 *
 * @param request - function to call the graphql client
 */
class EmailUnsubscribeMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the EmailUnsubscribe mutation and return a EmailUnsubscribePayload
     *
     * @param input - required input to pass to emailUnsubscribe
     * @returns parsed response from EmailUnsubscribeMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(EmailUnsubscribeDocument, {
                input,
            });
            const data = response.emailUnsubscribe;
            return new EmailUnsubscribePayload(this._request, data);
        });
    }
}
/**
 * A fetchable EmailUserAccountAuthChallenge Mutation
 *
 * @param request - function to call the graphql client
 */
class EmailUserAccountAuthChallengeMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the EmailUserAccountAuthChallenge mutation and return a EmailUserAccountAuthChallengeResponse
     *
     * @param input - required input to pass to emailUserAccountAuthChallenge
     * @returns parsed response from EmailUserAccountAuthChallengeMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(EmailUserAccountAuthChallengeDocument, {
                input,
            });
            const data = response.emailUserAccountAuthChallenge;
            return new EmailUserAccountAuthChallengeResponse(this._request, data);
        });
    }
}
/**
 * A fetchable EmojiCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class EmojiCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the EmojiCreate mutation and return a EmojiPayload
     *
     * @param input - required input to pass to emojiCreate
     * @returns parsed response from EmojiCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(EmojiCreateDocument, {
                input,
            });
            const data = response.emojiCreate;
            return new EmojiPayload(this._request, data);
        });
    }
}
/**
 * A fetchable EmojiDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class EmojiDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the EmojiDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to emojiDelete
     * @returns parsed response from EmojiDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(EmojiDeleteDocument, {
                id,
            });
            const data = response.emojiDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable EventCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class EventCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the EventCreate mutation and return a EventPayload
     *
     * @param input - required input to pass to eventCreate
     * @returns parsed response from EventCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(EventCreateDocument, {
                input,
            });
            const data = response.eventCreate;
            return new EventPayload(this._request, data);
        });
    }
}
/**
 * A fetchable FavoriteCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class FavoriteCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the FavoriteCreate mutation and return a FavoritePayload
     *
     * @param input - required input to pass to favoriteCreate
     * @returns parsed response from FavoriteCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(FavoriteCreateDocument, {
                input,
            });
            const data = response.favoriteCreate;
            return new FavoritePayload(this._request, data);
        });
    }
}
/**
 * A fetchable FavoriteDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class FavoriteDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the FavoriteDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to favoriteDelete
     * @returns parsed response from FavoriteDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(FavoriteDeleteDocument, {
                id,
            });
            const data = response.favoriteDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable FavoriteUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class FavoriteUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the FavoriteUpdate mutation and return a FavoritePayload
     *
     * @param id - required id to pass to favoriteUpdate
     * @param input - required input to pass to favoriteUpdate
     * @returns parsed response from FavoriteUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(FavoriteUpdateDocument, {
                id,
                input,
            });
            const data = response.favoriteUpdate;
            return new FavoritePayload(this._request, data);
        });
    }
}
/**
 * A fetchable FeedbackCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class FeedbackCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the FeedbackCreate mutation and return a FeedbackPayload
     *
     * @param input - required input to pass to feedbackCreate
     * @returns parsed response from FeedbackCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(FeedbackCreateDocument, {
                input,
            });
            const data = response.feedbackCreate;
            return new FeedbackPayload(this._request, data);
        });
    }
}
/**
 * A fetchable FileUpload Mutation
 *
 * @param request - function to call the graphql client
 */
class FileUploadMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the FileUpload mutation and return a UploadPayload
     *
     * @param contentType - required contentType to pass to fileUpload
     * @param filename - required filename to pass to fileUpload
     * @param size - required size to pass to fileUpload
     * @param variables - variables without 'contentType', 'filename', 'size' to pass into the FileUploadMutation
     * @returns parsed response from FileUploadMutation
     */
    fetch(contentType, filename, size, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(FileUploadDocument, Object.assign({ contentType,
                filename,
                size }, variables));
            const data = response.fileUpload;
            return new UploadPayload(this._request, data);
        });
    }
}
/**
 * A fetchable GoogleUserAccountAuth Mutation
 *
 * @param request - function to call the graphql client
 */
class GoogleUserAccountAuthMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the GoogleUserAccountAuth mutation and return a AuthResolverResponse
     *
     * @param input - required input to pass to googleUserAccountAuth
     * @returns parsed response from GoogleUserAccountAuthMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(GoogleUserAccountAuthDocument, {
                input,
            });
            const data = response.googleUserAccountAuth;
            return new AuthResolverResponse(this._request, data);
        });
    }
}
/**
 * A fetchable ImageUploadFromUrl Mutation
 *
 * @param request - function to call the graphql client
 */
class ImageUploadFromUrlMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ImageUploadFromUrl mutation and return a ImageUploadFromUrlPayload
     *
     * @param url - required url to pass to imageUploadFromUrl
     * @returns parsed response from ImageUploadFromUrlMutation
     */
    fetch(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ImageUploadFromUrlDocument, {
                url,
            });
            const data = response.imageUploadFromUrl;
            return new ImageUploadFromUrlPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to integrationDelete
     * @returns parsed response from IntegrationDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationDeleteDocument, {
                id,
            });
            const data = response.integrationDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationFigma Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationFigmaMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationFigma mutation and return a IntegrationPayload
     *
     * @param code - required code to pass to integrationFigma
     * @param redirectUri - required redirectUri to pass to integrationFigma
     * @returns parsed response from IntegrationFigmaMutation
     */
    fetch(code, redirectUri) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationFigmaDocument, {
                code,
                redirectUri,
            });
            const data = response.integrationFigma;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationFront Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationFrontMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationFront mutation and return a IntegrationPayload
     *
     * @param code - required code to pass to integrationFront
     * @param redirectUri - required redirectUri to pass to integrationFront
     * @returns parsed response from IntegrationFrontMutation
     */
    fetch(code, redirectUri) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationFrontDocument, {
                code,
                redirectUri,
            });
            const data = response.integrationFront;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationGithubCommitCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationGithubCommitCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationGithubCommitCreate mutation and return a GitHubCommitIntegrationPayload
     *
     * @returns parsed response from IntegrationGithubCommitCreateMutation
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationGithubCommitCreateDocument, {});
            const data = response.integrationGithubCommitCreate;
            return new GitHubCommitIntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationGithubConnect Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationGithubConnectMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationGithubConnect mutation and return a IntegrationPayload
     *
     * @param installationId - required installationId to pass to integrationGithubConnect
     * @returns parsed response from IntegrationGithubConnectMutation
     */
    fetch(installationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationGithubConnectDocument, {
                installationId,
            });
            const data = response.integrationGithubConnect;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationGitlabConnect Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationGitlabConnectMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationGitlabConnect mutation and return a IntegrationPayload
     *
     * @param accessToken - required accessToken to pass to integrationGitlabConnect
     * @param gitlabUrl - required gitlabUrl to pass to integrationGitlabConnect
     * @returns parsed response from IntegrationGitlabConnectMutation
     */
    fetch(accessToken, gitlabUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationGitlabConnectDocument, {
                accessToken,
                gitlabUrl,
            });
            const data = response.integrationGitlabConnect;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationGoogleSheets Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationGoogleSheetsMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationGoogleSheets mutation and return a IntegrationPayload
     *
     * @param code - required code to pass to integrationGoogleSheets
     * @returns parsed response from IntegrationGoogleSheetsMutation
     */
    fetch(code) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationGoogleSheetsDocument, {
                code,
            });
            const data = response.integrationGoogleSheets;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationIntercom Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationIntercomMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationIntercom mutation and return a IntegrationPayload
     *
     * @param code - required code to pass to integrationIntercom
     * @param redirectUri - required redirectUri to pass to integrationIntercom
     * @returns parsed response from IntegrationIntercomMutation
     */
    fetch(code, redirectUri) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationIntercomDocument, {
                code,
                redirectUri,
            });
            const data = response.integrationIntercom;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationIntercomDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationIntercomDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationIntercomDelete mutation and return a IntegrationPayload
     *
     * @returns parsed response from IntegrationIntercomDeleteMutation
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationIntercomDeleteDocument, {});
            const data = response.integrationIntercomDelete;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationIntercomSettingsUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationIntercomSettingsUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationIntercomSettingsUpdate mutation and return a IntegrationPayload
     *
     * @param input - required input to pass to integrationIntercomSettingsUpdate
     * @returns parsed response from IntegrationIntercomSettingsUpdateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationIntercomSettingsUpdateDocument, {
                input,
            });
            const data = response.integrationIntercomSettingsUpdate;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationLoom Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationLoomMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationLoom mutation and return a IntegrationPayload
     *
     * @returns parsed response from IntegrationLoomMutation
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationLoomDocument, {});
            const data = response.integrationLoom;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationResourceArchive Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationResourceArchiveMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationResourceArchive mutation and return a ArchivePayload
     *
     * @param id - required id to pass to integrationResourceArchive
     * @returns parsed response from IntegrationResourceArchiveMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationResourceArchiveDocument, {
                id,
            });
            const data = response.integrationResourceArchive;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationSentryConnect Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationSentryConnectMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationSentryConnect mutation and return a IntegrationPayload
     *
     * @param code - required code to pass to integrationSentryConnect
     * @param installationId - required installationId to pass to integrationSentryConnect
     * @param organizationSlug - required organizationSlug to pass to integrationSentryConnect
     * @returns parsed response from IntegrationSentryConnectMutation
     */
    fetch(code, installationId, organizationSlug) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationSentryConnectDocument, {
                code,
                installationId,
                organizationSlug,
            });
            const data = response.integrationSentryConnect;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationSettingsUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationSettingsUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationSettingsUpdate mutation and return a IntegrationPayload
     *
     * @param id - required id to pass to integrationSettingsUpdate
     * @param input - required input to pass to integrationSettingsUpdate
     * @returns parsed response from IntegrationSettingsUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationSettingsUpdateDocument, {
                id,
                input,
            });
            const data = response.integrationSettingsUpdate;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationSlack Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationSlackMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationSlack mutation and return a IntegrationPayload
     *
     * @param code - required code to pass to integrationSlack
     * @param redirectUri - required redirectUri to pass to integrationSlack
     * @param variables - variables without 'code', 'redirectUri' to pass into the IntegrationSlackMutation
     * @returns parsed response from IntegrationSlackMutation
     */
    fetch(code, redirectUri, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationSlackDocument, Object.assign({ code,
                redirectUri }, variables));
            const data = response.integrationSlack;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationSlackImportEmojis Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationSlackImportEmojisMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationSlackImportEmojis mutation and return a IntegrationPayload
     *
     * @param code - required code to pass to integrationSlackImportEmojis
     * @param redirectUri - required redirectUri to pass to integrationSlackImportEmojis
     * @returns parsed response from IntegrationSlackImportEmojisMutation
     */
    fetch(code, redirectUri) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationSlackImportEmojisDocument, {
                code,
                redirectUri,
            });
            const data = response.integrationSlackImportEmojis;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationSlackPersonal Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationSlackPersonalMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationSlackPersonal mutation and return a IntegrationPayload
     *
     * @param code - required code to pass to integrationSlackPersonal
     * @param redirectUri - required redirectUri to pass to integrationSlackPersonal
     * @returns parsed response from IntegrationSlackPersonalMutation
     */
    fetch(code, redirectUri) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationSlackPersonalDocument, {
                code,
                redirectUri,
            });
            const data = response.integrationSlackPersonal;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationSlackPost Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationSlackPostMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationSlackPost mutation and return a IntegrationPayload
     *
     * @param code - required code to pass to integrationSlackPost
     * @param redirectUri - required redirectUri to pass to integrationSlackPost
     * @param teamId - required teamId to pass to integrationSlackPost
     * @param variables - variables without 'code', 'redirectUri', 'teamId' to pass into the IntegrationSlackPostMutation
     * @returns parsed response from IntegrationSlackPostMutation
     */
    fetch(code, redirectUri, teamId, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationSlackPostDocument, Object.assign({ code,
                redirectUri,
                teamId }, variables));
            const data = response.integrationSlackPost;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationSlackProjectPost Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationSlackProjectPostMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationSlackProjectPost mutation and return a IntegrationPayload
     *
     * @param code - required code to pass to integrationSlackProjectPost
     * @param projectId - required projectId to pass to integrationSlackProjectPost
     * @param redirectUri - required redirectUri to pass to integrationSlackProjectPost
     * @returns parsed response from IntegrationSlackProjectPostMutation
     */
    fetch(code, projectId, redirectUri) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationSlackProjectPostDocument, {
                code,
                projectId,
                redirectUri,
            });
            const data = response.integrationSlackProjectPost;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IntegrationZendesk Mutation
 *
 * @param request - function to call the graphql client
 */
class IntegrationZendeskMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IntegrationZendesk mutation and return a IntegrationPayload
     *
     * @param code - required code to pass to integrationZendesk
     * @param redirectUri - required redirectUri to pass to integrationZendesk
     * @param scope - required scope to pass to integrationZendesk
     * @param subdomain - required subdomain to pass to integrationZendesk
     * @returns parsed response from IntegrationZendeskMutation
     */
    fetch(code, redirectUri, scope, subdomain) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IntegrationZendeskDocument, {
                code,
                redirectUri,
                scope,
                subdomain,
            });
            const data = response.integrationZendesk;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueArchive Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueArchiveMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueArchive mutation and return a ArchivePayload
     *
     * @param id - required id to pass to issueArchive
     * @param variables - variables without 'id' to pass into the IssueArchiveMutation
     * @returns parsed response from IssueArchiveMutation
     */
    fetch(id, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueArchiveDocument, Object.assign({ id }, variables));
            const data = response.issueArchive;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueBatchUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueBatchUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueBatchUpdate mutation and return a IssueBatchPayload
     *
     * @param ids - required ids to pass to issueBatchUpdate
     * @param input - required input to pass to issueBatchUpdate
     * @returns parsed response from IssueBatchUpdateMutation
     */
    fetch(ids, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueBatchUpdateDocument, {
                ids,
                input,
            });
            const data = response.issueBatchUpdate;
            return new IssueBatchPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueCreate mutation and return a IssuePayload
     *
     * @param input - required input to pass to issueCreate
     * @returns parsed response from IssueCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueCreateDocument, {
                input,
            });
            const data = response.issueCreate;
            return new IssuePayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to issueDelete
     * @returns parsed response from IssueDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueDeleteDocument, {
                id,
            });
            const data = response.issueDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueImportCreateAsana Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueImportCreateAsanaMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueImportCreateAsana mutation and return a IssueImportPayload
     *
     * @param asanaTeamName - required asanaTeamName to pass to issueImportCreateAsana
     * @param asanaToken - required asanaToken to pass to issueImportCreateAsana
     * @param teamId - required teamId to pass to issueImportCreateAsana
     * @param variables - variables without 'asanaTeamName', 'asanaToken', 'teamId' to pass into the IssueImportCreateAsanaMutation
     * @returns parsed response from IssueImportCreateAsanaMutation
     */
    fetch(asanaTeamName, asanaToken, teamId, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueImportCreateAsanaDocument, Object.assign({ asanaTeamName,
                asanaToken,
                teamId }, variables));
            const data = response.issueImportCreateAsana;
            return new IssueImportPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueImportCreateClubhouse Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueImportCreateClubhouseMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueImportCreateClubhouse mutation and return a IssueImportPayload
     *
     * @param clubhouseTeamName - required clubhouseTeamName to pass to issueImportCreateClubhouse
     * @param clubhouseToken - required clubhouseToken to pass to issueImportCreateClubhouse
     * @param teamId - required teamId to pass to issueImportCreateClubhouse
     * @param variables - variables without 'clubhouseTeamName', 'clubhouseToken', 'teamId' to pass into the IssueImportCreateClubhouseMutation
     * @returns parsed response from IssueImportCreateClubhouseMutation
     */
    fetch(clubhouseTeamName, clubhouseToken, teamId, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueImportCreateClubhouseDocument, Object.assign({ clubhouseTeamName,
                clubhouseToken,
                teamId }, variables));
            const data = response.issueImportCreateClubhouse;
            return new IssueImportPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueImportCreateGithub Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueImportCreateGithubMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueImportCreateGithub mutation and return a IssueImportPayload
     *
     * @param githubRepoName - required githubRepoName to pass to issueImportCreateGithub
     * @param githubRepoOwner - required githubRepoOwner to pass to issueImportCreateGithub
     * @param githubToken - required githubToken to pass to issueImportCreateGithub
     * @param teamId - required teamId to pass to issueImportCreateGithub
     * @param variables - variables without 'githubRepoName', 'githubRepoOwner', 'githubToken', 'teamId' to pass into the IssueImportCreateGithubMutation
     * @returns parsed response from IssueImportCreateGithubMutation
     */
    fetch(githubRepoName, githubRepoOwner, githubToken, teamId, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueImportCreateGithubDocument, Object.assign({ githubRepoName,
                githubRepoOwner,
                githubToken,
                teamId }, variables));
            const data = response.issueImportCreateGithub;
            return new IssueImportPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueImportCreateJira Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueImportCreateJiraMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueImportCreateJira mutation and return a IssueImportPayload
     *
     * @param jiraEmail - required jiraEmail to pass to issueImportCreateJira
     * @param jiraHostname - required jiraHostname to pass to issueImportCreateJira
     * @param jiraProject - required jiraProject to pass to issueImportCreateJira
     * @param jiraToken - required jiraToken to pass to issueImportCreateJira
     * @param teamId - required teamId to pass to issueImportCreateJira
     * @param variables - variables without 'jiraEmail', 'jiraHostname', 'jiraProject', 'jiraToken', 'teamId' to pass into the IssueImportCreateJiraMutation
     * @returns parsed response from IssueImportCreateJiraMutation
     */
    fetch(jiraEmail, jiraHostname, jiraProject, jiraToken, teamId, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueImportCreateJiraDocument, Object.assign({ jiraEmail,
                jiraHostname,
                jiraProject,
                jiraToken,
                teamId }, variables));
            const data = response.issueImportCreateJira;
            return new IssueImportPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueImportDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueImportDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueImportDelete mutation and return a IssueImportDeletePayload
     *
     * @param issueImportId - required issueImportId to pass to issueImportDelete
     * @returns parsed response from IssueImportDeleteMutation
     */
    fetch(issueImportId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueImportDeleteDocument, {
                issueImportId,
            });
            const data = response.issueImportDelete;
            return new IssueImportDeletePayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueImportProcess Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueImportProcessMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueImportProcess mutation and return a IssueImportPayload
     *
     * @param issueImportId - required issueImportId to pass to issueImportProcess
     * @param mapping - required mapping to pass to issueImportProcess
     * @returns parsed response from IssueImportProcessMutation
     */
    fetch(issueImportId, mapping) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueImportProcessDocument, {
                issueImportId,
                mapping,
            });
            const data = response.issueImportProcess;
            return new IssueImportPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueImportUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueImportUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueImportUpdate mutation and return a IssueImportPayload
     *
     * @param id - required id to pass to issueImportUpdate
     * @param input - required input to pass to issueImportUpdate
     * @returns parsed response from IssueImportUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueImportUpdateDocument, {
                id,
                input,
            });
            const data = response.issueImportUpdate;
            return new IssueImportPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueLabelArchive Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueLabelArchiveMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueLabelArchive mutation and return a ArchivePayload
     *
     * @param id - required id to pass to issueLabelArchive
     * @returns parsed response from IssueLabelArchiveMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueLabelArchiveDocument, {
                id,
            });
            const data = response.issueLabelArchive;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueLabelCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueLabelCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueLabelCreate mutation and return a IssueLabelPayload
     *
     * @param input - required input to pass to issueLabelCreate
     * @param variables - variables without 'input' to pass into the IssueLabelCreateMutation
     * @returns parsed response from IssueLabelCreateMutation
     */
    fetch(input, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueLabelCreateDocument, Object.assign({ input }, variables));
            const data = response.issueLabelCreate;
            return new IssueLabelPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueLabelUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueLabelUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueLabelUpdate mutation and return a IssueLabelPayload
     *
     * @param id - required id to pass to issueLabelUpdate
     * @param input - required input to pass to issueLabelUpdate
     * @returns parsed response from IssueLabelUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueLabelUpdateDocument, {
                id,
                input,
            });
            const data = response.issueLabelUpdate;
            return new IssueLabelPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueRelationCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueRelationCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueRelationCreate mutation and return a IssueRelationPayload
     *
     * @param input - required input to pass to issueRelationCreate
     * @returns parsed response from IssueRelationCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueRelationCreateDocument, {
                input,
            });
            const data = response.issueRelationCreate;
            return new IssueRelationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueRelationDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueRelationDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueRelationDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to issueRelationDelete
     * @returns parsed response from IssueRelationDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueRelationDeleteDocument, {
                id,
            });
            const data = response.issueRelationDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueRelationUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueRelationUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueRelationUpdate mutation and return a IssueRelationPayload
     *
     * @param id - required id to pass to issueRelationUpdate
     * @param input - required input to pass to issueRelationUpdate
     * @returns parsed response from IssueRelationUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueRelationUpdateDocument, {
                id,
                input,
            });
            const data = response.issueRelationUpdate;
            return new IssueRelationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueUnarchive Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueUnarchiveMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueUnarchive mutation and return a ArchivePayload
     *
     * @param id - required id to pass to issueUnarchive
     * @returns parsed response from IssueUnarchiveMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueUnarchiveDocument, {
                id,
            });
            const data = response.issueUnarchive;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable IssueUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class IssueUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the IssueUpdate mutation and return a IssuePayload
     *
     * @param id - required id to pass to issueUpdate
     * @param input - required input to pass to issueUpdate
     * @returns parsed response from IssueUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueUpdateDocument, {
                id,
                input,
            });
            const data = response.issueUpdate;
            return new IssuePayload(this._request, data);
        });
    }
}
/**
 * A fetchable JiraIntegrationConnect Mutation
 *
 * @param request - function to call the graphql client
 */
class JiraIntegrationConnectMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the JiraIntegrationConnect mutation and return a IntegrationPayload
     *
     * @param input - required input to pass to jiraIntegrationConnect
     * @returns parsed response from JiraIntegrationConnectMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(JiraIntegrationConnectDocument, {
                input,
            });
            const data = response.jiraIntegrationConnect;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable JoinOrganizationFromOnboarding Mutation
 *
 * @param request - function to call the graphql client
 */
class JoinOrganizationFromOnboardingMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the JoinOrganizationFromOnboarding mutation and return a CreateOrJoinOrganizationResponse
     *
     * @param input - required input to pass to joinOrganizationFromOnboarding
     * @returns parsed response from JoinOrganizationFromOnboardingMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(JoinOrganizationFromOnboardingDocument, {
                input,
            });
            const data = response.joinOrganizationFromOnboarding;
            return new CreateOrJoinOrganizationResponse(this._request, data);
        });
    }
}
/**
 * A fetchable LeaveOrganization Mutation
 *
 * @param request - function to call the graphql client
 */
class LeaveOrganizationMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the LeaveOrganization mutation and return a CreateOrJoinOrganizationResponse
     *
     * @param organizationId - required organizationId to pass to leaveOrganization
     * @returns parsed response from LeaveOrganizationMutation
     */
    fetch(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(LeaveOrganizationDocument, {
                organizationId,
            });
            const data = response.leaveOrganization;
            return new CreateOrJoinOrganizationResponse(this._request, data);
        });
    }
}
/**
 * A fetchable MilestoneCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class MilestoneCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the MilestoneCreate mutation and return a MilestonePayload
     *
     * @param input - required input to pass to milestoneCreate
     * @returns parsed response from MilestoneCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(MilestoneCreateDocument, {
                input,
            });
            const data = response.milestoneCreate;
            return new MilestonePayload(this._request, data);
        });
    }
}
/**
 * A fetchable MilestoneDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class MilestoneDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the MilestoneDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to milestoneDelete
     * @returns parsed response from MilestoneDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(MilestoneDeleteDocument, {
                id,
            });
            const data = response.milestoneDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable MilestoneUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class MilestoneUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the MilestoneUpdate mutation and return a MilestonePayload
     *
     * @param id - required id to pass to milestoneUpdate
     * @param input - required input to pass to milestoneUpdate
     * @returns parsed response from MilestoneUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(MilestoneUpdateDocument, {
                id,
                input,
            });
            const data = response.milestoneUpdate;
            return new MilestonePayload(this._request, data);
        });
    }
}
/**
 * A fetchable NotificationArchive Mutation
 *
 * @param request - function to call the graphql client
 */
class NotificationArchiveMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the NotificationArchive mutation and return a ArchivePayload
     *
     * @param id - required id to pass to notificationArchive
     * @returns parsed response from NotificationArchiveMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(NotificationArchiveDocument, {
                id,
            });
            const data = response.notificationArchive;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable NotificationCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class NotificationCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the NotificationCreate mutation and return a NotificationPayload
     *
     * @param id - required id to pass to notificationCreate
     * @param input - required input to pass to notificationCreate
     * @returns parsed response from NotificationCreateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(NotificationCreateDocument, {
                id,
                input,
            });
            const data = response.notificationCreate;
            return new NotificationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable NotificationSubscriptionCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class NotificationSubscriptionCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the NotificationSubscriptionCreate mutation and return a NotificationSubscriptionPayload
     *
     * @param input - required input to pass to notificationSubscriptionCreate
     * @returns parsed response from NotificationSubscriptionCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(NotificationSubscriptionCreateDocument, {
                input,
            });
            const data = response.notificationSubscriptionCreate;
            return new NotificationSubscriptionPayload(this._request, data);
        });
    }
}
/**
 * A fetchable NotificationSubscriptionDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class NotificationSubscriptionDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the NotificationSubscriptionDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to notificationSubscriptionDelete
     * @returns parsed response from NotificationSubscriptionDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(NotificationSubscriptionDeleteDocument, {
                id,
            });
            const data = response.notificationSubscriptionDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable NotificationUnarchive Mutation
 *
 * @param request - function to call the graphql client
 */
class NotificationUnarchiveMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the NotificationUnarchive mutation and return a ArchivePayload
     *
     * @param id - required id to pass to notificationUnarchive
     * @returns parsed response from NotificationUnarchiveMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(NotificationUnarchiveDocument, {
                id,
            });
            const data = response.notificationUnarchive;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable NotificationUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class NotificationUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the NotificationUpdate mutation and return a NotificationPayload
     *
     * @param id - required id to pass to notificationUpdate
     * @param input - required input to pass to notificationUpdate
     * @returns parsed response from NotificationUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(NotificationUpdateDocument, {
                id,
                input,
            });
            const data = response.notificationUpdate;
            return new NotificationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable OauthClientArchive Mutation
 *
 * @param request - function to call the graphql client
 */
class OauthClientArchiveMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OauthClientArchive mutation and return a ArchivePayload
     *
     * @param id - required id to pass to oauthClientArchive
     * @returns parsed response from OauthClientArchiveMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OauthClientArchiveDocument, {
                id,
            });
            const data = response.oauthClientArchive;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable OauthClientCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class OauthClientCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OauthClientCreate mutation and return a OauthClientPayload
     *
     * @param input - required input to pass to oauthClientCreate
     * @returns parsed response from OauthClientCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OauthClientCreateDocument, {
                input,
            });
            const data = response.oauthClientCreate;
            return new OauthClientPayload(this._request, data);
        });
    }
}
/**
 * A fetchable OauthClientRotateSecret Mutation
 *
 * @param request - function to call the graphql client
 */
class OauthClientRotateSecretMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OauthClientRotateSecret mutation and return a RotateSecretPayload
     *
     * @param id - required id to pass to oauthClientRotateSecret
     * @returns parsed response from OauthClientRotateSecretMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OauthClientRotateSecretDocument, {
                id,
            });
            const data = response.oauthClientRotateSecret;
            return new RotateSecretPayload(this._request, data);
        });
    }
}
/**
 * A fetchable OauthClientUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class OauthClientUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OauthClientUpdate mutation and return a OauthClientPayload
     *
     * @param id - required id to pass to oauthClientUpdate
     * @param input - required input to pass to oauthClientUpdate
     * @returns parsed response from OauthClientUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OauthClientUpdateDocument, {
                id,
                input,
            });
            const data = response.oauthClientUpdate;
            return new OauthClientPayload(this._request, data);
        });
    }
}
/**
 * A fetchable OauthTokenRevoke Mutation
 *
 * @param request - function to call the graphql client
 */
class OauthTokenRevokeMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OauthTokenRevoke mutation and return a OauthTokenRevokePayload
     *
     * @param appId - required appId to pass to oauthTokenRevoke
     * @param scope - required scope to pass to oauthTokenRevoke
     * @returns parsed response from OauthTokenRevokeMutation
     */
    fetch(appId, scope) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OauthTokenRevokeDocument, {
                appId,
                scope,
            });
            const data = response.oauthTokenRevoke;
            return new OauthTokenRevokePayload(this._request, data);
        });
    }
}
/**
 * A fetchable OrganizationCancelDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class OrganizationCancelDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OrganizationCancelDelete mutation and return a OrganizationCancelDeletePayload
     *
     * @returns parsed response from OrganizationCancelDeleteMutation
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OrganizationCancelDeleteDocument, {});
            const data = response.organizationCancelDelete;
            return new OrganizationCancelDeletePayload(this._request, data);
        });
    }
}
/**
 * A fetchable OrganizationDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class OrganizationDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OrganizationDelete mutation and return a OrganizationDeletePayload
     *
     * @param input - required input to pass to organizationDelete
     * @returns parsed response from OrganizationDeleteMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OrganizationDeleteDocument, {
                input,
            });
            const data = response.organizationDelete;
            return new OrganizationDeletePayload(this._request, data);
        });
    }
}
/**
 * A fetchable OrganizationDeleteChallenge Mutation
 *
 * @param request - function to call the graphql client
 */
class OrganizationDeleteChallengeMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OrganizationDeleteChallenge mutation and return a OrganizationDeletePayload
     *
     * @returns parsed response from OrganizationDeleteChallengeMutation
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OrganizationDeleteChallengeDocument, {});
            const data = response.organizationDeleteChallenge;
            return new OrganizationDeletePayload(this._request, data);
        });
    }
}
/**
 * A fetchable OrganizationDomainCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class OrganizationDomainCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OrganizationDomainCreate mutation and return a OrganizationDomainPayload
     *
     * @param input - required input to pass to organizationDomainCreate
     * @returns parsed response from OrganizationDomainCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OrganizationDomainCreateDocument, {
                input,
            });
            const data = response.organizationDomainCreate;
            return new OrganizationDomainPayload(this._request, data);
        });
    }
}
/**
 * A fetchable OrganizationDomainDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class OrganizationDomainDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OrganizationDomainDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to organizationDomainDelete
     * @returns parsed response from OrganizationDomainDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OrganizationDomainDeleteDocument, {
                id,
            });
            const data = response.organizationDomainDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable OrganizationDomainVerify Mutation
 *
 * @param request - function to call the graphql client
 */
class OrganizationDomainVerifyMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OrganizationDomainVerify mutation and return a OrganizationDomainPayload
     *
     * @param input - required input to pass to organizationDomainVerify
     * @returns parsed response from OrganizationDomainVerifyMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OrganizationDomainVerifyDocument, {
                input,
            });
            const data = response.organizationDomainVerify;
            return new OrganizationDomainPayload(this._request, data);
        });
    }
}
/**
 * A fetchable OrganizationInviteCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class OrganizationInviteCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OrganizationInviteCreate mutation and return a OrganizationInvitePayload
     *
     * @param input - required input to pass to organizationInviteCreate
     * @returns parsed response from OrganizationInviteCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OrganizationInviteCreateDocument, {
                input,
            });
            const data = response.organizationInviteCreate;
            return new OrganizationInvitePayload(this._request, data);
        });
    }
}
/**
 * A fetchable OrganizationInviteDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class OrganizationInviteDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OrganizationInviteDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to organizationInviteDelete
     * @returns parsed response from OrganizationInviteDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OrganizationInviteDeleteDocument, {
                id,
            });
            const data = response.organizationInviteDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable OrganizationUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class OrganizationUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the OrganizationUpdate mutation and return a OrganizationPayload
     *
     * @param input - required input to pass to organizationUpdate
     * @returns parsed response from OrganizationUpdateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(OrganizationUpdateDocument, {
                input,
            });
            const data = response.organizationUpdate;
            return new OrganizationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable ProjectArchive Mutation
 *
 * @param request - function to call the graphql client
 */
class ProjectArchiveMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ProjectArchive mutation and return a ArchivePayload
     *
     * @param id - required id to pass to projectArchive
     * @returns parsed response from ProjectArchiveMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ProjectArchiveDocument, {
                id,
            });
            const data = response.projectArchive;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable ProjectCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class ProjectCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ProjectCreate mutation and return a ProjectPayload
     *
     * @param input - required input to pass to projectCreate
     * @returns parsed response from ProjectCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ProjectCreateDocument, {
                input,
            });
            const data = response.projectCreate;
            return new ProjectPayload(this._request, data);
        });
    }
}
/**
 * A fetchable ProjectLinkCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class ProjectLinkCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ProjectLinkCreate mutation and return a ProjectLinkPayload
     *
     * @param input - required input to pass to projectLinkCreate
     * @returns parsed response from ProjectLinkCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ProjectLinkCreateDocument, {
                input,
            });
            const data = response.projectLinkCreate;
            return new ProjectLinkPayload(this._request, data);
        });
    }
}
/**
 * A fetchable ProjectLinkDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class ProjectLinkDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ProjectLinkDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to projectLinkDelete
     * @returns parsed response from ProjectLinkDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ProjectLinkDeleteDocument, {
                id,
            });
            const data = response.projectLinkDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable ProjectLinkUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class ProjectLinkUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ProjectLinkUpdate mutation and return a ProjectLinkPayload
     *
     * @param id - required id to pass to projectLinkUpdate
     * @param input - required input to pass to projectLinkUpdate
     * @returns parsed response from ProjectLinkUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ProjectLinkUpdateDocument, {
                id,
                input,
            });
            const data = response.projectLinkUpdate;
            return new ProjectLinkPayload(this._request, data);
        });
    }
}
/**
 * A fetchable ProjectUnarchive Mutation
 *
 * @param request - function to call the graphql client
 */
class ProjectUnarchiveMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ProjectUnarchive mutation and return a ArchivePayload
     *
     * @param id - required id to pass to projectUnarchive
     * @returns parsed response from ProjectUnarchiveMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ProjectUnarchiveDocument, {
                id,
            });
            const data = response.projectUnarchive;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable ProjectUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class ProjectUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ProjectUpdate mutation and return a ProjectPayload
     *
     * @param id - required id to pass to projectUpdate
     * @param input - required input to pass to projectUpdate
     * @returns parsed response from ProjectUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ProjectUpdateDocument, {
                id,
                input,
            });
            const data = response.projectUpdate;
            return new ProjectPayload(this._request, data);
        });
    }
}
/**
 * A fetchable PushSubscriptionCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class PushSubscriptionCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the PushSubscriptionCreate mutation and return a PushSubscriptionPayload
     *
     * @param input - required input to pass to pushSubscriptionCreate
     * @returns parsed response from PushSubscriptionCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(PushSubscriptionCreateDocument, {
                input,
            });
            const data = response.pushSubscriptionCreate;
            return new PushSubscriptionPayload(this._request, data);
        });
    }
}
/**
 * A fetchable PushSubscriptionDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class PushSubscriptionDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the PushSubscriptionDelete mutation and return a PushSubscriptionPayload
     *
     * @param id - required id to pass to pushSubscriptionDelete
     * @returns parsed response from PushSubscriptionDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(PushSubscriptionDeleteDocument, {
                id,
            });
            const data = response.pushSubscriptionDelete;
            return new PushSubscriptionPayload(this._request, data);
        });
    }
}
/**
 * A fetchable ReactionCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class ReactionCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ReactionCreate mutation and return a ReactionPayload
     *
     * @param input - required input to pass to reactionCreate
     * @returns parsed response from ReactionCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ReactionCreateDocument, {
                input,
            });
            const data = response.reactionCreate;
            return new ReactionPayload(this._request, data);
        });
    }
}
/**
 * A fetchable ReactionDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class ReactionDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ReactionDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to reactionDelete
     * @returns parsed response from ReactionDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ReactionDeleteDocument, {
                id,
            });
            const data = response.reactionDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable RefreshGoogleSheetsData Mutation
 *
 * @param request - function to call the graphql client
 */
class RefreshGoogleSheetsDataMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the RefreshGoogleSheetsData mutation and return a IntegrationPayload
     *
     * @param id - required id to pass to refreshGoogleSheetsData
     * @returns parsed response from RefreshGoogleSheetsDataMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(RefreshGoogleSheetsDataDocument, {
                id,
            });
            const data = response.refreshGoogleSheetsData;
            return new IntegrationPayload(this._request, data);
        });
    }
}
/**
 * A fetchable ResendOrganizationInvite Mutation
 *
 * @param request - function to call the graphql client
 */
class ResendOrganizationInviteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ResendOrganizationInvite mutation and return a ArchivePayload
     *
     * @param id - required id to pass to resendOrganizationInvite
     * @returns parsed response from ResendOrganizationInviteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ResendOrganizationInviteDocument, {
                id,
            });
            const data = response.resendOrganizationInvite;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable SamlTokenUserAccountAuth Mutation
 *
 * @param request - function to call the graphql client
 */
class SamlTokenUserAccountAuthMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the SamlTokenUserAccountAuth mutation and return a AuthResolverResponse
     *
     * @param input - required input to pass to samlTokenUserAccountAuth
     * @returns parsed response from SamlTokenUserAccountAuthMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(SamlTokenUserAccountAuthDocument, {
                input,
            });
            const data = response.samlTokenUserAccountAuth;
            return new AuthResolverResponse(this._request, data);
        });
    }
}
/**
 * A fetchable TeamCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class TeamCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the TeamCreate mutation and return a TeamPayload
     *
     * @param input - required input to pass to teamCreate
     * @param variables - variables without 'input' to pass into the TeamCreateMutation
     * @returns parsed response from TeamCreateMutation
     */
    fetch(input, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(TeamCreateDocument, Object.assign({ input }, variables));
            const data = response.teamCreate;
            return new TeamPayload(this._request, data);
        });
    }
}
/**
 * A fetchable TeamDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class TeamDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the TeamDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to teamDelete
     * @returns parsed response from TeamDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(TeamDeleteDocument, {
                id,
            });
            const data = response.teamDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable TeamKeyDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class TeamKeyDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the TeamKeyDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to teamKeyDelete
     * @returns parsed response from TeamKeyDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(TeamKeyDeleteDocument, {
                id,
            });
            const data = response.teamKeyDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable TeamMembershipCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class TeamMembershipCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the TeamMembershipCreate mutation and return a TeamMembershipPayload
     *
     * @param input - required input to pass to teamMembershipCreate
     * @returns parsed response from TeamMembershipCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(TeamMembershipCreateDocument, {
                input,
            });
            const data = response.teamMembershipCreate;
            return new TeamMembershipPayload(this._request, data);
        });
    }
}
/**
 * A fetchable TeamMembershipDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class TeamMembershipDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the TeamMembershipDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to teamMembershipDelete
     * @returns parsed response from TeamMembershipDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(TeamMembershipDeleteDocument, {
                id,
            });
            const data = response.teamMembershipDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable TeamMembershipUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class TeamMembershipUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the TeamMembershipUpdate mutation and return a TeamMembershipPayload
     *
     * @param id - required id to pass to teamMembershipUpdate
     * @param input - required input to pass to teamMembershipUpdate
     * @returns parsed response from TeamMembershipUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(TeamMembershipUpdateDocument, {
                id,
                input,
            });
            const data = response.teamMembershipUpdate;
            return new TeamMembershipPayload(this._request, data);
        });
    }
}
/**
 * A fetchable TeamUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class TeamUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the TeamUpdate mutation and return a TeamPayload
     *
     * @param id - required id to pass to teamUpdate
     * @param input - required input to pass to teamUpdate
     * @returns parsed response from TeamUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(TeamUpdateDocument, {
                id,
                input,
            });
            const data = response.teamUpdate;
            return new TeamPayload(this._request, data);
        });
    }
}
/**
 * A fetchable TemplateCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class TemplateCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the TemplateCreate mutation and return a TemplatePayload
     *
     * @param input - required input to pass to templateCreate
     * @returns parsed response from TemplateCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(TemplateCreateDocument, {
                input,
            });
            const data = response.templateCreate;
            return new TemplatePayload(this._request, data);
        });
    }
}
/**
 * A fetchable TemplateDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class TemplateDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the TemplateDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to templateDelete
     * @returns parsed response from TemplateDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(TemplateDeleteDocument, {
                id,
            });
            const data = response.templateDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable TemplateUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class TemplateUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the TemplateUpdate mutation and return a TemplatePayload
     *
     * @param id - required id to pass to templateUpdate
     * @param input - required input to pass to templateUpdate
     * @returns parsed response from TemplateUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(TemplateUpdateDocument, {
                id,
                input,
            });
            const data = response.templateUpdate;
            return new TemplatePayload(this._request, data);
        });
    }
}
/**
 * A fetchable UserDemoteAdmin Mutation
 *
 * @param request - function to call the graphql client
 */
class UserDemoteAdminMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the UserDemoteAdmin mutation and return a UserAdminPayload
     *
     * @param id - required id to pass to userDemoteAdmin
     * @returns parsed response from UserDemoteAdminMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(UserDemoteAdminDocument, {
                id,
            });
            const data = response.userDemoteAdmin;
            return new UserAdminPayload(this._request, data);
        });
    }
}
/**
 * A fetchable UserFlagUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class UserFlagUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the UserFlagUpdate mutation and return a UserSettingsFlagPayload
     *
     * @param flag - required flag to pass to userFlagUpdate
     * @param operation - required operation to pass to userFlagUpdate
     * @returns parsed response from UserFlagUpdateMutation
     */
    fetch(flag, operation) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(UserFlagUpdateDocument, {
                flag,
                operation,
            });
            const data = response.userFlagUpdate;
            return new UserSettingsFlagPayload(this._request, data);
        });
    }
}
/**
 * A fetchable UserPromoteAdmin Mutation
 *
 * @param request - function to call the graphql client
 */
class UserPromoteAdminMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the UserPromoteAdmin mutation and return a UserAdminPayload
     *
     * @param id - required id to pass to userPromoteAdmin
     * @returns parsed response from UserPromoteAdminMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(UserPromoteAdminDocument, {
                id,
            });
            const data = response.userPromoteAdmin;
            return new UserAdminPayload(this._request, data);
        });
    }
}
/**
 * A fetchable UserSettingsFlagIncrement Mutation
 *
 * @param request - function to call the graphql client
 */
class UserSettingsFlagIncrementMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the UserSettingsFlagIncrement mutation and return a UserSettingsFlagPayload
     *
     * @param flag - required flag to pass to userSettingsFlagIncrement
     * @returns parsed response from UserSettingsFlagIncrementMutation
     */
    fetch(flag) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(UserSettingsFlagIncrementDocument, {
                flag,
            });
            const data = response.userSettingsFlagIncrement;
            return new UserSettingsFlagPayload(this._request, data);
        });
    }
}
/**
 * A fetchable UserSettingsFlagsReset Mutation
 *
 * @param request - function to call the graphql client
 */
class UserSettingsFlagsResetMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the UserSettingsFlagsReset mutation and return a UserSettingsFlagsResetPayload
     *
     * @returns parsed response from UserSettingsFlagsResetMutation
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(UserSettingsFlagsResetDocument, {});
            const data = response.userSettingsFlagsReset;
            return new UserSettingsFlagsResetPayload(this._request, data);
        });
    }
}
/**
 * A fetchable UserSettingsUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class UserSettingsUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the UserSettingsUpdate mutation and return a UserSettingsPayload
     *
     * @param id - required id to pass to userSettingsUpdate
     * @param input - required input to pass to userSettingsUpdate
     * @returns parsed response from UserSettingsUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(UserSettingsUpdateDocument, {
                id,
                input,
            });
            const data = response.userSettingsUpdate;
            return new UserSettingsPayload(this._request, data);
        });
    }
}
/**
 * A fetchable UserSubscribeToNewsletter Mutation
 *
 * @param request - function to call the graphql client
 */
class UserSubscribeToNewsletterMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the UserSubscribeToNewsletter mutation and return a UserSubscribeToNewsletterPayload
     *
     * @returns parsed response from UserSubscribeToNewsletterMutation
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(UserSubscribeToNewsletterDocument, {});
            const data = response.userSubscribeToNewsletter;
            return new UserSubscribeToNewsletterPayload(this._request, data);
        });
    }
}
/**
 * A fetchable UserSuspend Mutation
 *
 * @param request - function to call the graphql client
 */
class UserSuspendMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the UserSuspend mutation and return a UserAdminPayload
     *
     * @param id - required id to pass to userSuspend
     * @returns parsed response from UserSuspendMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(UserSuspendDocument, {
                id,
            });
            const data = response.userSuspend;
            return new UserAdminPayload(this._request, data);
        });
    }
}
/**
 * A fetchable UserUnsuspend Mutation
 *
 * @param request - function to call the graphql client
 */
class UserUnsuspendMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the UserUnsuspend mutation and return a UserAdminPayload
     *
     * @param id - required id to pass to userUnsuspend
     * @returns parsed response from UserUnsuspendMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(UserUnsuspendDocument, {
                id,
            });
            const data = response.userUnsuspend;
            return new UserAdminPayload(this._request, data);
        });
    }
}
/**
 * A fetchable UserUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class UserUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the UserUpdate mutation and return a UserPayload
     *
     * @param id - required id to pass to userUpdate
     * @param input - required input to pass to userUpdate
     * @returns parsed response from UserUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(UserUpdateDocument, {
                id,
                input,
            });
            const data = response.userUpdate;
            return new UserPayload(this._request, data);
        });
    }
}
/**
 * A fetchable ViewPreferencesCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class ViewPreferencesCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ViewPreferencesCreate mutation and return a ViewPreferencesPayload
     *
     * @param input - required input to pass to viewPreferencesCreate
     * @returns parsed response from ViewPreferencesCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ViewPreferencesCreateDocument, {
                input,
            });
            const data = response.viewPreferencesCreate;
            return new ViewPreferencesPayload(this._request, data);
        });
    }
}
/**
 * A fetchable ViewPreferencesDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class ViewPreferencesDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ViewPreferencesDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to viewPreferencesDelete
     * @returns parsed response from ViewPreferencesDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ViewPreferencesDeleteDocument, {
                id,
            });
            const data = response.viewPreferencesDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable ViewPreferencesUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class ViewPreferencesUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the ViewPreferencesUpdate mutation and return a ViewPreferencesPayload
     *
     * @param id - required id to pass to viewPreferencesUpdate
     * @param input - required input to pass to viewPreferencesUpdate
     * @returns parsed response from ViewPreferencesUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(ViewPreferencesUpdateDocument, {
                id,
                input,
            });
            const data = response.viewPreferencesUpdate;
            return new ViewPreferencesPayload(this._request, data);
        });
    }
}
/**
 * A fetchable WebhookCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class WebhookCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the WebhookCreate mutation and return a WebhookPayload
     *
     * @param input - required input to pass to webhookCreate
     * @returns parsed response from WebhookCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(WebhookCreateDocument, {
                input,
            });
            const data = response.webhookCreate;
            return new WebhookPayload(this._request, data);
        });
    }
}
/**
 * A fetchable WebhookDelete Mutation
 *
 * @param request - function to call the graphql client
 */
class WebhookDeleteMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the WebhookDelete mutation and return a ArchivePayload
     *
     * @param id - required id to pass to webhookDelete
     * @returns parsed response from WebhookDeleteMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(WebhookDeleteDocument, {
                id,
            });
            const data = response.webhookDelete;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable WebhookUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class WebhookUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the WebhookUpdate mutation and return a WebhookPayload
     *
     * @param id - required id to pass to webhookUpdate
     * @param input - required input to pass to webhookUpdate
     * @returns parsed response from WebhookUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(WebhookUpdateDocument, {
                id,
                input,
            });
            const data = response.webhookUpdate;
            return new WebhookPayload(this._request, data);
        });
    }
}
/**
 * A fetchable WorkflowStateArchive Mutation
 *
 * @param request - function to call the graphql client
 */
class WorkflowStateArchiveMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the WorkflowStateArchive mutation and return a ArchivePayload
     *
     * @param id - required id to pass to workflowStateArchive
     * @returns parsed response from WorkflowStateArchiveMutation
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(WorkflowStateArchiveDocument, {
                id,
            });
            const data = response.workflowStateArchive;
            return new ArchivePayload(this._request, data);
        });
    }
}
/**
 * A fetchable WorkflowStateCreate Mutation
 *
 * @param request - function to call the graphql client
 */
class WorkflowStateCreateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the WorkflowStateCreate mutation and return a WorkflowStatePayload
     *
     * @param input - required input to pass to workflowStateCreate
     * @returns parsed response from WorkflowStateCreateMutation
     */
    fetch(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(WorkflowStateCreateDocument, {
                input,
            });
            const data = response.workflowStateCreate;
            return new WorkflowStatePayload(this._request, data);
        });
    }
}
/**
 * A fetchable WorkflowStateUpdate Mutation
 *
 * @param request - function to call the graphql client
 */
class WorkflowStateUpdateMutation extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the WorkflowStateUpdate mutation and return a WorkflowStatePayload
     *
     * @param id - required id to pass to workflowStateUpdate
     * @param input - required input to pass to workflowStateUpdate
     * @returns parsed response from WorkflowStateUpdateMutation
     */
    fetch(id, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(WorkflowStateUpdateDocument, {
                id,
                input,
            });
            const data = response.workflowStateUpdate;
            return new WorkflowStatePayload(this._request, data);
        });
    }
}
/**
 * A fetchable AttachmentIssue_Attachments Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to attachmentIssue
 * @param variables - variables without 'id' to pass into the AttachmentIssue_AttachmentsQuery
 */
class AttachmentIssue_AttachmentsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the AttachmentIssue_Attachments query and return a AttachmentConnection
     *
     * @param variables - variables without 'id' to pass into the AttachmentIssue_AttachmentsQuery
     * @returns parsed response from AttachmentIssue_AttachmentsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentIssue_AttachmentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.attachmentIssue.attachments;
            return new AttachmentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable AttachmentIssue_Children Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to attachmentIssue
 * @param variables - variables without 'id' to pass into the AttachmentIssue_ChildrenQuery
 */
class AttachmentIssue_ChildrenQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the AttachmentIssue_Children query and return a IssueConnection
     *
     * @param variables - variables without 'id' to pass into the AttachmentIssue_ChildrenQuery
     * @returns parsed response from AttachmentIssue_ChildrenQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentIssue_ChildrenDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.attachmentIssue.children;
            return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable AttachmentIssue_Comments Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to attachmentIssue
 * @param variables - variables without 'id' to pass into the AttachmentIssue_CommentsQuery
 */
class AttachmentIssue_CommentsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the AttachmentIssue_Comments query and return a CommentConnection
     *
     * @param variables - variables without 'id' to pass into the AttachmentIssue_CommentsQuery
     * @returns parsed response from AttachmentIssue_CommentsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentIssue_CommentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.attachmentIssue.comments;
            return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable AttachmentIssue_History Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to attachmentIssue
 * @param variables - variables without 'id' to pass into the AttachmentIssue_HistoryQuery
 */
class AttachmentIssue_HistoryQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the AttachmentIssue_History query and return a IssueHistoryConnection
     *
     * @param variables - variables without 'id' to pass into the AttachmentIssue_HistoryQuery
     * @returns parsed response from AttachmentIssue_HistoryQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentIssue_HistoryDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.attachmentIssue.history;
            return new IssueHistoryConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable AttachmentIssue_InverseRelations Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to attachmentIssue
 * @param variables - variables without 'id' to pass into the AttachmentIssue_InverseRelationsQuery
 */
class AttachmentIssue_InverseRelationsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the AttachmentIssue_InverseRelations query and return a IssueRelationConnection
     *
     * @param variables - variables without 'id' to pass into the AttachmentIssue_InverseRelationsQuery
     * @returns parsed response from AttachmentIssue_InverseRelationsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentIssue_InverseRelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.attachmentIssue.inverseRelations;
            return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable AttachmentIssue_Labels Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to attachmentIssue
 * @param variables - variables without 'id' to pass into the AttachmentIssue_LabelsQuery
 */
class AttachmentIssue_LabelsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the AttachmentIssue_Labels query and return a IssueLabelConnection
     *
     * @param variables - variables without 'id' to pass into the AttachmentIssue_LabelsQuery
     * @returns parsed response from AttachmentIssue_LabelsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentIssue_LabelsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.attachmentIssue.labels;
            return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable AttachmentIssue_Relations Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to attachmentIssue
 * @param variables - variables without 'id' to pass into the AttachmentIssue_RelationsQuery
 */
class AttachmentIssue_RelationsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the AttachmentIssue_Relations query and return a IssueRelationConnection
     *
     * @param variables - variables without 'id' to pass into the AttachmentIssue_RelationsQuery
     * @returns parsed response from AttachmentIssue_RelationsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentIssue_RelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.attachmentIssue.relations;
            return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable AttachmentIssue_Subscribers Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to attachmentIssue
 * @param variables - variables without 'id' to pass into the AttachmentIssue_SubscribersQuery
 */
class AttachmentIssue_SubscribersQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the AttachmentIssue_Subscribers query and return a UserConnection
     *
     * @param variables - variables without 'id' to pass into the AttachmentIssue_SubscribersQuery
     * @returns parsed response from AttachmentIssue_SubscribersQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(AttachmentIssue_SubscribersDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.attachmentIssue.subscribers;
            return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable BillingDetails_PaymentMethod Query
 *
 * @param request - function to call the graphql client
 */
class BillingDetails_PaymentMethodQuery extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * Call the BillingDetails_PaymentMethod query and return a Card
     *
     * @returns parsed response from BillingDetails_PaymentMethodQuery
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(BillingDetails_PaymentMethodDocument, {});
            const data = response.billingDetails.paymentMethod;
            return data ? new Card(this._request, data) : undefined;
        });
    }
}
/**
 * A fetchable CollaborativeDocumentJoin_Steps Query
 *
 * @param request - function to call the graphql client
 * @param clientId - required clientId to pass to collaborativeDocumentJoin
 * @param issueId - required issueId to pass to collaborativeDocumentJoin
 * @param version - required version to pass to collaborativeDocumentJoin
 */
class CollaborativeDocumentJoin_StepsQuery extends Request {
    constructor(request, clientId, issueId, version) {
        super(request);
        this._clientId = clientId;
        this._issueId = issueId;
        this._version = version;
    }
    /**
     * Call the CollaborativeDocumentJoin_Steps query and return a StepsResponse
     *
     * @returns parsed response from CollaborativeDocumentJoin_StepsQuery
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(CollaborativeDocumentJoin_StepsDocument, {
                clientId: this._clientId,
                issueId: this._issueId,
                version: this._version,
            });
            const data = response.collaborativeDocumentJoin.steps;
            return data ? new StepsResponse(this._request, data) : undefined;
        });
    }
}
/**
 * A fetchable Cycle_Issues Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to cycle
 * @param variables - variables without 'id' to pass into the Cycle_IssuesQuery
 */
class Cycle_IssuesQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Cycle_Issues query and return a IssueConnection
     *
     * @param variables - variables without 'id' to pass into the Cycle_IssuesQuery
     * @returns parsed response from Cycle_IssuesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Cycle_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.cycle.issues;
            return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Cycle_UncompletedIssuesUponClose Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to cycle
 * @param variables - variables without 'id' to pass into the Cycle_UncompletedIssuesUponCloseQuery
 */
class Cycle_UncompletedIssuesUponCloseQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Cycle_UncompletedIssuesUponClose query and return a IssueConnection
     *
     * @param variables - variables without 'id' to pass into the Cycle_UncompletedIssuesUponCloseQuery
     * @returns parsed response from Cycle_UncompletedIssuesUponCloseQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Cycle_UncompletedIssuesUponCloseDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.cycle.uncompletedIssuesUponClose;
            return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Favorite_Children Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to favorite
 * @param variables - variables without 'id' to pass into the Favorite_ChildrenQuery
 */
class Favorite_ChildrenQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Favorite_Children query and return a FavoriteConnection
     *
     * @param variables - variables without 'id' to pass into the Favorite_ChildrenQuery
     * @returns parsed response from Favorite_ChildrenQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Favorite_ChildrenDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.favorite.children;
            return new FavoriteConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable FigmaEmbedInfo_FigmaEmbed Query
 *
 * @param request - function to call the graphql client
 * @param fileId - required fileId to pass to figmaEmbedInfo
 * @param variables - variables without 'fileId' to pass into the FigmaEmbedInfo_FigmaEmbedQuery
 */
class FigmaEmbedInfo_FigmaEmbedQuery extends Request {
    constructor(request, fileId, variables) {
        super(request);
        this._fileId = fileId;
        this._variables = variables;
    }
    /**
     * Call the FigmaEmbedInfo_FigmaEmbed query and return a FigmaEmbed
     *
     * @param variables - variables without 'fileId' to pass into the FigmaEmbedInfo_FigmaEmbedQuery
     * @returns parsed response from FigmaEmbedInfo_FigmaEmbedQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(FigmaEmbedInfo_FigmaEmbedDocument, Object.assign(Object.assign({ fileId: this._fileId }, this._variables), variables));
            const data = response.figmaEmbedInfo.figmaEmbed;
            return data ? new FigmaEmbed(this._request, data) : undefined;
        });
    }
}
/**
 * A fetchable Issue_Attachments Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to issue
 * @param variables - variables without 'id' to pass into the Issue_AttachmentsQuery
 */
class Issue_AttachmentsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Issue_Attachments query and return a AttachmentConnection
     *
     * @param variables - variables without 'id' to pass into the Issue_AttachmentsQuery
     * @returns parsed response from Issue_AttachmentsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Issue_AttachmentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.issue.attachments;
            return new AttachmentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Issue_Children Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to issue
 * @param variables - variables without 'id' to pass into the Issue_ChildrenQuery
 */
class Issue_ChildrenQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Issue_Children query and return a IssueConnection
     *
     * @param variables - variables without 'id' to pass into the Issue_ChildrenQuery
     * @returns parsed response from Issue_ChildrenQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Issue_ChildrenDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.issue.children;
            return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Issue_Comments Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to issue
 * @param variables - variables without 'id' to pass into the Issue_CommentsQuery
 */
class Issue_CommentsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Issue_Comments query and return a CommentConnection
     *
     * @param variables - variables without 'id' to pass into the Issue_CommentsQuery
     * @returns parsed response from Issue_CommentsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Issue_CommentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.issue.comments;
            return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Issue_History Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to issue
 * @param variables - variables without 'id' to pass into the Issue_HistoryQuery
 */
class Issue_HistoryQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Issue_History query and return a IssueHistoryConnection
     *
     * @param variables - variables without 'id' to pass into the Issue_HistoryQuery
     * @returns parsed response from Issue_HistoryQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Issue_HistoryDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.issue.history;
            return new IssueHistoryConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Issue_InverseRelations Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to issue
 * @param variables - variables without 'id' to pass into the Issue_InverseRelationsQuery
 */
class Issue_InverseRelationsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Issue_InverseRelations query and return a IssueRelationConnection
     *
     * @param variables - variables without 'id' to pass into the Issue_InverseRelationsQuery
     * @returns parsed response from Issue_InverseRelationsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Issue_InverseRelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.issue.inverseRelations;
            return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Issue_Labels Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to issue
 * @param variables - variables without 'id' to pass into the Issue_LabelsQuery
 */
class Issue_LabelsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Issue_Labels query and return a IssueLabelConnection
     *
     * @param variables - variables without 'id' to pass into the Issue_LabelsQuery
     * @returns parsed response from Issue_LabelsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Issue_LabelsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.issue.labels;
            return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Issue_Relations Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to issue
 * @param variables - variables without 'id' to pass into the Issue_RelationsQuery
 */
class Issue_RelationsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Issue_Relations query and return a IssueRelationConnection
     *
     * @param variables - variables without 'id' to pass into the Issue_RelationsQuery
     * @returns parsed response from Issue_RelationsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Issue_RelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.issue.relations;
            return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Issue_Subscribers Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to issue
 * @param variables - variables without 'id' to pass into the Issue_SubscribersQuery
 */
class Issue_SubscribersQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Issue_Subscribers query and return a UserConnection
     *
     * @param variables - variables without 'id' to pass into the Issue_SubscribersQuery
     * @returns parsed response from Issue_SubscribersQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Issue_SubscribersDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.issue.subscribers;
            return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable IssueLabel_Issues Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to issueLabel
 * @param variables - variables without 'id' to pass into the IssueLabel_IssuesQuery
 */
class IssueLabel_IssuesQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the IssueLabel_Issues query and return a IssueConnection
     *
     * @param variables - variables without 'id' to pass into the IssueLabel_IssuesQuery
     * @returns parsed response from IssueLabel_IssuesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(IssueLabel_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.issueLabel.issues;
            return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Milestone_Projects Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to milestone
 * @param variables - variables without 'id' to pass into the Milestone_ProjectsQuery
 */
class Milestone_ProjectsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Milestone_Projects query and return a ProjectConnection
     *
     * @param variables - variables without 'id' to pass into the Milestone_ProjectsQuery
     * @returns parsed response from Milestone_ProjectsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Milestone_ProjectsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.milestone.projects;
            return new ProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Organization_Integrations Query
 *
 * @param request - function to call the graphql client
 * @param variables - variables to pass into the Organization_IntegrationsQuery
 */
class Organization_IntegrationsQuery extends Request {
    constructor(request, variables) {
        super(request);
        this._variables = variables;
    }
    /**
     * Call the Organization_Integrations query and return a IntegrationConnection
     *
     * @param variables - variables to pass into the Organization_IntegrationsQuery
     * @returns parsed response from Organization_IntegrationsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Organization_IntegrationsDocument, variables);
            const data = response.organization.integrations;
            return new IntegrationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Organization_Labels Query
 *
 * @param request - function to call the graphql client
 * @param variables - variables to pass into the Organization_LabelsQuery
 */
class Organization_LabelsQuery extends Request {
    constructor(request, variables) {
        super(request);
        this._variables = variables;
    }
    /**
     * Call the Organization_Labels query and return a IssueLabelConnection
     *
     * @param variables - variables to pass into the Organization_LabelsQuery
     * @returns parsed response from Organization_LabelsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Organization_LabelsDocument, variables);
            const data = response.organization.labels;
            return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Organization_Milestones Query
 *
 * @param request - function to call the graphql client
 * @param variables - variables to pass into the Organization_MilestonesQuery
 */
class Organization_MilestonesQuery extends Request {
    constructor(request, variables) {
        super(request);
        this._variables = variables;
    }
    /**
     * Call the Organization_Milestones query and return a MilestoneConnection
     *
     * @param variables - variables to pass into the Organization_MilestonesQuery
     * @returns parsed response from Organization_MilestonesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Organization_MilestonesDocument, variables);
            const data = response.organization.milestones;
            return new MilestoneConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Organization_Teams Query
 *
 * @param request - function to call the graphql client
 * @param variables - variables to pass into the Organization_TeamsQuery
 */
class Organization_TeamsQuery extends Request {
    constructor(request, variables) {
        super(request);
        this._variables = variables;
    }
    /**
     * Call the Organization_Teams query and return a TeamConnection
     *
     * @param variables - variables to pass into the Organization_TeamsQuery
     * @returns parsed response from Organization_TeamsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Organization_TeamsDocument, variables);
            const data = response.organization.teams;
            return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Organization_Templates Query
 *
 * @param request - function to call the graphql client
 * @param variables - variables to pass into the Organization_TemplatesQuery
 */
class Organization_TemplatesQuery extends Request {
    constructor(request, variables) {
        super(request);
        this._variables = variables;
    }
    /**
     * Call the Organization_Templates query and return a TemplateConnection
     *
     * @param variables - variables to pass into the Organization_TemplatesQuery
     * @returns parsed response from Organization_TemplatesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Organization_TemplatesDocument, variables);
            const data = response.organization.templates;
            return new TemplateConnection(this._request, data);
        });
    }
}
/**
 * A fetchable Organization_Users Query
 *
 * @param request - function to call the graphql client
 * @param variables - variables to pass into the Organization_UsersQuery
 */
class Organization_UsersQuery extends Request {
    constructor(request, variables) {
        super(request);
        this._variables = variables;
    }
    /**
     * Call the Organization_Users query and return a UserConnection
     *
     * @param variables - variables to pass into the Organization_UsersQuery
     * @returns parsed response from Organization_UsersQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Organization_UsersDocument, variables);
            const data = response.organization.users;
            return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Project_Documents Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to project
 * @param variables - variables without 'id' to pass into the Project_DocumentsQuery
 */
class Project_DocumentsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Project_Documents query and return a DocumentConnection
     *
     * @param variables - variables without 'id' to pass into the Project_DocumentsQuery
     * @returns parsed response from Project_DocumentsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Project_DocumentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.project.documents;
            return new DocumentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Project_Issues Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to project
 * @param variables - variables without 'id' to pass into the Project_IssuesQuery
 */
class Project_IssuesQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Project_Issues query and return a IssueConnection
     *
     * @param variables - variables without 'id' to pass into the Project_IssuesQuery
     * @returns parsed response from Project_IssuesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Project_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.project.issues;
            return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Project_Links Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to project
 * @param variables - variables without 'id' to pass into the Project_LinksQuery
 */
class Project_LinksQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Project_Links query and return a ProjectLinkConnection
     *
     * @param variables - variables without 'id' to pass into the Project_LinksQuery
     * @returns parsed response from Project_LinksQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Project_LinksDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.project.links;
            return new ProjectLinkConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Project_Members Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to project
 * @param variables - variables without 'id' to pass into the Project_MembersQuery
 */
class Project_MembersQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Project_Members query and return a UserConnection
     *
     * @param variables - variables without 'id' to pass into the Project_MembersQuery
     * @returns parsed response from Project_MembersQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Project_MembersDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.project.members;
            return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Project_Teams Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to project
 * @param variables - variables without 'id' to pass into the Project_TeamsQuery
 */
class Project_TeamsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Project_Teams query and return a TeamConnection
     *
     * @param variables - variables without 'id' to pass into the Project_TeamsQuery
     * @returns parsed response from Project_TeamsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Project_TeamsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.project.teams;
            return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Team_Cycles Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to team
 * @param variables - variables without 'id' to pass into the Team_CyclesQuery
 */
class Team_CyclesQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Team_Cycles query and return a CycleConnection
     *
     * @param variables - variables without 'id' to pass into the Team_CyclesQuery
     * @returns parsed response from Team_CyclesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Team_CyclesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.team.cycles;
            return new CycleConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Team_Issues Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to team
 * @param variables - variables without 'id' to pass into the Team_IssuesQuery
 */
class Team_IssuesQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Team_Issues query and return a IssueConnection
     *
     * @param variables - variables without 'id' to pass into the Team_IssuesQuery
     * @returns parsed response from Team_IssuesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Team_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.team.issues;
            return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Team_Labels Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to team
 * @param variables - variables without 'id' to pass into the Team_LabelsQuery
 */
class Team_LabelsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Team_Labels query and return a IssueLabelConnection
     *
     * @param variables - variables without 'id' to pass into the Team_LabelsQuery
     * @returns parsed response from Team_LabelsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Team_LabelsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.team.labels;
            return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Team_Members Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to team
 * @param variables - variables without 'id' to pass into the Team_MembersQuery
 */
class Team_MembersQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Team_Members query and return a UserConnection
     *
     * @param variables - variables without 'id' to pass into the Team_MembersQuery
     * @returns parsed response from Team_MembersQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Team_MembersDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.team.members;
            return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Team_Memberships Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to team
 * @param variables - variables without 'id' to pass into the Team_MembershipsQuery
 */
class Team_MembershipsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Team_Memberships query and return a TeamMembershipConnection
     *
     * @param variables - variables without 'id' to pass into the Team_MembershipsQuery
     * @returns parsed response from Team_MembershipsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Team_MembershipsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.team.memberships;
            return new TeamMembershipConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Team_Projects Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to team
 * @param variables - variables without 'id' to pass into the Team_ProjectsQuery
 */
class Team_ProjectsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Team_Projects query and return a ProjectConnection
     *
     * @param variables - variables without 'id' to pass into the Team_ProjectsQuery
     * @returns parsed response from Team_ProjectsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Team_ProjectsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.team.projects;
            return new ProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Team_States Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to team
 * @param variables - variables without 'id' to pass into the Team_StatesQuery
 */
class Team_StatesQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Team_States query and return a WorkflowStateConnection
     *
     * @param variables - variables without 'id' to pass into the Team_StatesQuery
     * @returns parsed response from Team_StatesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Team_StatesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.team.states;
            return new WorkflowStateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Team_Templates Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to team
 * @param variables - variables without 'id' to pass into the Team_TemplatesQuery
 */
class Team_TemplatesQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Team_Templates query and return a TemplateConnection
     *
     * @param variables - variables without 'id' to pass into the Team_TemplatesQuery
     * @returns parsed response from Team_TemplatesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Team_TemplatesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.team.templates;
            return new TemplateConnection(this._request, data);
        });
    }
}
/**
 * A fetchable Team_Webhooks Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to team
 * @param variables - variables without 'id' to pass into the Team_WebhooksQuery
 */
class Team_WebhooksQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the Team_Webhooks query and return a WebhookConnection
     *
     * @param variables - variables without 'id' to pass into the Team_WebhooksQuery
     * @returns parsed response from Team_WebhooksQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Team_WebhooksDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.team.webhooks;
            return new WebhookConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable User_AssignedIssues Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to user
 * @param variables - variables without 'id' to pass into the User_AssignedIssuesQuery
 */
class User_AssignedIssuesQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the User_AssignedIssues query and return a IssueConnection
     *
     * @param variables - variables without 'id' to pass into the User_AssignedIssuesQuery
     * @returns parsed response from User_AssignedIssuesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(User_AssignedIssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.user.assignedIssues;
            return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable User_CreatedIssues Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to user
 * @param variables - variables without 'id' to pass into the User_CreatedIssuesQuery
 */
class User_CreatedIssuesQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the User_CreatedIssues query and return a IssueConnection
     *
     * @param variables - variables without 'id' to pass into the User_CreatedIssuesQuery
     * @returns parsed response from User_CreatedIssuesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(User_CreatedIssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.user.createdIssues;
            return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable User_TeamMemberships Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to user
 * @param variables - variables without 'id' to pass into the User_TeamMembershipsQuery
 */
class User_TeamMembershipsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the User_TeamMemberships query and return a TeamMembershipConnection
     *
     * @param variables - variables without 'id' to pass into the User_TeamMembershipsQuery
     * @returns parsed response from User_TeamMembershipsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(User_TeamMembershipsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.user.teamMemberships;
            return new TeamMembershipConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable User_Teams Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to user
 * @param variables - variables without 'id' to pass into the User_TeamsQuery
 */
class User_TeamsQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the User_Teams query and return a TeamConnection
     *
     * @param variables - variables without 'id' to pass into the User_TeamsQuery
     * @returns parsed response from User_TeamsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(User_TeamsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.user.teams;
            return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Viewer_AssignedIssues Query
 *
 * @param request - function to call the graphql client
 * @param variables - variables to pass into the Viewer_AssignedIssuesQuery
 */
class Viewer_AssignedIssuesQuery extends Request {
    constructor(request, variables) {
        super(request);
        this._variables = variables;
    }
    /**
     * Call the Viewer_AssignedIssues query and return a IssueConnection
     *
     * @param variables - variables to pass into the Viewer_AssignedIssuesQuery
     * @returns parsed response from Viewer_AssignedIssuesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Viewer_AssignedIssuesDocument, variables);
            const data = response.viewer.assignedIssues;
            return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Viewer_CreatedIssues Query
 *
 * @param request - function to call the graphql client
 * @param variables - variables to pass into the Viewer_CreatedIssuesQuery
 */
class Viewer_CreatedIssuesQuery extends Request {
    constructor(request, variables) {
        super(request);
        this._variables = variables;
    }
    /**
     * Call the Viewer_CreatedIssues query and return a IssueConnection
     *
     * @param variables - variables to pass into the Viewer_CreatedIssuesQuery
     * @returns parsed response from Viewer_CreatedIssuesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Viewer_CreatedIssuesDocument, variables);
            const data = response.viewer.createdIssues;
            return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Viewer_TeamMemberships Query
 *
 * @param request - function to call the graphql client
 * @param variables - variables to pass into the Viewer_TeamMembershipsQuery
 */
class Viewer_TeamMembershipsQuery extends Request {
    constructor(request, variables) {
        super(request);
        this._variables = variables;
    }
    /**
     * Call the Viewer_TeamMemberships query and return a TeamMembershipConnection
     *
     * @param variables - variables to pass into the Viewer_TeamMembershipsQuery
     * @returns parsed response from Viewer_TeamMembershipsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Viewer_TeamMembershipsDocument, variables);
            const data = response.viewer.teamMemberships;
            return new TeamMembershipConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable Viewer_Teams Query
 *
 * @param request - function to call the graphql client
 * @param variables - variables to pass into the Viewer_TeamsQuery
 */
class Viewer_TeamsQuery extends Request {
    constructor(request, variables) {
        super(request);
        this._variables = variables;
    }
    /**
     * Call the Viewer_Teams query and return a TeamConnection
     *
     * @param variables - variables to pass into the Viewer_TeamsQuery
     * @returns parsed response from Viewer_TeamsQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(Viewer_TeamsDocument, variables);
            const data = response.viewer.teams;
            return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * A fetchable WorkflowState_Issues Query
 *
 * @param request - function to call the graphql client
 * @param id - required id to pass to workflowState
 * @param variables - variables without 'id' to pass into the WorkflowState_IssuesQuery
 */
class WorkflowState_IssuesQuery extends Request {
    constructor(request, id, variables) {
        super(request);
        this._id = id;
        this._variables = variables;
    }
    /**
     * Call the WorkflowState_Issues query and return a IssueConnection
     *
     * @param variables - variables without 'id' to pass into the WorkflowState_IssuesQuery
     * @returns parsed response from WorkflowState_IssuesQuery
     */
    fetch(variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(WorkflowState_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
            const data = response.workflowState.issues;
            return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
        });
    }
}
/**
 * The SDK class containing all root operations
 *
 * @param request - function to call the graphql client
 */
class LinearSdk extends Request {
    constructor(request) {
        super(request);
    }
    /**
     * All teams you the user can administrate. Administrable teams are teams whose settings the user can change, but to whose issues the user doesn't necessarily have access to.
     *
     * @param variables - variables to pass into the AdministrableTeamsQuery
     * @returns TeamConnection
     */
    administrableTeams(variables) {
        return new AdministrableTeamsQuery(this._request).fetch(variables);
    }
    /**
     * Get information for an application and whether a user has approved it for the given scopes.
     *
     * @param clientId - required clientId to pass to applicationWithAuthorization
     * @param scope - required scope to pass to applicationWithAuthorization
     * @param variables - variables without 'clientId', 'scope' to pass into the ApplicationWithAuthorizationQuery
     * @returns UserAuthorizedApplication
     */
    applicationWithAuthorization(clientId, scope, variables) {
        return new ApplicationWithAuthorizationQuery(this._request).fetch(clientId, scope, variables);
    }
    /**
     * [Alpha] One specific issue attachment.
     * [Deprecated] 'url' can no longer be used as the 'id' parameter. Use 'attachmentsForUrl' instead
     *
     * @param id - required id to pass to attachment
     * @returns Attachment
     */
    attachment(id) {
        return new AttachmentQuery(this._request).fetch(id);
    }
    /**
     * [Alpha] Query an issue by its associated attachment, and its id.
     *
     * @param id - required id to pass to attachmentIssue
     * @returns Issue
     */
    attachmentIssue(id) {
        return new AttachmentIssueQuery(this._request).fetch(id);
    }
    /**
     * [Alpha] All issue attachments.
     *
     * To get attachments for a given URL, use `attachmentsForURL` query.
     *
     * @param variables - variables to pass into the AttachmentsQuery
     * @returns AttachmentConnection
     */
    attachments(variables) {
        return new AttachmentsQuery(this._request).fetch(variables);
    }
    /**
     * [Alpha] Returns issue attachments for a given `url`.
     *
     * @param url - required url to pass to attachmentsForURL
     * @param variables - variables without 'url' to pass into the AttachmentsForUrlQuery
     * @returns AttachmentConnection
     */
    attachmentsForURL(url, variables) {
        return new AttachmentsForUrlQuery(this._request).fetch(url, variables);
    }
    /**
     * All audit log entries.
     *
     * @param variables - variables to pass into the AuditEntriesQuery
     * @returns AuditEntryConnection
     */
    auditEntries(variables) {
        return new AuditEntriesQuery(this._request).fetch(variables);
    }
    /**
     * List of audit entry types.
     *
     * @returns AuditEntryType[]
     */
    get auditEntryTypes() {
        return new AuditEntryTypesQuery(this._request).fetch();
    }
    /**
     * Get all authorized applications for a user
     *
     * @returns AuthorizedApplication[]
     */
    get authorizedApplications() {
        return new AuthorizedApplicationsQuery(this._request).fetch();
    }
    /**
     * Fetch users belonging to this user account.
     *
     * @returns AuthResolverResponse
     */
    get availableUsers() {
        return new AvailableUsersQuery(this._request).fetch();
    }
    /**
     * Billing details for the customer.
     *
     * @returns BillingDetailsPayload
     */
    get billingDetails() {
        return new BillingDetailsQuery(this._request).fetch();
    }
    /**
     * Join collaborative document and get missing steps.
     *
     * @param clientId - required clientId to pass to collaborativeDocumentJoin
     * @param issueId - required issueId to pass to collaborativeDocumentJoin
     * @param version - required version to pass to collaborativeDocumentJoin
     * @returns CollaborationDocumentUpdatePayload
     */
    collaborativeDocumentJoin(clientId, issueId, version) {
        return new CollaborativeDocumentJoinQuery(this._request).fetch(clientId, issueId, version);
    }
    /**
     * A specific comment.
     *
     * @param id - required id to pass to comment
     * @returns Comment
     */
    comment(id) {
        return new CommentQuery(this._request).fetch(id);
    }
    /**
     * All comments.
     *
     * @param variables - variables to pass into the CommentsQuery
     * @returns CommentConnection
     */
    comments(variables) {
        return new CommentsQuery(this._request).fetch(variables);
    }
    /**
     * One specific custom view.
     *
     * @param id - required id to pass to customView
     * @returns CustomView
     */
    customView(id) {
        return new CustomViewQuery(this._request).fetch(id);
    }
    /**
     * Custom views for the user.
     *
     * @param variables - variables to pass into the CustomViewsQuery
     * @returns CustomViewConnection
     */
    customViews(variables) {
        return new CustomViewsQuery(this._request).fetch(variables);
    }
    /**
     * One specific cycle.
     *
     * @param id - required id to pass to cycle
     * @returns Cycle
     */
    cycle(id) {
        return new CycleQuery(this._request).fetch(id);
    }
    /**
     * All cycles.
     *
     * @param variables - variables to pass into the CyclesQuery
     * @returns CycleConnection
     */
    cycles(variables) {
        return new CyclesQuery(this._request).fetch(variables);
    }
    /**
     * One specific document.
     *
     * @param id - required id to pass to document
     * @returns Document
     */
    document(id) {
        return new DocumentQuery(this._request).fetch(id);
    }
    /**
     * All documents for the project.
     *
     * @param variables - variables to pass into the DocumentsQuery
     * @returns DocumentConnection
     */
    documents(variables) {
        return new DocumentsQuery(this._request).fetch(variables);
    }
    /**
     * A specific emoji.
     *
     * @param id - required id to pass to emoji
     * @returns Emoji
     */
    emoji(id) {
        return new EmojiQuery(this._request).fetch(id);
    }
    /**
     * All custom emojis.
     *
     * @param variables - variables to pass into the EmojisQuery
     * @returns EmojiConnection
     */
    emojis(variables) {
        return new EmojisQuery(this._request).fetch(variables);
    }
    /**
     * One specific favorite.
     *
     * @param id - required id to pass to favorite
     * @returns Favorite
     */
    favorite(id) {
        return new FavoriteQuery(this._request).fetch(id);
    }
    /**
     * The user's favorites.
     *
     * @param variables - variables to pass into the FavoritesQuery
     * @returns FavoriteConnection
     */
    favorites(variables) {
        return new FavoritesQuery(this._request).fetch(variables);
    }
    /**
     * Fetch Figma screenshot and other information with file and node identifiers.
     *
     * @param fileId - required fileId to pass to figmaEmbedInfo
     * @param variables - variables without 'fileId' to pass into the FigmaEmbedInfoQuery
     * @returns FigmaEmbedPayload
     */
    figmaEmbedInfo(fileId, variables) {
        return new FigmaEmbedInfoQuery(this._request).fetch(fileId, variables);
    }
    /**
     * One specific integration.
     *
     * @param id - required id to pass to integration
     * @returns Integration
     */
    integration(id) {
        return new IntegrationQuery(this._request).fetch(id);
    }
    /**
     * All integrations.
     *
     * @param variables - variables to pass into the IntegrationsQuery
     * @returns IntegrationConnection
     */
    integrations(variables) {
        return new IntegrationsQuery(this._request).fetch(variables);
    }
    /**
     * One specific issue.
     *
     * @param id - required id to pass to issue
     * @returns Issue
     */
    issue(id) {
        return new IssueQuery(this._request).fetch(id);
    }
    /**
     * Fetches the GitHub token, completing the OAuth flow.
     *
     * @param code - required code to pass to issueImportFinishGithubOAuth
     * @returns GithubOAuthTokenPayload
     */
    issueImportFinishGithubOAuth(code) {
        return new IssueImportFinishGithubOAuthQuery(this._request).fetch(code);
    }
    /**
     * One specific label.
     *
     * @param id - required id to pass to issueLabel
     * @returns IssueLabel
     */
    issueLabel(id) {
        return new IssueLabelQuery(this._request).fetch(id);
    }
    /**
     * All issue labels.
     *
     * @param variables - variables to pass into the IssueLabelsQuery
     * @returns IssueLabelConnection
     */
    issueLabels(variables) {
        return new IssueLabelsQuery(this._request).fetch(variables);
    }
    /**
     * Issue priority values and corresponding labels.
     *
     * @returns IssuePriorityValue[]
     */
    get issuePriorityValues() {
        return new IssuePriorityValuesQuery(this._request).fetch();
    }
    /**
     * One specific issue relation.
     *
     * @param id - required id to pass to issueRelation
     * @returns IssueRelation
     */
    issueRelation(id) {
        return new IssueRelationQuery(this._request).fetch(id);
    }
    /**
     * All issue relationships.
     *
     * @param variables - variables to pass into the IssueRelationsQuery
     * @returns IssueRelationConnection
     */
    issueRelations(variables) {
        return new IssueRelationsQuery(this._request).fetch(variables);
    }
    /**
     * [ALPHA] Search issues. This query is experimental and is subject to change without notice.
     *
     * @param query - required query to pass to issueSearch
     * @param variables - variables without 'query' to pass into the IssueSearchQuery
     * @returns IssueConnection
     */
    issueSearch(query, variables) {
        return new IssueSearchQuery(this._request).fetch(query, variables);
    }
    /**
     * All issues.
     *
     * @param variables - variables to pass into the IssuesQuery
     * @returns IssueConnection
     */
    issues(variables) {
        return new IssuesQuery(this._request).fetch(variables);
    }
    /**
     * One specific milestone.
     *
     * @param id - required id to pass to milestone
     * @returns Milestone
     */
    milestone(id) {
        return new MilestoneQuery(this._request).fetch(id);
    }
    /**
     * All milestones.
     *
     * @param variables - variables to pass into the MilestonesQuery
     * @returns MilestoneConnection
     */
    milestones(variables) {
        return new MilestonesQuery(this._request).fetch(variables);
    }
    /**
     * One specific notification.
     *
     * @param id - required id to pass to notification
     * @returns Notification
     */
    notification(id) {
        return new NotificationQuery(this._request).fetch(id);
    }
    /**
     * One specific notification subscription.
     *
     * @param id - required id to pass to notificationSubscription
     * @returns NotificationSubscription
     */
    notificationSubscription(id) {
        return new NotificationSubscriptionQuery(this._request).fetch(id);
    }
    /**
     * The user's notification subscriptions.
     *
     * @param variables - variables to pass into the NotificationSubscriptionsQuery
     * @returns NotificationSubscriptionConnection
     */
    notificationSubscriptions(variables) {
        return new NotificationSubscriptionsQuery(this._request).fetch(variables);
    }
    /**
     * All notifications.
     *
     * @param variables - variables to pass into the NotificationsQuery
     * @returns NotificationConnection
     */
    notifications(variables) {
        return new NotificationsQuery(this._request).fetch(variables);
    }
    /**
     * The user's organization.
     *
     * @returns Organization
     */
    get organization() {
        return new OrganizationQuery(this._request).fetch();
    }
    /**
     * Does the organization exist.
     *
     * @param urlKey - required urlKey to pass to organizationExists
     * @returns OrganizationExistsPayload
     */
    organizationExists(urlKey) {
        return new OrganizationExistsQuery(this._request).fetch(urlKey);
    }
    /**
     * One specific organization invite.
     *
     * @param id - required id to pass to organizationInvite
     * @returns OrganizationInvite
     */
    organizationInvite(id) {
        return new OrganizationInviteQuery(this._request).fetch(id);
    }
    /**
     * One specific organization invite.
     *
     * @param id - required id to pass to organizationInviteDetails
     * @returns OrganizationInviteDetailsPayload
     */
    organizationInviteDetails(id) {
        return new OrganizationInviteDetailsQuery(this._request).fetch(id);
    }
    /**
     * All invites for the organization.
     *
     * @param variables - variables to pass into the OrganizationInvitesQuery
     * @returns OrganizationInviteConnection
     */
    organizationInvites(variables) {
        return new OrganizationInvitesQuery(this._request).fetch(variables);
    }
    /**
     * One specific project.
     *
     * @param id - required id to pass to project
     * @returns Project
     */
    project(id) {
        return new ProjectQuery(this._request).fetch(id);
    }
    /**
     * One specific project link.
     *
     * @param id - required id to pass to projectLink
     * @returns ProjectLink
     */
    projectLink(id) {
        return new ProjectLinkQuery(this._request).fetch(id);
    }
    /**
     * All links for the project.
     *
     * @param variables - variables to pass into the ProjectLinksQuery
     * @returns ProjectLinkConnection
     */
    projectLinks(variables) {
        return new ProjectLinksQuery(this._request).fetch(variables);
    }
    /**
     * All projects.
     *
     * @param variables - variables to pass into the ProjectsQuery
     * @returns ProjectConnection
     */
    projects(variables) {
        return new ProjectsQuery(this._request).fetch(variables);
    }
    /**
     * Sends a test push message.
     *
     * @returns PushSubscriptionTestPayload
     */
    get pushSubscriptionTest() {
        return new PushSubscriptionTestQuery(this._request).fetch();
    }
    /**
     * A specific reaction.
     *
     * @param id - required id to pass to reaction
     * @returns Reaction
     */
    reaction(id) {
        return new ReactionQuery(this._request).fetch(id);
    }
    /**
     * All comment emoji reactions.
     *
     * @param variables - variables to pass into the ReactionsQuery
     * @returns ReactionConnection
     */
    reactions(variables) {
        return new ReactionsQuery(this._request).fetch(variables);
    }
    /**
     * Fetch SSO login URL for the email provided.
     *
     * @param email - required email to pass to ssoUrlFromEmail
     * @param variables - variables without 'email' to pass into the SsoUrlFromEmailQuery
     * @returns SsoUrlFromEmailResponse
     */
    ssoUrlFromEmail(email, variables) {
        return new SsoUrlFromEmailQuery(this._request).fetch(email, variables);
    }
    /**
     * The organization's subscription.
     *
     * @returns Subscription
     */
    get subscription() {
        return new SubscriptionQuery(this._request).fetch();
    }
    /**
     * One specific team.
     *
     * @param id - required id to pass to team
     * @returns Team
     */
    team(id) {
        return new TeamQuery(this._request).fetch(id);
    }
    /**
     * One specific team membership.
     *
     * @param id - required id to pass to teamMembership
     * @returns TeamMembership
     */
    teamMembership(id) {
        return new TeamMembershipQuery(this._request).fetch(id);
    }
    /**
     * All team memberships.
     *
     * @param variables - variables to pass into the TeamMembershipsQuery
     * @returns TeamMembershipConnection
     */
    teamMemberships(variables) {
        return new TeamMembershipsQuery(this._request).fetch(variables);
    }
    /**
     * All teams whose issues can be accessed by the user. This might be different from `administrableTeams`, which also includes teams whose settings can be changed by the user.
     *
     * @param variables - variables to pass into the TeamsQuery
     * @returns TeamConnection
     */
    teams(variables) {
        return new TeamsQuery(this._request).fetch(variables);
    }
    /**
     * A specific template.
     *
     * @param id - required id to pass to template
     * @returns Template
     */
    template(id) {
        return new TemplateQuery(this._request).fetch(id);
    }
    /**
     * All templates from all users.
     *
     * @returns Template[]
     */
    get templates() {
        return new TemplatesQuery(this._request).fetch();
    }
    /**
     * One specific user.
     *
     * @param id - required id to pass to user
     * @returns User
     */
    user(id) {
        return new UserQuery(this._request).fetch(id);
    }
    /**
     * The user's settings.
     *
     * @returns UserSettings
     */
    get userSettings() {
        return new UserSettingsQuery(this._request).fetch();
    }
    /**
     * All users for the organization.
     *
     * @param variables - variables to pass into the UsersQuery
     * @returns UserConnection
     */
    users(variables) {
        return new UsersQuery(this._request).fetch(variables);
    }
    /**
     * The currently authenticated user.
     *
     * @returns User
     */
    get viewer() {
        return new ViewerQuery(this._request).fetch();
    }
    /**
     * A specific webhook.
     *
     * @param id - required id to pass to webhook
     * @returns Webhook
     */
    webhook(id) {
        return new WebhookQuery(this._request).fetch(id);
    }
    /**
     * All webhooks.
     *
     * @param variables - variables to pass into the WebhooksQuery
     * @returns WebhookConnection
     */
    webhooks(variables) {
        return new WebhooksQuery(this._request).fetch(variables);
    }
    /**
     * One specific state.
     *
     * @param id - required id to pass to workflowState
     * @returns WorkflowState
     */
    workflowState(id) {
        return new WorkflowStateQuery(this._request).fetch(id);
    }
    /**
     * All issue workflow states.
     *
     * @param variables - variables to pass into the WorkflowStatesQuery
     * @returns WorkflowStateConnection
     */
    workflowStates(variables) {
        return new WorkflowStatesQuery(this._request).fetch(variables);
    }
    /**
     * [DEPRECATED] Archives an issue attachment.
     *
     * @param id - required id to pass to attachmentArchive
     * @returns ArchivePayload
     */
    attachmentArchive(id) {
        return new AttachmentArchiveMutation(this._request).fetch(id);
    }
    /**
     * [Alpha] Creates a new attachment, or updates existing if the same `url` and `issueId` is used.
     *
     * @param input - required input to pass to attachmentCreate
     * @returns AttachmentPayload
     */
    attachmentCreate(input) {
        return new AttachmentCreateMutation(this._request).fetch(input);
    }
    /**
     * [Alpha] Deletes an issue attachment.
     *
     * @param id - required id to pass to attachmentDelete
     * @returns ArchivePayload
     */
    attachmentDelete(id) {
        return new AttachmentDeleteMutation(this._request).fetch(id);
    }
    /**
     * Link an existing Front conversation to an issue.
     *
     * @param conversationId - required conversationId to pass to attachmentLinkFront
     * @param issueId - required issueId to pass to attachmentLinkFront
     * @returns FrontAttachmentPayload
     */
    attachmentLinkFront(conversationId, issueId) {
        return new AttachmentLinkFrontMutation(this._request).fetch(conversationId, issueId);
    }
    /**
     * Link an existing Intercom conversation to an issue.
     *
     * @param conversationId - required conversationId to pass to attachmentLinkIntercom
     * @param issueId - required issueId to pass to attachmentLinkIntercom
     * @returns AttachmentPayload
     */
    attachmentLinkIntercom(conversationId, issueId) {
        return new AttachmentLinkIntercomMutation(this._request).fetch(conversationId, issueId);
    }
    /**
     * Link an existing Jira issue to an issue.
     *
     * @param issueId - required issueId to pass to attachmentLinkJiraIssue
     * @param jiraIssueId - required jiraIssueId to pass to attachmentLinkJiraIssue
     * @returns AttachmentPayload
     */
    attachmentLinkJiraIssue(issueId, jiraIssueId) {
        return new AttachmentLinkJiraIssueMutation(this._request).fetch(issueId, jiraIssueId);
    }
    /**
     * Link any url to an issue.
     *
     * @param issueId - required issueId to pass to attachmentLinkURL
     * @param url - required url to pass to attachmentLinkURL
     * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkUrlMutation
     * @returns AttachmentPayload
     */
    attachmentLinkURL(issueId, url, variables) {
        return new AttachmentLinkUrlMutation(this._request).fetch(issueId, url, variables);
    }
    /**
     * Link an existing Zendesk ticket to an issue.
     *
     * @param issueId - required issueId to pass to attachmentLinkZendesk
     * @param ticketId - required ticketId to pass to attachmentLinkZendesk
     * @returns AttachmentPayload
     */
    attachmentLinkZendesk(issueId, ticketId) {
        return new AttachmentLinkZendeskMutation(this._request).fetch(issueId, ticketId);
    }
    /**
     * [Alpha] Updates an existing issue attachment.
     *
     * @param id - required id to pass to attachmentUpdate
     * @param input - required input to pass to attachmentUpdate
     * @returns AttachmentPayload
     */
    attachmentUpdate(id, input) {
        return new AttachmentUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Updates the billing email address for the customer.
     *
     * @param input - required input to pass to billingEmailUpdate
     * @returns BillingEmailPayload
     */
    billingEmailUpdate(input) {
        return new BillingEmailUpdateMutation(this._request).fetch(input);
    }
    /**
     * Update collaborative document with client steps.
     *
     * @param input - required input to pass to collaborativeDocumentUpdate
     * @returns CollaborationDocumentUpdatePayload
     */
    collaborativeDocumentUpdate(input) {
        return new CollaborativeDocumentUpdateMutation(this._request).fetch(input);
    }
    /**
     * Creates a new comment.
     *
     * @param input - required input to pass to commentCreate
     * @returns CommentPayload
     */
    commentCreate(input) {
        return new CommentCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes a comment.
     *
     * @param id - required id to pass to commentDelete
     * @returns ArchivePayload
     */
    commentDelete(id) {
        return new CommentDeleteMutation(this._request).fetch(id);
    }
    /**
     * Updates a comment.
     *
     * @param id - required id to pass to commentUpdate
     * @param input - required input to pass to commentUpdate
     * @returns CommentPayload
     */
    commentUpdate(id, input) {
        return new CommentUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Saves user message.
     *
     * @param input - required input to pass to contactCreate
     * @returns ContactPayload
     */
    contactCreate(input) {
        return new ContactCreateMutation(this._request).fetch(input);
    }
    /**
     * Create CSV export report for the organization.
     *
     * @param variables - variables to pass into the CreateCsvExportReportMutation
     * @returns CreateCsvExportReportPayload
     */
    createCsvExportReport(variables) {
        return new CreateCsvExportReportMutation(this._request).fetch(variables);
    }
    /**
     * Creates an organization from onboarding.
     *
     * @param input - required input to pass to createOrganizationFromOnboarding
     * @param variables - variables without 'input' to pass into the CreateOrganizationFromOnboardingMutation
     * @returns CreateOrJoinOrganizationResponse
     */
    createOrganizationFromOnboarding(input, variables) {
        return new CreateOrganizationFromOnboardingMutation(this._request).fetch(input, variables);
    }
    /**
     * Creates a new custom view.
     *
     * @param input - required input to pass to customViewCreate
     * @returns CustomViewPayload
     */
    customViewCreate(input) {
        return new CustomViewCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes a custom view.
     *
     * @param id - required id to pass to customViewDelete
     * @returns ArchivePayload
     */
    customViewDelete(id) {
        return new CustomViewDeleteMutation(this._request).fetch(id);
    }
    /**
     * Updates a custom view.
     *
     * @param id - required id to pass to customViewUpdate
     * @param input - required input to pass to customViewUpdate
     * @returns CustomViewPayload
     */
    customViewUpdate(id, input) {
        return new CustomViewUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Archives a cycle.
     *
     * @param id - required id to pass to cycleArchive
     * @returns ArchivePayload
     */
    cycleArchive(id) {
        return new CycleArchiveMutation(this._request).fetch(id);
    }
    /**
     * Creates a new cycle.
     *
     * @param input - required input to pass to cycleCreate
     * @returns CyclePayload
     */
    cycleCreate(input) {
        return new CycleCreateMutation(this._request).fetch(input);
    }
    /**
     * Updates a cycle.
     *
     * @param id - required id to pass to cycleUpdate
     * @param input - required input to pass to cycleUpdate
     * @returns CyclePayload
     */
    cycleUpdate(id, input) {
        return new CycleUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Always fails with internal error. Used to debug logging.
     *
     * @returns DebugPayload
     */
    get debugFailWithInternalError() {
        return new DebugFailWithInternalErrorMutation(this._request).fetch();
    }
    /**
     * Creates a new document.
     *
     * @param input - required input to pass to documentCreate
     * @returns DocumentPayload
     */
    documentCreate(input) {
        return new DocumentCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes a document.
     *
     * @param id - required id to pass to documentDelete
     * @returns ArchivePayload
     */
    documentDelete(id) {
        return new DocumentDeleteMutation(this._request).fetch(id);
    }
    /**
     * Updates a document.
     *
     * @param id - required id to pass to documentUpdate
     * @param input - required input to pass to documentUpdate
     * @returns DocumentPayload
     */
    documentUpdate(id, input) {
        return new DocumentUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Subscribes the email to the newsletter.
     *
     * @param input - required input to pass to emailSubscribe
     * @returns EmailSubscribePayload
     */
    emailSubscribe(input) {
        return new EmailSubscribeMutation(this._request).fetch(input);
    }
    /**
     * Authenticates a user account via email and authentication token.
     *
     * @param input - required input to pass to emailTokenUserAccountAuth
     * @returns AuthResolverResponse
     */
    emailTokenUserAccountAuth(input) {
        return new EmailTokenUserAccountAuthMutation(this._request).fetch(input);
    }
    /**
     * Unsubscribes the user from one type of emails.
     *
     * @param input - required input to pass to emailUnsubscribe
     * @returns EmailUnsubscribePayload
     */
    emailUnsubscribe(input) {
        return new EmailUnsubscribeMutation(this._request).fetch(input);
    }
    /**
     * Finds or creates a new user account by email and sends an email with token.
     *
     * @param input - required input to pass to emailUserAccountAuthChallenge
     * @returns EmailUserAccountAuthChallengeResponse
     */
    emailUserAccountAuthChallenge(input) {
        return new EmailUserAccountAuthChallengeMutation(this._request).fetch(input);
    }
    /**
     * Creates a custom emoji.
     *
     * @param input - required input to pass to emojiCreate
     * @returns EmojiPayload
     */
    emojiCreate(input) {
        return new EmojiCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes an emoji.
     *
     * @param id - required id to pass to emojiDelete
     * @returns ArchivePayload
     */
    emojiDelete(id) {
        return new EmojiDeleteMutation(this._request).fetch(id);
    }
    /**
     * [Deprecated] Creates a new event.
     *
     * @param input - required input to pass to eventCreate
     * @returns EventPayload
     */
    eventCreate(input) {
        return new EventCreateMutation(this._request).fetch(input);
    }
    /**
     * Creates a new favorite (project, cycle etc).
     *
     * @param input - required input to pass to favoriteCreate
     * @returns FavoritePayload
     */
    favoriteCreate(input) {
        return new FavoriteCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes a favorite reference.
     *
     * @param id - required id to pass to favoriteDelete
     * @returns ArchivePayload
     */
    favoriteDelete(id) {
        return new FavoriteDeleteMutation(this._request).fetch(id);
    }
    /**
     * Updates a favorite.
     *
     * @param id - required id to pass to favoriteUpdate
     * @param input - required input to pass to favoriteUpdate
     * @returns FavoritePayload
     */
    favoriteUpdate(id, input) {
        return new FavoriteUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Saves user feedback.
     *
     * @param input - required input to pass to feedbackCreate
     * @returns FeedbackPayload
     */
    feedbackCreate(input) {
        return new FeedbackCreateMutation(this._request).fetch(input);
    }
    /**
     * XHR request payload to upload an images, video and other attachments directly to Linear's cloud storage.
     *
     * @param contentType - required contentType to pass to fileUpload
     * @param filename - required filename to pass to fileUpload
     * @param size - required size to pass to fileUpload
     * @param variables - variables without 'contentType', 'filename', 'size' to pass into the FileUploadMutation
     * @returns UploadPayload
     */
    fileUpload(contentType, filename, size, variables) {
        return new FileUploadMutation(this._request).fetch(contentType, filename, size, variables);
    }
    /**
     * Authenticate user account through Google OAuth. This is the 2nd step of OAuth flow.
     *
     * @param input - required input to pass to googleUserAccountAuth
     * @returns AuthResolverResponse
     */
    googleUserAccountAuth(input) {
        return new GoogleUserAccountAuthMutation(this._request).fetch(input);
    }
    /**
     * Upload an image from an URL to Linear.
     *
     * @param url - required url to pass to imageUploadFromUrl
     * @returns ImageUploadFromUrlPayload
     */
    imageUploadFromUrl(url) {
        return new ImageUploadFromUrlMutation(this._request).fetch(url);
    }
    /**
     * Deletes an integration.
     *
     * @param id - required id to pass to integrationDelete
     * @returns ArchivePayload
     */
    integrationDelete(id) {
        return new IntegrationDeleteMutation(this._request).fetch(id);
    }
    /**
     * Integrates the organization with Figma.
     *
     * @param code - required code to pass to integrationFigma
     * @param redirectUri - required redirectUri to pass to integrationFigma
     * @returns IntegrationPayload
     */
    integrationFigma(code, redirectUri) {
        return new IntegrationFigmaMutation(this._request).fetch(code, redirectUri);
    }
    /**
     * Integrates the organization with Front.
     *
     * @param code - required code to pass to integrationFront
     * @param redirectUri - required redirectUri to pass to integrationFront
     * @returns IntegrationPayload
     */
    integrationFront(code, redirectUri) {
        return new IntegrationFrontMutation(this._request).fetch(code, redirectUri);
    }
    /**
     * Generates a webhook for the GitHub commit integration.
     *
     * @returns GitHubCommitIntegrationPayload
     */
    get integrationGithubCommitCreate() {
        return new IntegrationGithubCommitCreateMutation(this._request).fetch();
    }
    /**
     * Connects the organization with the GitHub App.
     *
     * @param installationId - required installationId to pass to integrationGithubConnect
     * @returns IntegrationPayload
     */
    integrationGithubConnect(installationId) {
        return new IntegrationGithubConnectMutation(this._request).fetch(installationId);
    }
    /**
     * Connects the organization with a GitLab Access Token.
     *
     * @param accessToken - required accessToken to pass to integrationGitlabConnect
     * @param gitlabUrl - required gitlabUrl to pass to integrationGitlabConnect
     * @returns IntegrationPayload
     */
    integrationGitlabConnect(accessToken, gitlabUrl) {
        return new IntegrationGitlabConnectMutation(this._request).fetch(accessToken, gitlabUrl);
    }
    /**
     * Integrates the organization with Google Sheets.
     *
     * @param code - required code to pass to integrationGoogleSheets
     * @returns IntegrationPayload
     */
    integrationGoogleSheets(code) {
        return new IntegrationGoogleSheetsMutation(this._request).fetch(code);
    }
    /**
     * Integrates the organization with Intercom.
     *
     * @param code - required code to pass to integrationIntercom
     * @param redirectUri - required redirectUri to pass to integrationIntercom
     * @returns IntegrationPayload
     */
    integrationIntercom(code, redirectUri) {
        return new IntegrationIntercomMutation(this._request).fetch(code, redirectUri);
    }
    /**
     * Disconnects the organization from Intercom.
     *
     * @returns IntegrationPayload
     */
    get integrationIntercomDelete() {
        return new IntegrationIntercomDeleteMutation(this._request).fetch();
    }
    /**
     * [DEPRECATED] Updates settings on the Intercom integration.
     *
     * @param input - required input to pass to integrationIntercomSettingsUpdate
     * @returns IntegrationPayload
     */
    integrationIntercomSettingsUpdate(input) {
        return new IntegrationIntercomSettingsUpdateMutation(this._request).fetch(input);
    }
    /**
     * Enables Loom integration for the organization.
     *
     * @returns IntegrationPayload
     */
    get integrationLoom() {
        return new IntegrationLoomMutation(this._request).fetch();
    }
    /**
     * Archives an integration resource.
     *
     * @param id - required id to pass to integrationResourceArchive
     * @returns ArchivePayload
     */
    integrationResourceArchive(id) {
        return new IntegrationResourceArchiveMutation(this._request).fetch(id);
    }
    /**
     * Integrates the organization with Sentry.
     *
     * @param code - required code to pass to integrationSentryConnect
     * @param installationId - required installationId to pass to integrationSentryConnect
     * @param organizationSlug - required organizationSlug to pass to integrationSentryConnect
     * @returns IntegrationPayload
     */
    integrationSentryConnect(code, installationId, organizationSlug) {
        return new IntegrationSentryConnectMutation(this._request).fetch(code, installationId, organizationSlug);
    }
    /**
     * [INTERNAL] Updates the integration.
     *
     * @param id - required id to pass to integrationSettingsUpdate
     * @param input - required input to pass to integrationSettingsUpdate
     * @returns IntegrationPayload
     */
    integrationSettingsUpdate(id, input) {
        return new IntegrationSettingsUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Integrates the organization with Slack.
     *
     * @param code - required code to pass to integrationSlack
     * @param redirectUri - required redirectUri to pass to integrationSlack
     * @param variables - variables without 'code', 'redirectUri' to pass into the IntegrationSlackMutation
     * @returns IntegrationPayload
     */
    integrationSlack(code, redirectUri, variables) {
        return new IntegrationSlackMutation(this._request).fetch(code, redirectUri, variables);
    }
    /**
     * Imports custom emojis from your Slack workspace.
     *
     * @param code - required code to pass to integrationSlackImportEmojis
     * @param redirectUri - required redirectUri to pass to integrationSlackImportEmojis
     * @returns IntegrationPayload
     */
    integrationSlackImportEmojis(code, redirectUri) {
        return new IntegrationSlackImportEmojisMutation(this._request).fetch(code, redirectUri);
    }
    /**
     * Integrates your personal notifications with Slack.
     *
     * @param code - required code to pass to integrationSlackPersonal
     * @param redirectUri - required redirectUri to pass to integrationSlackPersonal
     * @returns IntegrationPayload
     */
    integrationSlackPersonal(code, redirectUri) {
        return new IntegrationSlackPersonalMutation(this._request).fetch(code, redirectUri);
    }
    /**
     * Slack webhook integration.
     *
     * @param code - required code to pass to integrationSlackPost
     * @param redirectUri - required redirectUri to pass to integrationSlackPost
     * @param teamId - required teamId to pass to integrationSlackPost
     * @param variables - variables without 'code', 'redirectUri', 'teamId' to pass into the IntegrationSlackPostMutation
     * @returns IntegrationPayload
     */
    integrationSlackPost(code, redirectUri, teamId, variables) {
        return new IntegrationSlackPostMutation(this._request).fetch(code, redirectUri, teamId, variables);
    }
    /**
     * Slack integration for project notifications.
     *
     * @param code - required code to pass to integrationSlackProjectPost
     * @param projectId - required projectId to pass to integrationSlackProjectPost
     * @param redirectUri - required redirectUri to pass to integrationSlackProjectPost
     * @returns IntegrationPayload
     */
    integrationSlackProjectPost(code, projectId, redirectUri) {
        return new IntegrationSlackProjectPostMutation(this._request).fetch(code, projectId, redirectUri);
    }
    /**
     * Integrates the organization with Zendesk.
     *
     * @param code - required code to pass to integrationZendesk
     * @param redirectUri - required redirectUri to pass to integrationZendesk
     * @param scope - required scope to pass to integrationZendesk
     * @param subdomain - required subdomain to pass to integrationZendesk
     * @returns IntegrationPayload
     */
    integrationZendesk(code, redirectUri, scope, subdomain) {
        return new IntegrationZendeskMutation(this._request).fetch(code, redirectUri, scope, subdomain);
    }
    /**
     * Archives an issue.
     *
     * @param id - required id to pass to issueArchive
     * @param variables - variables without 'id' to pass into the IssueArchiveMutation
     * @returns ArchivePayload
     */
    issueArchive(id, variables) {
        return new IssueArchiveMutation(this._request).fetch(id, variables);
    }
    /**
     * Updates multiple issues at once.
     *
     * @param ids - required ids to pass to issueBatchUpdate
     * @param input - required input to pass to issueBatchUpdate
     * @returns IssueBatchPayload
     */
    issueBatchUpdate(ids, input) {
        return new IssueBatchUpdateMutation(this._request).fetch(ids, input);
    }
    /**
     * Creates a new issue.
     *
     * @param input - required input to pass to issueCreate
     * @returns IssuePayload
     */
    issueCreate(input) {
        return new IssueCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes (trashes) an issue.
     *
     * @param id - required id to pass to issueDelete
     * @returns ArchivePayload
     */
    issueDelete(id) {
        return new IssueDeleteMutation(this._request).fetch(id);
    }
    /**
     * Kicks off an Asana import job.
     *
     * @param asanaTeamName - required asanaTeamName to pass to issueImportCreateAsana
     * @param asanaToken - required asanaToken to pass to issueImportCreateAsana
     * @param teamId - required teamId to pass to issueImportCreateAsana
     * @param variables - variables without 'asanaTeamName', 'asanaToken', 'teamId' to pass into the IssueImportCreateAsanaMutation
     * @returns IssueImportPayload
     */
    issueImportCreateAsana(asanaTeamName, asanaToken, teamId, variables) {
        return new IssueImportCreateAsanaMutation(this._request).fetch(asanaTeamName, asanaToken, teamId, variables);
    }
    /**
     * Kicks off a Clubhouse import job.
     *
     * @param clubhouseTeamName - required clubhouseTeamName to pass to issueImportCreateClubhouse
     * @param clubhouseToken - required clubhouseToken to pass to issueImportCreateClubhouse
     * @param teamId - required teamId to pass to issueImportCreateClubhouse
     * @param variables - variables without 'clubhouseTeamName', 'clubhouseToken', 'teamId' to pass into the IssueImportCreateClubhouseMutation
     * @returns IssueImportPayload
     */
    issueImportCreateClubhouse(clubhouseTeamName, clubhouseToken, teamId, variables) {
        return new IssueImportCreateClubhouseMutation(this._request).fetch(clubhouseTeamName, clubhouseToken, teamId, variables);
    }
    /**
     * Kicks off a GitHub import job.
     *
     * @param githubRepoName - required githubRepoName to pass to issueImportCreateGithub
     * @param githubRepoOwner - required githubRepoOwner to pass to issueImportCreateGithub
     * @param githubToken - required githubToken to pass to issueImportCreateGithub
     * @param teamId - required teamId to pass to issueImportCreateGithub
     * @param variables - variables without 'githubRepoName', 'githubRepoOwner', 'githubToken', 'teamId' to pass into the IssueImportCreateGithubMutation
     * @returns IssueImportPayload
     */
    issueImportCreateGithub(githubRepoName, githubRepoOwner, githubToken, teamId, variables) {
        return new IssueImportCreateGithubMutation(this._request).fetch(githubRepoName, githubRepoOwner, githubToken, teamId, variables);
    }
    /**
     * Kicks off a Jira import job.
     *
     * @param jiraEmail - required jiraEmail to pass to issueImportCreateJira
     * @param jiraHostname - required jiraHostname to pass to issueImportCreateJira
     * @param jiraProject - required jiraProject to pass to issueImportCreateJira
     * @param jiraToken - required jiraToken to pass to issueImportCreateJira
     * @param teamId - required teamId to pass to issueImportCreateJira
     * @param variables - variables without 'jiraEmail', 'jiraHostname', 'jiraProject', 'jiraToken', 'teamId' to pass into the IssueImportCreateJiraMutation
     * @returns IssueImportPayload
     */
    issueImportCreateJira(jiraEmail, jiraHostname, jiraProject, jiraToken, teamId, variables) {
        return new IssueImportCreateJiraMutation(this._request).fetch(jiraEmail, jiraHostname, jiraProject, jiraToken, teamId, variables);
    }
    /**
     * Deletes an import job.
     *
     * @param issueImportId - required issueImportId to pass to issueImportDelete
     * @returns IssueImportDeletePayload
     */
    issueImportDelete(issueImportId) {
        return new IssueImportDeleteMutation(this._request).fetch(issueImportId);
    }
    /**
     * Kicks off import processing.
     *
     * @param issueImportId - required issueImportId to pass to issueImportProcess
     * @param mapping - required mapping to pass to issueImportProcess
     * @returns IssueImportPayload
     */
    issueImportProcess(issueImportId, mapping) {
        return new IssueImportProcessMutation(this._request).fetch(issueImportId, mapping);
    }
    /**
     * Updates the mapping for the issue import.
     *
     * @param id - required id to pass to issueImportUpdate
     * @param input - required input to pass to issueImportUpdate
     * @returns IssueImportPayload
     */
    issueImportUpdate(id, input) {
        return new IssueImportUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Archives an issue label.
     *
     * @param id - required id to pass to issueLabelArchive
     * @returns ArchivePayload
     */
    issueLabelArchive(id) {
        return new IssueLabelArchiveMutation(this._request).fetch(id);
    }
    /**
     * Creates a new label.
     *
     * @param input - required input to pass to issueLabelCreate
     * @param variables - variables without 'input' to pass into the IssueLabelCreateMutation
     * @returns IssueLabelPayload
     */
    issueLabelCreate(input, variables) {
        return new IssueLabelCreateMutation(this._request).fetch(input, variables);
    }
    /**
     * Updates an label.
     *
     * @param id - required id to pass to issueLabelUpdate
     * @param input - required input to pass to issueLabelUpdate
     * @returns IssueLabelPayload
     */
    issueLabelUpdate(id, input) {
        return new IssueLabelUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Creates a new issue relation.
     *
     * @param input - required input to pass to issueRelationCreate
     * @returns IssueRelationPayload
     */
    issueRelationCreate(input) {
        return new IssueRelationCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes an issue relation.
     *
     * @param id - required id to pass to issueRelationDelete
     * @returns ArchivePayload
     */
    issueRelationDelete(id) {
        return new IssueRelationDeleteMutation(this._request).fetch(id);
    }
    /**
     * Updates an issue relation.
     *
     * @param id - required id to pass to issueRelationUpdate
     * @param input - required input to pass to issueRelationUpdate
     * @returns IssueRelationPayload
     */
    issueRelationUpdate(id, input) {
        return new IssueRelationUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Unarchives an issue.
     *
     * @param id - required id to pass to issueUnarchive
     * @returns ArchivePayload
     */
    issueUnarchive(id) {
        return new IssueUnarchiveMutation(this._request).fetch(id);
    }
    /**
     * Updates an issue.
     *
     * @param id - required id to pass to issueUpdate
     * @param input - required input to pass to issueUpdate
     * @returns IssuePayload
     */
    issueUpdate(id, input) {
        return new IssueUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * [INTERNAL] Connects the organization with a Jira Personal Access Token.
     *
     * @param input - required input to pass to jiraIntegrationConnect
     * @returns IntegrationPayload
     */
    jiraIntegrationConnect(input) {
        return new JiraIntegrationConnectMutation(this._request).fetch(input);
    }
    /**
     * Join an organization from onboarding.
     *
     * @param input - required input to pass to joinOrganizationFromOnboarding
     * @returns CreateOrJoinOrganizationResponse
     */
    joinOrganizationFromOnboarding(input) {
        return new JoinOrganizationFromOnboardingMutation(this._request).fetch(input);
    }
    /**
     * Leave an organization.
     *
     * @param organizationId - required organizationId to pass to leaveOrganization
     * @returns CreateOrJoinOrganizationResponse
     */
    leaveOrganization(organizationId) {
        return new LeaveOrganizationMutation(this._request).fetch(organizationId);
    }
    /**
     * Creates a new milestone.
     *
     * @param input - required input to pass to milestoneCreate
     * @returns MilestonePayload
     */
    milestoneCreate(input) {
        return new MilestoneCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes a milestone.
     *
     * @param id - required id to pass to milestoneDelete
     * @returns ArchivePayload
     */
    milestoneDelete(id) {
        return new MilestoneDeleteMutation(this._request).fetch(id);
    }
    /**
     * Updates a milestone.
     *
     * @param id - required id to pass to milestoneUpdate
     * @param input - required input to pass to milestoneUpdate
     * @returns MilestonePayload
     */
    milestoneUpdate(id, input) {
        return new MilestoneUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Archives a notification.
     *
     * @param id - required id to pass to notificationArchive
     * @returns ArchivePayload
     */
    notificationArchive(id) {
        return new NotificationArchiveMutation(this._request).fetch(id);
    }
    /**
     * Creates a notification.
     *
     * @param id - required id to pass to notificationCreate
     * @param input - required input to pass to notificationCreate
     * @returns NotificationPayload
     */
    notificationCreate(id, input) {
        return new NotificationCreateMutation(this._request).fetch(id, input);
    }
    /**
     * Creates a new notification subscription for a team or a project.
     *
     * @param input - required input to pass to notificationSubscriptionCreate
     * @returns NotificationSubscriptionPayload
     */
    notificationSubscriptionCreate(input) {
        return new NotificationSubscriptionCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes a notification subscription reference.
     *
     * @param id - required id to pass to notificationSubscriptionDelete
     * @returns ArchivePayload
     */
    notificationSubscriptionDelete(id) {
        return new NotificationSubscriptionDeleteMutation(this._request).fetch(id);
    }
    /**
     * Unarchives a notification.
     *
     * @param id - required id to pass to notificationUnarchive
     * @returns ArchivePayload
     */
    notificationUnarchive(id) {
        return new NotificationUnarchiveMutation(this._request).fetch(id);
    }
    /**
     * Updates a notification.
     *
     * @param id - required id to pass to notificationUpdate
     * @param input - required input to pass to notificationUpdate
     * @returns NotificationPayload
     */
    notificationUpdate(id, input) {
        return new NotificationUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Archives an OAuth client.
     *
     * @param id - required id to pass to oauthClientArchive
     * @returns ArchivePayload
     */
    oauthClientArchive(id) {
        return new OauthClientArchiveMutation(this._request).fetch(id);
    }
    /**
     * Creates a new OAuth client.
     *
     * @param input - required input to pass to oauthClientCreate
     * @returns OauthClientPayload
     */
    oauthClientCreate(input) {
        return new OauthClientCreateMutation(this._request).fetch(input);
    }
    /**
     * Updates an OAuth client.
     *
     * @param id - required id to pass to oauthClientRotateSecret
     * @returns RotateSecretPayload
     */
    oauthClientRotateSecret(id) {
        return new OauthClientRotateSecretMutation(this._request).fetch(id);
    }
    /**
     * Updates an OAuth client.
     *
     * @param id - required id to pass to oauthClientUpdate
     * @param input - required input to pass to oauthClientUpdate
     * @returns OauthClientPayload
     */
    oauthClientUpdate(id, input) {
        return new OauthClientUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Revokes an OAuth token.
     *
     * @param appId - required appId to pass to oauthTokenRevoke
     * @param scope - required scope to pass to oauthTokenRevoke
     * @returns OauthTokenRevokePayload
     */
    oauthTokenRevoke(appId, scope) {
        return new OauthTokenRevokeMutation(this._request).fetch(appId, scope);
    }
    /**
     * Cancels the deletion of an organization. Administrator privileges required.
     *
     * @returns OrganizationCancelDeletePayload
     */
    get organizationCancelDelete() {
        return new OrganizationCancelDeleteMutation(this._request).fetch();
    }
    /**
     * Delete's an organization. Administrator privileges required.
     *
     * @param input - required input to pass to organizationDelete
     * @returns OrganizationDeletePayload
     */
    organizationDelete(input) {
        return new OrganizationDeleteMutation(this._request).fetch(input);
    }
    /**
     * Get an organization's delete confirmation token. Administrator privileges required.
     *
     * @returns OrganizationDeletePayload
     */
    get organizationDeleteChallenge() {
        return new OrganizationDeleteChallengeMutation(this._request).fetch();
    }
    /**
     * Adds a domain to be allowed for an organization.
     *
     * @param input - required input to pass to organizationDomainCreate
     * @returns OrganizationDomainPayload
     */
    organizationDomainCreate(input) {
        return new OrganizationDomainCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes a domain.
     *
     * @param id - required id to pass to organizationDomainDelete
     * @returns ArchivePayload
     */
    organizationDomainDelete(id) {
        return new OrganizationDomainDeleteMutation(this._request).fetch(id);
    }
    /**
     * Verifies a domain to be added to an organization.
     *
     * @param input - required input to pass to organizationDomainVerify
     * @returns OrganizationDomainPayload
     */
    organizationDomainVerify(input) {
        return new OrganizationDomainVerifyMutation(this._request).fetch(input);
    }
    /**
     * Creates a new organization invite.
     *
     * @param input - required input to pass to organizationInviteCreate
     * @returns OrganizationInvitePayload
     */
    organizationInviteCreate(input) {
        return new OrganizationInviteCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes an organization invite.
     *
     * @param id - required id to pass to organizationInviteDelete
     * @returns ArchivePayload
     */
    organizationInviteDelete(id) {
        return new OrganizationInviteDeleteMutation(this._request).fetch(id);
    }
    /**
     * Updates the user's organization.
     *
     * @param input - required input to pass to organizationUpdate
     * @returns OrganizationPayload
     */
    organizationUpdate(input) {
        return new OrganizationUpdateMutation(this._request).fetch(input);
    }
    /**
     * Archives a project.
     *
     * @param id - required id to pass to projectArchive
     * @returns ArchivePayload
     */
    projectArchive(id) {
        return new ProjectArchiveMutation(this._request).fetch(id);
    }
    /**
     * Creates a new project.
     *
     * @param input - required input to pass to projectCreate
     * @returns ProjectPayload
     */
    projectCreate(input) {
        return new ProjectCreateMutation(this._request).fetch(input);
    }
    /**
     * Creates a new project link.
     *
     * @param input - required input to pass to projectLinkCreate
     * @returns ProjectLinkPayload
     */
    projectLinkCreate(input) {
        return new ProjectLinkCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes a project link.
     *
     * @param id - required id to pass to projectLinkDelete
     * @returns ArchivePayload
     */
    projectLinkDelete(id) {
        return new ProjectLinkDeleteMutation(this._request).fetch(id);
    }
    /**
     * Updates a project link.
     *
     * @param id - required id to pass to projectLinkUpdate
     * @param input - required input to pass to projectLinkUpdate
     * @returns ProjectLinkPayload
     */
    projectLinkUpdate(id, input) {
        return new ProjectLinkUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Unarchives a project.
     *
     * @param id - required id to pass to projectUnarchive
     * @returns ArchivePayload
     */
    projectUnarchive(id) {
        return new ProjectUnarchiveMutation(this._request).fetch(id);
    }
    /**
     * Updates a project.
     *
     * @param id - required id to pass to projectUpdate
     * @param input - required input to pass to projectUpdate
     * @returns ProjectPayload
     */
    projectUpdate(id, input) {
        return new ProjectUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Creates a push subscription.
     *
     * @param input - required input to pass to pushSubscriptionCreate
     * @returns PushSubscriptionPayload
     */
    pushSubscriptionCreate(input) {
        return new PushSubscriptionCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes a push subscription.
     *
     * @param id - required id to pass to pushSubscriptionDelete
     * @returns PushSubscriptionPayload
     */
    pushSubscriptionDelete(id) {
        return new PushSubscriptionDeleteMutation(this._request).fetch(id);
    }
    /**
     * Creates a new reaction.
     *
     * @param input - required input to pass to reactionCreate
     * @returns ReactionPayload
     */
    reactionCreate(input) {
        return new ReactionCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes a reaction.
     *
     * @param id - required id to pass to reactionDelete
     * @returns ArchivePayload
     */
    reactionDelete(id) {
        return new ReactionDeleteMutation(this._request).fetch(id);
    }
    /**
     * Manually update Google Sheets data.
     *
     * @param id - required id to pass to refreshGoogleSheetsData
     * @returns IntegrationPayload
     */
    refreshGoogleSheetsData(id) {
        return new RefreshGoogleSheetsDataMutation(this._request).fetch(id);
    }
    /**
     * Re-send an organization invite.
     *
     * @param id - required id to pass to resendOrganizationInvite
     * @returns ArchivePayload
     */
    resendOrganizationInvite(id) {
        return new ResendOrganizationInviteMutation(this._request).fetch(id);
    }
    /**
     * Authenticates a user account via email and authentication token for SAML.
     *
     * @param input - required input to pass to samlTokenUserAccountAuth
     * @returns AuthResolverResponse
     */
    samlTokenUserAccountAuth(input) {
        return new SamlTokenUserAccountAuthMutation(this._request).fetch(input);
    }
    /**
     * Creates a new team. The user who creates the team will automatically be added as a member to the newly created team.
     *
     * @param input - required input to pass to teamCreate
     * @param variables - variables without 'input' to pass into the TeamCreateMutation
     * @returns TeamPayload
     */
    teamCreate(input, variables) {
        return new TeamCreateMutation(this._request).fetch(input, variables);
    }
    /**
     * Deletes a team.
     *
     * @param id - required id to pass to teamDelete
     * @returns ArchivePayload
     */
    teamDelete(id) {
        return new TeamDeleteMutation(this._request).fetch(id);
    }
    /**
     * Deletes a previously used team key.
     *
     * @param id - required id to pass to teamKeyDelete
     * @returns ArchivePayload
     */
    teamKeyDelete(id) {
        return new TeamKeyDeleteMutation(this._request).fetch(id);
    }
    /**
     * Creates a new team membership.
     *
     * @param input - required input to pass to teamMembershipCreate
     * @returns TeamMembershipPayload
     */
    teamMembershipCreate(input) {
        return new TeamMembershipCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes a team membership.
     *
     * @param id - required id to pass to teamMembershipDelete
     * @returns ArchivePayload
     */
    teamMembershipDelete(id) {
        return new TeamMembershipDeleteMutation(this._request).fetch(id);
    }
    /**
     * Updates a team membership.
     *
     * @param id - required id to pass to teamMembershipUpdate
     * @param input - required input to pass to teamMembershipUpdate
     * @returns TeamMembershipPayload
     */
    teamMembershipUpdate(id, input) {
        return new TeamMembershipUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Updates a team.
     *
     * @param id - required id to pass to teamUpdate
     * @param input - required input to pass to teamUpdate
     * @returns TeamPayload
     */
    teamUpdate(id, input) {
        return new TeamUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Creates a new template.
     *
     * @param input - required input to pass to templateCreate
     * @returns TemplatePayload
     */
    templateCreate(input) {
        return new TemplateCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes a template.
     *
     * @param id - required id to pass to templateDelete
     * @returns ArchivePayload
     */
    templateDelete(id) {
        return new TemplateDeleteMutation(this._request).fetch(id);
    }
    /**
     * Updates an existing template.
     *
     * @param id - required id to pass to templateUpdate
     * @param input - required input to pass to templateUpdate
     * @returns TemplatePayload
     */
    templateUpdate(id, input) {
        return new TemplateUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Makes user a regular user. Can only be called by an admin.
     *
     * @param id - required id to pass to userDemoteAdmin
     * @returns UserAdminPayload
     */
    userDemoteAdmin(id) {
        return new UserDemoteAdminMutation(this._request).fetch(id);
    }
    /**
     * Updates a user's settings flag.
     *
     * @param flag - required flag to pass to userFlagUpdate
     * @param operation - required operation to pass to userFlagUpdate
     * @returns UserSettingsFlagPayload
     */
    userFlagUpdate(flag, operation) {
        return new UserFlagUpdateMutation(this._request).fetch(flag, operation);
    }
    /**
     * Makes user an admin. Can only be called by an admin.
     *
     * @param id - required id to pass to userPromoteAdmin
     * @returns UserAdminPayload
     */
    userPromoteAdmin(id) {
        return new UserPromoteAdminMutation(this._request).fetch(id);
    }
    /**
     * [Deprecated] Updates a user's settings flag.
     *
     * @param flag - required flag to pass to userSettingsFlagIncrement
     * @returns UserSettingsFlagPayload
     */
    userSettingsFlagIncrement(flag) {
        return new UserSettingsFlagIncrementMutation(this._request).fetch(flag);
    }
    /**
     * Resets user's setting flags.
     *
     * @returns UserSettingsFlagsResetPayload
     */
    get userSettingsFlagsReset() {
        return new UserSettingsFlagsResetMutation(this._request).fetch();
    }
    /**
     * Updates the user's settings.
     *
     * @param id - required id to pass to userSettingsUpdate
     * @param input - required input to pass to userSettingsUpdate
     * @returns UserSettingsPayload
     */
    userSettingsUpdate(id, input) {
        return new UserSettingsUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Subscribes user to changelog newsletter.
     *
     * @returns UserSubscribeToNewsletterPayload
     */
    get userSubscribeToNewsletter() {
        return new UserSubscribeToNewsletterMutation(this._request).fetch();
    }
    /**
     * Suspends a user. Can only be called by an admin.
     *
     * @param id - required id to pass to userSuspend
     * @returns UserAdminPayload
     */
    userSuspend(id) {
        return new UserSuspendMutation(this._request).fetch(id);
    }
    /**
     * Un-suspends a user. Can only be called by an admin.
     *
     * @param id - required id to pass to userUnsuspend
     * @returns UserAdminPayload
     */
    userUnsuspend(id) {
        return new UserUnsuspendMutation(this._request).fetch(id);
    }
    /**
     * Updates a user. Only available to organization admins and the user themselves.
     *
     * @param id - required id to pass to userUpdate
     * @param input - required input to pass to userUpdate
     * @returns UserPayload
     */
    userUpdate(id, input) {
        return new UserUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Creates a new ViewPreferences object.
     *
     * @param input - required input to pass to viewPreferencesCreate
     * @returns ViewPreferencesPayload
     */
    viewPreferencesCreate(input) {
        return new ViewPreferencesCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes a ViewPreferences.
     *
     * @param id - required id to pass to viewPreferencesDelete
     * @returns ArchivePayload
     */
    viewPreferencesDelete(id) {
        return new ViewPreferencesDeleteMutation(this._request).fetch(id);
    }
    /**
     * Updates an existing ViewPreferences object.
     *
     * @param id - required id to pass to viewPreferencesUpdate
     * @param input - required input to pass to viewPreferencesUpdate
     * @returns ViewPreferencesPayload
     */
    viewPreferencesUpdate(id, input) {
        return new ViewPreferencesUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Creates a new webhook.
     *
     * @param input - required input to pass to webhookCreate
     * @returns WebhookPayload
     */
    webhookCreate(input) {
        return new WebhookCreateMutation(this._request).fetch(input);
    }
    /**
     * Deletes a Webhook.
     *
     * @param id - required id to pass to webhookDelete
     * @returns ArchivePayload
     */
    webhookDelete(id) {
        return new WebhookDeleteMutation(this._request).fetch(id);
    }
    /**
     * Updates an existing Webhook.
     *
     * @param id - required id to pass to webhookUpdate
     * @param input - required input to pass to webhookUpdate
     * @returns WebhookPayload
     */
    webhookUpdate(id, input) {
        return new WebhookUpdateMutation(this._request).fetch(id, input);
    }
    /**
     * Archives a state. Only states with issues that have all been archived can be archived.
     *
     * @param id - required id to pass to workflowStateArchive
     * @returns ArchivePayload
     */
    workflowStateArchive(id) {
        return new WorkflowStateArchiveMutation(this._request).fetch(id);
    }
    /**
     * Creates a new state, adding it to the workflow of a team.
     *
     * @param input - required input to pass to workflowStateCreate
     * @returns WorkflowStatePayload
     */
    workflowStateCreate(input) {
        return new WorkflowStateCreateMutation(this._request).fetch(input);
    }
    /**
     * Updates a state.
     *
     * @param id - required id to pass to workflowStateUpdate
     * @param input - required input to pass to workflowStateUpdate
     * @returns WorkflowStatePayload
     */
    workflowStateUpdate(id, input) {
        return new WorkflowStateUpdateMutation(this._request).fetch(id, input);
    }
}

/**
 * Validate and return default LinearGraphQLClient options
 *
 * @param options initial request options to pass to the graphql client
 * @returns parsed graphql client options
 */
function parseClientOptions(_a) {
    var _b, _c;
    var { apiKey, accessToken, apiUrl, headers } = _a, opts = __rest(_a, ["apiKey", "accessToken", "apiUrl", "headers"]);
    if (!accessToken && !apiKey) {
        throw new Error("No accessToken or apiKey provided to the LinearClient - create one here: https://linear.app/settings/api");
    }
    return Object.assign({ headers: Object.assign(Object.assign({ 
            /** Use bearer if oauth token exists, otherwise use the provided apiKey */
            Authorization: accessToken
                ? accessToken.startsWith("Bearer ")
                    ? accessToken
                    : `Bearer ${accessToken}`
                : apiKey !== null && apiKey !== void 0 ? apiKey : "" }, headers), { 
            /** Override any user agent with the sdk name and version */
            "User-Agent": serializeUserAgent({
                [(_b = process.env.npm_package_name) !== null && _b !== void 0 ? _b : "@linear/sdk"]: (_c = process.env.npm_package_version) !== null && _c !== void 0 ? _c : "unknown",
            }) }), 
        /** Default to production linear api */
        apiUrl: apiUrl !== null && apiUrl !== void 0 ? apiUrl : "https://api.linear.app/graphql" }, opts);
}
/**
 * Create a Linear API client
 *
 * @param options request options to pass to the LinearGraphQLClient
 */
class LinearClient extends LinearSdk {
    constructor(options) {
        const parsedOptions = parseClientOptions(options);
        const graphQLClient = new LinearGraphQLClient(parsedOptions.apiUrl, parsedOptions);
        super((doc, vars) => 
        /** Call the LinearGraphQLClient */
        this.client.request(doc, vars).catch(error => {
            /** Catch and wrap errors from the LinearGraphQLClient */
            throw parseLinearError(error);
        }));
        this.options = parsedOptions;
        this.client = graphQLClient;
    }
}

export { AdministrableTeamsQuery, ApiKey, ApiKeyConnection, ApiKeyPayload, Application, ApplicationWithAuthorizationQuery, ArchivePayload, ArchiveResponse, Attachment, AttachmentArchiveMutation, AttachmentConnection, AttachmentCreateMutation, AttachmentDeleteMutation, AttachmentIssueQuery, AttachmentIssue_AttachmentsQuery, AttachmentIssue_ChildrenQuery, AttachmentIssue_CommentsQuery, AttachmentIssue_HistoryQuery, AttachmentIssue_InverseRelationsQuery, AttachmentIssue_LabelsQuery, AttachmentIssue_RelationsQuery, AttachmentIssue_SubscribersQuery, AttachmentLinkFrontMutation, AttachmentLinkIntercomMutation, AttachmentLinkJiraIssueMutation, AttachmentLinkUrlMutation, AttachmentLinkZendeskMutation, AttachmentPayload, AttachmentQuery, AttachmentUpdateMutation, AttachmentsForUrlQuery, AttachmentsQuery, AuditEntriesQuery, AuditEntry, AuditEntryConnection, AuditEntryType, AuditEntryTypesQuery, AuthResolverResponse, AuthenticationLinearError, AuthorizedApplication, AuthorizedApplicationsQuery, AvailableUsersQuery, BillingDetailsPayload, BillingDetailsQuery, BillingDetails_PaymentMethodQuery, BillingEmailPayload, BillingEmailUpdateMutation, BootstrapLinearError, Card, CollaborationDocumentUpdatePayload, CollaborativeDocumentJoinQuery, CollaborativeDocumentJoin_StepsQuery, CollaborativeDocumentUpdateMutation, Comment, CommentConnection, CommentCreateMutation, CommentDeleteMutation, CommentPayload, CommentQuery, CommentUpdateMutation, CommentsQuery, CommitPayload, Connection, ContactCreateMutation, ContactPayload, CreateCsvExportReportMutation, CreateCsvExportReportPayload, CreateOrJoinOrganizationResponse, CreateOrganizationFromOnboardingMutation, CustomView, CustomViewConnection, CustomViewCreateMutation, CustomViewDeleteMutation, CustomViewPayload, CustomViewQuery, CustomViewUpdateMutation, CustomViewsQuery, Cycle, CycleArchiveMutation, CycleConnection, CycleCreateMutation, CyclePayload, CycleQuery, CycleUpdateMutation, Cycle_IssuesQuery, Cycle_UncompletedIssuesUponCloseQuery, CyclesQuery, DebugFailWithInternalErrorMutation, DebugPayload, DependencyResponse, Document, DocumentConnection, DocumentCreateMutation, DocumentDeleteMutation, DocumentPayload, DocumentQuery, DocumentStep, DocumentUpdateMutation, DocumentVersion, DocumentVersionConnection, DocumentsQuery, EmailSubscribeMutation, EmailSubscribePayload, EmailTokenUserAccountAuthMutation, EmailUnsubscribeMutation, EmailUnsubscribePayload, EmailUserAccountAuthChallengeMutation, EmailUserAccountAuthChallengeResponse, Emoji, EmojiConnection, EmojiCreateMutation, EmojiDeleteMutation, EmojiPayload, EmojiQuery, EmojisQuery, EventCreateMutation, EventPayload, Favorite, FavoriteConnection, FavoriteCreateMutation, FavoriteDeleteMutation, FavoritePayload, FavoriteQuery, FavoriteUpdateMutation, Favorite_ChildrenQuery, FavoritesQuery, FeatureNotAccessibleLinearError, FeedbackCreateMutation, FeedbackPayload, FigmaEmbed, FigmaEmbedInfoQuery, FigmaEmbedInfo_FigmaEmbedQuery, FigmaEmbedPayload, FileUploadMutation, ForbiddenLinearError, FrontAttachmentPayload, GitHubCommitIntegrationPayload, GithubOAuthTokenPayload, GithubOrg, GithubRepo, GoogleSheetsSettings, GoogleUserAccountAuthMutation, GraphQLClientError, GraphqlLinearError, ImageUploadFromUrlMutation, ImageUploadFromUrlPayload, Integration, IntegrationConnection, IntegrationDeleteMutation, IntegrationFigmaMutation, IntegrationFrontMutation, IntegrationGithubCommitCreateMutation, IntegrationGithubConnectMutation, IntegrationGitlabConnectMutation, IntegrationGoogleSheetsMutation, IntegrationIntercomDeleteMutation, IntegrationIntercomMutation, IntegrationIntercomSettingsUpdateMutation, IntegrationLoomMutation, IntegrationPayload, IntegrationQuery, IntegrationResource, IntegrationResourceArchiveMutation, IntegrationResourceConnection, IntegrationResourceData, IntegrationSentryConnectMutation, IntegrationSettings, IntegrationSettingsUpdateMutation, IntegrationSlackImportEmojisMutation, IntegrationSlackMutation, IntegrationSlackPersonalMutation, IntegrationSlackPostMutation, IntegrationSlackProjectPostMutation, IntegrationZendeskMutation, IntegrationsQuery, IntercomSettings, InternalLinearError, InvalidInputLinearError, Invoice, Issue, IssueArchiveMutation, IssueBatchPayload, IssueBatchUpdateMutation, IssueConnection, IssueCreateMutation, IssueDeleteMutation, IssueDescriptionHistory, IssueDescriptionHistoryPayload, IssueHistory, IssueHistoryConnection, IssueImport, IssueImportCreateAsanaMutation, IssueImportCreateClubhouseMutation, IssueImportCreateGithubMutation, IssueImportCreateJiraMutation, IssueImportDeleteMutation, IssueImportDeletePayload, IssueImportFinishGithubOAuthQuery, IssueImportPayload, IssueImportProcessMutation, IssueImportUpdateMutation, IssueLabel, IssueLabelArchiveMutation, IssueLabelConnection, IssueLabelCreateMutation, IssueLabelPayload, IssueLabelQuery, IssueLabelUpdateMutation, IssueLabel_IssuesQuery, IssueLabelsQuery, IssuePayload, IssuePriorityValue, IssuePriorityValuesQuery, IssueQuery, IssueRelation, IssueRelationConnection, IssueRelationCreateMutation, IssueRelationDeleteMutation, IssueRelationHistoryPayload, IssueRelationPayload, IssueRelationQuery, IssueRelationUpdateMutation, IssueRelationsQuery, IssueSearchQuery, IssueUnarchiveMutation, IssueUpdateMutation, Issue_AttachmentsQuery, Issue_ChildrenQuery, Issue_CommentsQuery, Issue_HistoryQuery, Issue_InverseRelationsQuery, Issue_LabelsQuery, Issue_RelationsQuery, Issue_SubscribersQuery, IssuesQuery, JiraIntegrationConnectMutation, JiraLinearMapping, JiraProjectData, JiraSettings, JoinOrganizationFromOnboardingMutation, LeaveOrganizationMutation, LinearClient, LinearConnection, _generated_documents as LinearDocument, LinearError, LinearErrorType, LinearGraphQLClient, LinearGraphQLError, LinearSdk, LockTimeoutLinearError, Milestone, MilestoneConnection, MilestoneCreateMutation, MilestoneDeleteMutation, MilestonePayload, MilestoneQuery, MilestoneUpdateMutation, Milestone_ProjectsQuery, MilestonesQuery, NetworkLinearError, Notification, NotificationArchiveMutation, NotificationConnection, NotificationCreateMutation, NotificationPayload, NotificationQuery, NotificationSubscription, NotificationSubscriptionConnection, NotificationSubscriptionCreateMutation, NotificationSubscriptionDeleteMutation, NotificationSubscriptionPayload, NotificationSubscriptionQuery, NotificationSubscriptionsQuery, NotificationUnarchiveMutation, NotificationUpdateMutation, NotificationsQuery, OauthAuthStringAuthorizePayload, OauthAuthStringChallengePayload, OauthAuthStringCheckPayload, OauthClient, OauthClientArchiveMutation, OauthClientCreateMutation, OauthClientPayload, OauthClientRotateSecretMutation, OauthClientUpdateMutation, OauthTokenRevokeMutation, OauthTokenRevokePayload, Organization, OrganizationCancelDeleteMutation, OrganizationCancelDeletePayload, OrganizationDeleteChallengeMutation, OrganizationDeleteMutation, OrganizationDeletePayload, OrganizationDomain, OrganizationDomainCreateMutation, OrganizationDomainDeleteMutation, OrganizationDomainPayload, OrganizationDomainSimplePayload, OrganizationDomainVerifyMutation, OrganizationExistsPayload, OrganizationExistsQuery, OrganizationInvite, OrganizationInviteConnection, OrganizationInviteCreateMutation, OrganizationInviteDeleteMutation, OrganizationInviteDetailsPayload, OrganizationInviteDetailsQuery, OrganizationInvitePayload, OrganizationInviteQuery, OrganizationInvitesQuery, OrganizationPayload, OrganizationQuery, OrganizationUpdateMutation, Organization_IntegrationsQuery, Organization_LabelsQuery, Organization_MilestonesQuery, Organization_TeamsQuery, Organization_TemplatesQuery, Organization_UsersQuery, OtherLinearError, PageInfo, Project, ProjectArchiveMutation, ProjectConnection, ProjectCreateMutation, ProjectLink, ProjectLinkConnection, ProjectLinkCreateMutation, ProjectLinkDeleteMutation, ProjectLinkPayload, ProjectLinkQuery, ProjectLinkUpdateMutation, ProjectLinksQuery, ProjectPayload, ProjectQuery, ProjectUnarchiveMutation, ProjectUpdateMutation, Project_DocumentsQuery, Project_IssuesQuery, Project_LinksQuery, Project_MembersQuery, Project_TeamsQuery, ProjectsQuery, PullRequestPayload, PushSubscription, PushSubscriptionConnection, PushSubscriptionCreateMutation, PushSubscriptionDeleteMutation, PushSubscriptionPayload, PushSubscriptionTestPayload, PushSubscriptionTestQuery, RatelimitedLinearError, Reaction, ReactionConnection, ReactionCreateMutation, ReactionDeleteMutation, ReactionPayload, ReactionQuery, ReactionsQuery, RefreshGoogleSheetsDataMutation, Request, ResendOrganizationInviteMutation, RotateSecretPayload, SamlConfiguration, SamlTokenUserAccountAuthMutation, SentryIssuePayload, SentrySettings, SlackPostSettings, SsoUrlFromEmailQuery, SsoUrlFromEmailResponse, StepsResponse, Subscription, SubscriptionPayload, SubscriptionQuery, SubscriptionSessionPayload, SyncBatchResponse, SyncDeltaResponse, SyncResponse, SynchronizedPayload, Team, TeamConnection, TeamCreateMutation, TeamDeleteMutation, TeamKeyDeleteMutation, TeamMembership, TeamMembershipConnection, TeamMembershipCreateMutation, TeamMembershipDeleteMutation, TeamMembershipPayload, TeamMembershipQuery, TeamMembershipUpdateMutation, TeamMembershipsQuery, TeamPayload, TeamQuery, TeamUpdateMutation, Team_CyclesQuery, Team_IssuesQuery, Team_LabelsQuery, Team_MembersQuery, Team_MembershipsQuery, Team_ProjectsQuery, Team_StatesQuery, Team_TemplatesQuery, Team_WebhooksQuery, TeamsQuery, Template, TemplateConnection, TemplateCreateMutation, TemplateDeleteMutation, TemplatePayload, TemplateQuery, TemplateUpdateMutation, TemplatesQuery, UnknownLinearError, UploadFile, UploadFileHeader, UploadPayload, User, UserAccount, UserAdminPayload, UserAuthorizedApplication, UserConnection, UserDemoteAdminMutation, UserFlagUpdateMutation, UserLinearError, UserPayload, UserPromoteAdminMutation, UserQuery, UserSettings, UserSettingsFlagIncrementMutation, UserSettingsFlagPayload, UserSettingsFlagsResetMutation, UserSettingsFlagsResetPayload, UserSettingsPayload, UserSettingsQuery, UserSettingsUpdateMutation, UserSubscribeToNewsletterMutation, UserSubscribeToNewsletterPayload, UserSuspendMutation, UserUnsuspendMutation, UserUpdateMutation, User_AssignedIssuesQuery, User_CreatedIssuesQuery, User_TeamMembershipsQuery, User_TeamsQuery, UsersQuery, ViewPreferences, ViewPreferencesCreateMutation, ViewPreferencesDeleteMutation, ViewPreferencesPayload, ViewPreferencesUpdateMutation, ViewerQuery, Viewer_AssignedIssuesQuery, Viewer_CreatedIssuesQuery, Viewer_TeamMembershipsQuery, Viewer_TeamsQuery, Webhook, WebhookConnection, WebhookCreateMutation, WebhookDeleteMutation, WebhookPayload, WebhookQuery, WebhookUpdateMutation, WebhooksQuery, WorkflowState, WorkflowStateArchiveMutation, WorkflowStateConnection, WorkflowStateCreateMutation, WorkflowStatePayload, WorkflowStateQuery, WorkflowStateUpdateMutation, WorkflowState_IssuesQuery, WorkflowStatesQuery, ZendeskSettings, parseLinearError };
//# sourceMappingURL=index-es.js.map
